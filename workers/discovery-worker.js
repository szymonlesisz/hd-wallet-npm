(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
(function (global){
"use strict";function compare(e,t){if(e===t)return 0;for(var r=e.length,n=t.length,i=0,a=Math.min(r,n);i<a;++i)if(e[i]!==t[i]){r=e[i],n=t[i];break}return r<n?-1:n<r?1:0}function isBuffer(e){return global.Buffer&&"function"==typeof global.Buffer.isBuffer?global.Buffer.isBuffer(e):!(null==e||!e._isBuffer)}function pToString(e){return Object.prototype.toString.call(e)}function isView(e){return!isBuffer(e)&&("function"==typeof global.ArrayBuffer&&("function"==typeof ArrayBuffer.isView?ArrayBuffer.isView(e):!!e&&(e instanceof DataView||!!(e.buffer&&e.buffer instanceof ArrayBuffer))))}function getName(e){if(util.isFunction(e)){if(functionsHaveNames)return e.name;var t=e.toString(),r=t.match(regex);return r&&r[1]}}function truncate(e,t){return"string"==typeof e?e.length<t?e:e.slice(0,t):e}function inspect(e){if(functionsHaveNames||!util.isFunction(e))return util.inspect(e);var t=getName(e);return"[Function"+(t?": "+t:"")+"]"}function getMessage(e){return truncate(inspect(e.actual),128)+" "+e.operator+" "+truncate(inspect(e.expected),128)}function fail(e,t,r,n,i){throw new assert.AssertionError({message:r,actual:e,expected:t,operator:n,stackStartFunction:i})}function ok(e,t){e||fail(e,!0,t,"==",assert.ok)}function _deepEqual(e,t,r,n){if(e===t)return!0;if(isBuffer(e)&&isBuffer(t))return 0===compare(e,t);if(util.isDate(e)&&util.isDate(t))return e.getTime()===t.getTime();if(util.isRegExp(e)&&util.isRegExp(t))return e.source===t.source&&e.global===t.global&&e.multiline===t.multiline&&e.lastIndex===t.lastIndex&&e.ignoreCase===t.ignoreCase;if(null!==e&&"object"==typeof e||null!==t&&"object"==typeof t){if(isView(e)&&isView(t)&&pToString(e)===pToString(t)&&!(e instanceof Float32Array||e instanceof Float64Array))return 0===compare(new Uint8Array(e.buffer),new Uint8Array(t.buffer));if(isBuffer(e)!==isBuffer(t))return!1;n=n||{actual:[],expected:[]};var i=n.actual.indexOf(e);return i!==-1&&i===n.expected.indexOf(t)||(n.actual.push(e),n.expected.push(t),objEquiv(e,t,r,n))}return r?e===t:e==t}function isArguments(e){return"[object Arguments]"==Object.prototype.toString.call(e)}function objEquiv(e,t,r,n){if(null===e||void 0===e||null===t||void 0===t)return!1;if(util.isPrimitive(e)||util.isPrimitive(t))return e===t;if(r&&Object.getPrototypeOf(e)!==Object.getPrototypeOf(t))return!1;var i=isArguments(e),a=isArguments(t);if(i&&!a||!i&&a)return!1;if(i)return e=pSlice.call(e),t=pSlice.call(t),_deepEqual(e,t,r);var s,u,o=objectKeys(e),f=objectKeys(t);if(o.length!==f.length)return!1;for(o.sort(),f.sort(),u=o.length-1;u>=0;u--)if(o[u]!==f[u])return!1;for(u=o.length-1;u>=0;u--)if(s=o[u],!_deepEqual(e[s],t[s],r,n))return!1;return!0}function notDeepStrictEqual(e,t,r){_deepEqual(e,t,!0)&&fail(e,t,r,"notDeepStrictEqual",notDeepStrictEqual)}function expectedException(e,t){if(!e||!t)return!1;if("[object RegExp]"==Object.prototype.toString.call(t))return t.test(e);try{if(e instanceof t)return!0}catch(e){}return!Error.isPrototypeOf(t)&&t.call({},e)===!0}function _tryBlock(e){var t;try{e()}catch(e){t=e}return t}function _throws(e,t,r,n){var i;if("function"!=typeof t)throw new TypeError('"block" argument must be a function');"string"==typeof r&&(n=r,r=null),i=_tryBlock(t),n=(r&&r.name?" ("+r.name+").":".")+(n?" "+n:"."),e&&!i&&fail(i,r,"Missing expected exception"+n);var a="string"==typeof n,s=!e&&util.isError(i),u=!e&&i&&!r;if((s&&a&&expectedException(i,r)||u)&&fail(i,r,"Got unwanted exception"+n),e&&i&&r&&!expectedException(i,r)||!e&&i)throw i}var util=require("util/"),hasOwn=Object.prototype.hasOwnProperty,pSlice=Array.prototype.slice,functionsHaveNames=function(){return"foo"===function(){}.name}(),assert=module.exports=ok,regex=/\s*function\s+([^\(\s]*)\s*/;assert.AssertionError=function(e){this.name="AssertionError",this.actual=e.actual,this.expected=e.expected,this.operator=e.operator,e.message?(this.message=e.message,this.generatedMessage=!1):(this.message=getMessage(this),this.generatedMessage=!0);var t=e.stackStartFunction||fail;if(Error.captureStackTrace)Error.captureStackTrace(this,t);else{var r=new Error;if(r.stack){var n=r.stack,i=getName(t),a=n.indexOf("\n"+i);if(a>=0){var s=n.indexOf("\n",a+1);n=n.substring(s+1)}this.stack=n}}},util.inherits(assert.AssertionError,Error),assert.fail=fail,assert.ok=ok,assert.equal=function(e,t,r){e!=t&&fail(e,t,r,"==",assert.equal)},assert.notEqual=function(e,t,r){e==t&&fail(e,t,r,"!=",assert.notEqual)},assert.deepEqual=function(e,t,r){_deepEqual(e,t,!1)||fail(e,t,r,"deepEqual",assert.deepEqual)},assert.deepStrictEqual=function(e,t,r){_deepEqual(e,t,!0)||fail(e,t,r,"deepStrictEqual",assert.deepStrictEqual)},assert.notDeepEqual=function(e,t,r){_deepEqual(e,t,!1)&&fail(e,t,r,"notDeepEqual",assert.notDeepEqual)},assert.notDeepStrictEqual=notDeepStrictEqual,assert.strictEqual=function(e,t,r){e!==t&&fail(e,t,r,"===",assert.strictEqual)},assert.notStrictEqual=function(e,t,r){e===t&&fail(e,t,r,"!==",assert.notStrictEqual)},assert.throws=function(e,t,r){_throws(!0,e,t,r)},assert.doesNotThrow=function(e,t,r){_throws(!1,e,t,r)},assert.ifError=function(e){if(e)throw e};var objectKeys=Object.keys||function(e){var t=[];for(var r in e)hasOwn.call(e,r)&&t.push(r);return t};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"util/":101}],2:[function(require,module,exports){
(function (Buffer){
module.exports=function(r){function e(e){if(0===e.length)return"";for(var n=[0],t=0;t<e.length;++t){for(var o=0,h=e[t];o<n.length;++o)h+=n[o]<<8,n[o]=h%f,h=h/f|0;for(;h>0;)n.push(h%f),h=h/f|0}for(var u="",a=0;0===e[a]&&a<e.length-1;++a)u+=r[0];for(var v=n.length-1;v>=0;--v)u+=r[n[v]];return u}function n(r){if(0===r.length)return new Buffer(0);for(var e=[0],n=0;n<r.length;n++){var t=o[r[n]];if(void 0===t)return;for(var u=0,a=t;u<e.length;++u)a+=e[u]*f,e[u]=255&a,a>>=8;for(;a>0;)e.push(255&a),a>>=8}for(var v=0;r[v]===h&&v<r.length-1;++v)e.push(0);return new Buffer(e.reverse())}function t(r){var e=n(r);if(e)return e;throw new Error("Non-base"+f+" character")}for(var o={},f=r.length,h=r.charAt(0),u=0;u<r.length;u++){var a=r.charAt(u);if(void 0!==o[a])throw new TypeError(a+" is ambiguous");o[a]=u}return{encode:e,decodeUnsafe:n,decode:t}};

}).call(this,require("buffer").Buffer)

},{"buffer":51}],3:[function(require,module,exports){
"use strict";function placeHoldersCount(o){var r=o.length;if(r%4>0)throw new Error("Invalid string. Length must be a multiple of 4");return"="===o[r-2]?2:"="===o[r-1]?1:0}function byteLength(o){return 3*o.length/4-placeHoldersCount(o)}function toByteArray(o){var r,e,t,u,n,p,a=o.length;n=placeHoldersCount(o),p=new Arr(3*a/4-n),t=n>0?a-4:a;var l=0;for(r=0,e=0;r<t;r+=4,e+=3)u=revLookup[o.charCodeAt(r)]<<18|revLookup[o.charCodeAt(r+1)]<<12|revLookup[o.charCodeAt(r+2)]<<6|revLookup[o.charCodeAt(r+3)],p[l++]=u>>16&255,p[l++]=u>>8&255,p[l++]=255&u;return 2===n?(u=revLookup[o.charCodeAt(r)]<<2|revLookup[o.charCodeAt(r+1)]>>4,p[l++]=255&u):1===n&&(u=revLookup[o.charCodeAt(r)]<<10|revLookup[o.charCodeAt(r+1)]<<4|revLookup[o.charCodeAt(r+2)]>>2,p[l++]=u>>8&255,p[l++]=255&u),p}function tripletToBase64(o){return lookup[o>>18&63]+lookup[o>>12&63]+lookup[o>>6&63]+lookup[63&o]}function encodeChunk(o,r,e){for(var t,u=[],n=r;n<e;n+=3)t=(o[n]<<16)+(o[n+1]<<8)+o[n+2],u.push(tripletToBase64(t));return u.join("")}function fromByteArray(o){for(var r,e=o.length,t=e%3,u="",n=[],p=0,a=e-t;p<a;p+=16383)n.push(encodeChunk(o,p,p+16383>a?a:p+16383));return 1===t?(r=o[e-1],u+=lookup[r>>2],u+=lookup[r<<4&63],u+="=="):2===t&&(r=(o[e-2]<<8)+o[e-1],u+=lookup[r>>10],u+=lookup[r>>4&63],u+=lookup[r<<2&63],u+="="),n.push(u),n.join("")}exports.byteLength=byteLength,exports.toByteArray=toByteArray,exports.fromByteArray=fromByteArray;for(var lookup=[],revLookup=[],Arr="undefined"!=typeof Uint8Array?Uint8Array:Array,code="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",i=0,len=code.length;i<len;++i)lookup[i]=code[i],revLookup[code.charCodeAt(i)]=i;revLookup["-".charCodeAt(0)]=62,revLookup["_".charCodeAt(0)]=63;

},{}],4:[function(require,module,exports){
function BigInteger(t,r,o){if(!(this instanceof BigInteger))return new BigInteger(t,r,o);null!=t&&("number"==typeof t?this.fromNumber(t,r,o):null==r&&"string"!=typeof t?this.fromString(t,256):this.fromString(t,r))}function am1(t,r,o,n,i,e){for(;--e>=0;){var s=r*this[t++]+o[n]+i;i=Math.floor(s/67108864),o[n++]=67108863&s}return i}function am2(t,r,o,n,i,e){for(var s=32767&r,u=r>>15;--e>=0;){var h=32767&this[t],f=this[t++]>>15,p=u*h+f*s;h=s*h+((32767&p)<<15)+o[n]+(1073741823&i),i=(h>>>30)+(p>>>15)+u*f+(i>>>30),o[n++]=1073741823&h}return i}function am3(t,r,o,n,i,e){for(var s=16383&r,u=r>>14;--e>=0;){var h=16383&this[t],f=this[t++]>>14,p=u*h+f*s;h=s*h+((16383&p)<<14)+o[n]+i,i=(h>>28)+(p>>14)+u*f,o[n++]=268435455&h}return i}function int2char(t){return BI_RM.charAt(t)}function intAt(t,r){var o=BI_RC[t.charCodeAt(r)];return null==o?-1:o}function bnpCopyTo(t){for(var r=this.t-1;r>=0;--r)t[r]=this[r];t.t=this.t,t.s=this.s}function bnpFromInt(t){this.t=1,this.s=t<0?-1:0,t>0?this[0]=t:t<-1?this[0]=t+DV:this.t=0}function nbv(t){var r=new BigInteger;return r.fromInt(t),r}function bnpFromString(t,r){var o,n=this;if(16==r)o=4;else if(8==r)o=3;else if(256==r)o=8;else if(2==r)o=1;else if(32==r)o=5;else{if(4!=r)return void n.fromRadix(t,r);o=2}n.t=0,n.s=0;for(var i=t.length,e=!1,s=0;--i>=0;){var u=8==o?255&t[i]:intAt(t,i);u<0?"-"==t.charAt(i)&&(e=!0):(e=!1,0==s?n[n.t++]=u:s+o>n.DB?(n[n.t-1]|=(u&(1<<n.DB-s)-1)<<s,n[n.t++]=u>>n.DB-s):n[n.t-1]|=u<<s,(s+=o)>=n.DB&&(s-=n.DB))}8==o&&0!=(128&t[0])&&(n.s=-1,s>0&&(n[n.t-1]|=(1<<n.DB-s)-1<<s)),n.clamp(),e&&BigInteger.ZERO.subTo(n,n)}function bnpClamp(){for(var t=this.s&this.DM;this.t>0&&this[this.t-1]==t;)--this.t}function bnToString(t){var r=this;if(r.s<0)return"-"+r.negate().toString(t);var o;if(16==t)o=4;else if(8==t)o=3;else if(2==t)o=1;else if(32==t)o=5;else{if(4!=t)return r.toRadix(t);o=2}var n,i=(1<<o)-1,e=!1,s="",u=r.t,h=r.DB-u*r.DB%o;if(u-- >0)for(h<r.DB&&(n=r[u]>>h)>0&&(e=!0,s=int2char(n));u>=0;)h<o?(n=(r[u]&(1<<h)-1)<<o-h,n|=r[--u]>>(h+=r.DB-o)):(n=r[u]>>(h-=o)&i,h<=0&&(h+=r.DB,--u)),n>0&&(e=!0),e&&(s+=int2char(n));return e?s:"0"}function bnNegate(){var t=new BigInteger;return BigInteger.ZERO.subTo(this,t),t}function bnAbs(){return this.s<0?this.negate():this}function bnCompareTo(t){var r=this.s-t.s;if(0!=r)return r;var o=this.t;if(0!=(r=o-t.t))return this.s<0?-r:r;for(;--o>=0;)if(0!=(r=this[o]-t[o]))return r;return 0}function nbits(t){var r,o=1;return 0!=(r=t>>>16)&&(t=r,o+=16),0!=(r=t>>8)&&(t=r,o+=8),0!=(r=t>>4)&&(t=r,o+=4),0!=(r=t>>2)&&(t=r,o+=2),0!=(r=t>>1)&&(t=r,o+=1),o}function bnBitLength(){return this.t<=0?0:this.DB*(this.t-1)+nbits(this[this.t-1]^this.s&this.DM)}function bnByteLength(){return this.bitLength()>>3}function bnpDLShiftTo(t,r){var o;for(o=this.t-1;o>=0;--o)r[o+t]=this[o];for(o=t-1;o>=0;--o)r[o]=0;r.t=this.t+t,r.s=this.s}function bnpDRShiftTo(t,r){for(var o=t;o<this.t;++o)r[o-t]=this[o];r.t=Math.max(this.t-t,0),r.s=this.s}function bnpLShiftTo(t,r){var o,n=this,i=t%n.DB,e=n.DB-i,s=(1<<e)-1,u=Math.floor(t/n.DB),h=n.s<<i&n.DM;for(o=n.t-1;o>=0;--o)r[o+u+1]=n[o]>>e|h,h=(n[o]&s)<<i;for(o=u-1;o>=0;--o)r[o]=0;r[u]=h,r.t=n.t+u+1,r.s=n.s,r.clamp()}function bnpRShiftTo(t,r){var o=this;r.s=o.s;var n=Math.floor(t/o.DB);if(n>=o.t)return void(r.t=0);var i=t%o.DB,e=o.DB-i,s=(1<<i)-1;r[0]=o[n]>>i;for(var u=n+1;u<o.t;++u)r[u-n-1]|=(o[u]&s)<<e,r[u-n]=o[u]>>i;i>0&&(r[o.t-n-1]|=(o.s&s)<<e),r.t=o.t-n,r.clamp()}function bnpSubTo(t,r){for(var o=this,n=0,i=0,e=Math.min(t.t,o.t);n<e;)i+=o[n]-t[n],r[n++]=i&o.DM,i>>=o.DB;if(t.t<o.t){for(i-=t.s;n<o.t;)i+=o[n],r[n++]=i&o.DM,i>>=o.DB;i+=o.s}else{for(i+=o.s;n<t.t;)i-=t[n],r[n++]=i&o.DM,i>>=o.DB;i-=t.s}r.s=i<0?-1:0,i<-1?r[n++]=o.DV+i:i>0&&(r[n++]=i),r.t=n,r.clamp()}function bnpMultiplyTo(t,r){var o=this.abs(),n=t.abs(),i=o.t;for(r.t=i+n.t;--i>=0;)r[i]=0;for(i=0;i<n.t;++i)r[i+o.t]=o.am(0,n[i],r,i,0,o.t);r.s=0,r.clamp(),this.s!=t.s&&BigInteger.ZERO.subTo(r,r)}function bnpSquareTo(t){for(var r=this.abs(),o=t.t=2*r.t;--o>=0;)t[o]=0;for(o=0;o<r.t-1;++o){var n=r.am(o,r[o],t,2*o,0,1);(t[o+r.t]+=r.am(o+1,2*r[o],t,2*o+1,n,r.t-o-1))>=r.DV&&(t[o+r.t]-=r.DV,t[o+r.t+1]=1)}t.t>0&&(t[t.t-1]+=r.am(o,r[o],t,2*o,0,1)),t.s=0,t.clamp()}function bnpDivRemTo(t,r,o){var n=this,i=t.abs();if(!(i.t<=0)){var e=n.abs();if(e.t<i.t)return null!=r&&r.fromInt(0),void(null!=o&&n.copyTo(o));null==o&&(o=new BigInteger);var s=new BigInteger,u=n.s,h=t.s,f=n.DB-nbits(i[i.t-1]);f>0?(i.lShiftTo(f,s),e.lShiftTo(f,o)):(i.copyTo(s),e.copyTo(o));var p=s.t,a=s[p-1];if(0!=a){var b=a*(1<<n.F1)+(p>1?s[p-2]>>n.F2:0),l=n.FV/b,m=(1<<n.F1)/b,g=1<<n.F2,c=o.t,v=c-p,T=null==r?new BigInteger:r;for(s.dlShiftTo(v,T),o.compareTo(T)>=0&&(o[o.t++]=1,o.subTo(T,o)),BigInteger.ONE.dlShiftTo(p,T),T.subTo(s,s);s.t<p;)s[s.t++]=0;for(;--v>=0;){var B=o[--c]==a?n.DM:Math.floor(o[c]*l+(o[c-1]+g)*m);if((o[c]+=s.am(0,B,o,v,0,p))<B)for(s.dlShiftTo(v,T),o.subTo(T,o);o[c]<--B;)o.subTo(T,o)}null!=r&&(o.drShiftTo(p,r),u!=h&&BigInteger.ZERO.subTo(r,r)),o.t=p,o.clamp(),f>0&&o.rShiftTo(f,o),u<0&&BigInteger.ZERO.subTo(o,o)}}}function bnMod(t){var r=new BigInteger;return this.abs().divRemTo(t,null,r),this.s<0&&r.compareTo(BigInteger.ZERO)>0&&t.subTo(r,r),r}function Classic(t){this.m=t}function cConvert(t){return t.s<0||t.compareTo(this.m)>=0?t.mod(this.m):t}function cRevert(t){return t}function cReduce(t){t.divRemTo(this.m,null,t)}function cMulTo(t,r,o){t.multiplyTo(r,o),this.reduce(o)}function cSqrTo(t,r){t.squareTo(r),this.reduce(r)}function bnpInvDigit(){if(this.t<1)return 0;var t=this[0];if(0==(1&t))return 0;var r=3&t;return r=r*(2-(15&t)*r)&15,r=r*(2-(255&t)*r)&255,r=r*(2-((65535&t)*r&65535))&65535,r=r*(2-t*r%this.DV)%this.DV,r>0?this.DV-r:-r}function Montgomery(t){this.m=t,this.mp=t.invDigit(),this.mpl=32767&this.mp,this.mph=this.mp>>15,this.um=(1<<t.DB-15)-1,this.mt2=2*t.t}function montConvert(t){var r=new BigInteger;return t.abs().dlShiftTo(this.m.t,r),r.divRemTo(this.m,null,r),t.s<0&&r.compareTo(BigInteger.ZERO)>0&&this.m.subTo(r,r),r}function montRevert(t){var r=new BigInteger;return t.copyTo(r),this.reduce(r),r}function montReduce(t){for(;t.t<=this.mt2;)t[t.t++]=0;for(var r=0;r<this.m.t;++r){var o=32767&t[r],n=o*this.mpl+((o*this.mph+(t[r]>>15)*this.mpl&this.um)<<15)&t.DM;for(o=r+this.m.t,t[o]+=this.m.am(0,n,t,r,0,this.m.t);t[o]>=t.DV;)t[o]-=t.DV,t[++o]++}t.clamp(),t.drShiftTo(this.m.t,t),t.compareTo(this.m)>=0&&t.subTo(this.m,t)}function montSqrTo(t,r){t.squareTo(r),this.reduce(r)}function montMulTo(t,r,o){t.multiplyTo(r,o),this.reduce(o)}function bnpIsEven(){return 0==(this.t>0?1&this[0]:this.s)}function bnpExp(t,r){if(t>4294967295||t<1)return BigInteger.ONE;var o=new BigInteger,n=new BigInteger,i=r.convert(this),e=nbits(t)-1;for(i.copyTo(o);--e>=0;)if(r.sqrTo(o,n),(t&1<<e)>0)r.mulTo(n,i,o);else{var s=o;o=n,n=s}return r.revert(o)}function bnModPowInt(t,r){var o;return o=t<256||r.isEven()?new Classic(r):new Montgomery(r),this.exp(t,o)}function bnClone(){var t=new BigInteger;return this.copyTo(t),t}function bnIntValue(){if(this.s<0){if(1==this.t)return this[0]-this.DV;if(0==this.t)return-1}else{if(1==this.t)return this[0];if(0==this.t)return 0}return(this[1]&(1<<32-this.DB)-1)<<this.DB|this[0]}function bnByteValue(){return 0==this.t?this.s:this[0]<<24>>24}function bnShortValue(){return 0==this.t?this.s:this[0]<<16>>16}function bnpChunkSize(t){return Math.floor(Math.LN2*this.DB/Math.log(t))}function bnSigNum(){return this.s<0?-1:this.t<=0||1==this.t&&this[0]<=0?0:1}function bnpToRadix(t){if(null==t&&(t=10),0==this.signum()||t<2||t>36)return"0";var r=this.chunkSize(t),o=Math.pow(t,r),n=nbv(o),i=new BigInteger,e=new BigInteger,s="";for(this.divRemTo(n,i,e);i.signum()>0;)s=(o+e.intValue()).toString(t).substr(1)+s,i.divRemTo(n,i,e);return e.intValue().toString(t)+s}function bnpFromRadix(t,r){var o=this;o.fromInt(0),null==r&&(r=10);for(var n=o.chunkSize(r),i=Math.pow(r,n),e=!1,s=0,u=0,h=0;h<t.length;++h){var f=intAt(t,h);f<0?"-"==t.charAt(h)&&0==o.signum()&&(e=!0):(u=r*u+f,++s>=n&&(o.dMultiply(i),o.dAddOffset(u,0),s=0,u=0))}s>0&&(o.dMultiply(Math.pow(r,s)),o.dAddOffset(u,0)),e&&BigInteger.ZERO.subTo(o,o)}function bnpFromNumber(t,r,o){var n=this;if("number"==typeof r)if(t<2)n.fromInt(1);else for(n.fromNumber(t,o),n.testBit(t-1)||n.bitwiseTo(BigInteger.ONE.shiftLeft(t-1),op_or,n),n.isEven()&&n.dAddOffset(1,0);!n.isProbablePrime(r);)n.dAddOffset(2,0),n.bitLength()>t&&n.subTo(BigInteger.ONE.shiftLeft(t-1),n);else{var i=new Array,e=7&t;i.length=1+(t>>3),r.nextBytes(i),e>0?i[0]&=(1<<e)-1:i[0]=0,n.fromString(i,256)}}function bnToByteArray(){var t=this,r=t.t,o=new Array;o[0]=t.s;var n,i=t.DB-r*t.DB%8,e=0;if(r-- >0)for(i<t.DB&&(n=t[r]>>i)!=(t.s&t.DM)>>i&&(o[e++]=n|t.s<<t.DB-i);r>=0;)i<8?(n=(t[r]&(1<<i)-1)<<8-i,n|=t[--r]>>(i+=t.DB-8)):(n=t[r]>>(i-=8)&255,i<=0&&(i+=t.DB,--r)),0!=(128&n)&&(n|=-256),0===e&&(128&t.s)!=(128&n)&&++e,(e>0||n!=t.s)&&(o[e++]=n);return o}function bnEquals(t){return 0==this.compareTo(t)}function bnMin(t){return this.compareTo(t)<0?this:t}function bnMax(t){return this.compareTo(t)>0?this:t}function bnpBitwiseTo(t,r,o){var n,i,e=this,s=Math.min(t.t,e.t);for(n=0;n<s;++n)o[n]=r(e[n],t[n]);if(t.t<e.t){for(i=t.s&e.DM,n=s;n<e.t;++n)o[n]=r(e[n],i);o.t=e.t}else{for(i=e.s&e.DM,n=s;n<t.t;++n)o[n]=r(i,t[n]);o.t=t.t}o.s=r(e.s,t.s),o.clamp()}function op_and(t,r){return t&r}function bnAnd(t){var r=new BigInteger;return this.bitwiseTo(t,op_and,r),r}function op_or(t,r){return t|r}function bnOr(t){var r=new BigInteger;return this.bitwiseTo(t,op_or,r),r}function op_xor(t,r){return t^r}function bnXor(t){var r=new BigInteger;return this.bitwiseTo(t,op_xor,r),r}function op_andnot(t,r){return t&~r}function bnAndNot(t){var r=new BigInteger;return this.bitwiseTo(t,op_andnot,r),r}function bnNot(){for(var t=new BigInteger,r=0;r<this.t;++r)t[r]=this.DM&~this[r];return t.t=this.t,t.s=~this.s,t}function bnShiftLeft(t){var r=new BigInteger;return t<0?this.rShiftTo(-t,r):this.lShiftTo(t,r),r}function bnShiftRight(t){var r=new BigInteger;return t<0?this.lShiftTo(-t,r):this.rShiftTo(t,r),r}function lbit(t){if(0==t)return-1;var r=0;return 0==(65535&t)&&(t>>=16,r+=16),0==(255&t)&&(t>>=8,r+=8),0==(15&t)&&(t>>=4,r+=4),0==(3&t)&&(t>>=2,r+=2),0==(1&t)&&++r,r}function bnGetLowestSetBit(){for(var t=0;t<this.t;++t)if(0!=this[t])return t*this.DB+lbit(this[t]);return this.s<0?this.t*this.DB:-1}function cbit(t){for(var r=0;0!=t;)t&=t-1,++r;return r}function bnBitCount(){for(var t=0,r=this.s&this.DM,o=0;o<this.t;++o)t+=cbit(this[o]^r);return t}function bnTestBit(t){var r=Math.floor(t/this.DB);return r>=this.t?0!=this.s:0!=(this[r]&1<<t%this.DB)}function bnpChangeBit(t,r){var o=BigInteger.ONE.shiftLeft(t);return this.bitwiseTo(o,r,o),o}function bnSetBit(t){return this.changeBit(t,op_or)}function bnClearBit(t){return this.changeBit(t,op_andnot)}function bnFlipBit(t){return this.changeBit(t,op_xor)}function bnpAddTo(t,r){for(var o=this,n=0,i=0,e=Math.min(t.t,o.t);n<e;)i+=o[n]+t[n],r[n++]=i&o.DM,i>>=o.DB;if(t.t<o.t){for(i+=t.s;n<o.t;)i+=o[n],r[n++]=i&o.DM,i>>=o.DB;i+=o.s}else{for(i+=o.s;n<t.t;)i+=t[n],r[n++]=i&o.DM,i>>=o.DB;i+=t.s}r.s=i<0?-1:0,i>0?r[n++]=i:i<-1&&(r[n++]=o.DV+i),r.t=n,r.clamp()}function bnAdd(t){var r=new BigInteger;return this.addTo(t,r),r}function bnSubtract(t){var r=new BigInteger;return this.subTo(t,r),r}function bnMultiply(t){var r=new BigInteger;return this.multiplyTo(t,r),r}function bnSquare(){var t=new BigInteger;return this.squareTo(t),t}function bnDivide(t){var r=new BigInteger;return this.divRemTo(t,r,null),r}function bnRemainder(t){var r=new BigInteger;return this.divRemTo(t,null,r),r}function bnDivideAndRemainder(t){var r=new BigInteger,o=new BigInteger;return this.divRemTo(t,r,o),new Array(r,o)}function bnpDMultiply(t){this[this.t]=this.am(0,t-1,this,0,0,this.t),++this.t,this.clamp()}function bnpDAddOffset(t,r){if(0!=t){for(;this.t<=r;)this[this.t++]=0;for(this[r]+=t;this[r]>=this.DV;)this[r]-=this.DV,++r>=this.t&&(this[this.t++]=0),++this[r]}}function NullExp(){}function nNop(t){return t}function nMulTo(t,r,o){t.multiplyTo(r,o)}function nSqrTo(t,r){t.squareTo(r)}function bnPow(t){return this.exp(t,new NullExp)}function bnpMultiplyLowerTo(t,r,o){var n=Math.min(this.t+t.t,r);for(o.s=0,o.t=n;n>0;)o[--n]=0;var i;for(i=o.t-this.t;n<i;++n)o[n+this.t]=this.am(0,t[n],o,n,0,this.t);for(i=Math.min(t.t,r);n<i;++n)this.am(0,t[n],o,n,0,r-n);o.clamp()}function bnpMultiplyUpperTo(t,r,o){--r;var n=o.t=this.t+t.t-r;for(o.s=0;--n>=0;)o[n]=0;for(n=Math.max(r-this.t,0);n<t.t;++n)o[this.t+n-r]=this.am(r-n,t[n],o,0,0,this.t+n-r);o.clamp(),o.drShiftTo(1,o)}function Barrett(t){this.r2=new BigInteger,this.q3=new BigInteger,BigInteger.ONE.dlShiftTo(2*t.t,this.r2),this.mu=this.r2.divide(t),this.m=t}function barrettConvert(t){if(t.s<0||t.t>2*this.m.t)return t.mod(this.m);if(t.compareTo(this.m)<0)return t;var r=new BigInteger;return t.copyTo(r),this.reduce(r),r}function barrettRevert(t){return t}function barrettReduce(t){var r=this;for(t.drShiftTo(r.m.t-1,r.r2),t.t>r.m.t+1&&(t.t=r.m.t+1,t.clamp()),r.mu.multiplyUpperTo(r.r2,r.m.t+1,r.q3),r.m.multiplyLowerTo(r.q3,r.m.t+1,r.r2);t.compareTo(r.r2)<0;)t.dAddOffset(1,r.m.t+1);for(t.subTo(r.r2,t);t.compareTo(r.m)>=0;)t.subTo(r.m,t)}function barrettSqrTo(t,r){t.squareTo(r),this.reduce(r)}function barrettMulTo(t,r,o){t.multiplyTo(r,o),this.reduce(o)}function bnModPow(t,r){var o,n,i=t.bitLength(),e=nbv(1);if(i<=0)return e;o=i<18?1:i<48?3:i<144?4:i<768?5:6,n=i<8?new Classic(r):r.isEven()?new Barrett(r):new Montgomery(r);var s=new Array,u=3,h=o-1,f=(1<<o)-1;if(s[1]=n.convert(this),o>1){var p=new BigInteger;for(n.sqrTo(s[1],p);u<=f;)s[u]=new BigInteger,n.mulTo(p,s[u-2],s[u]),u+=2}var a,b,l=t.t-1,m=!0,g=new BigInteger;for(i=nbits(t[l])-1;l>=0;){for(i>=h?a=t[l]>>i-h&f:(a=(t[l]&(1<<i+1)-1)<<h-i,l>0&&(a|=t[l-1]>>this.DB+i-h)),u=o;0==(1&a);)a>>=1,--u;if((i-=u)<0&&(i+=this.DB,--l),m)s[a].copyTo(e),m=!1;else{for(;u>1;)n.sqrTo(e,g),n.sqrTo(g,e),u-=2;u>0?n.sqrTo(e,g):(b=e,e=g,g=b),n.mulTo(g,s[a],e)}for(;l>=0&&0==(t[l]&1<<i);)n.sqrTo(e,g),b=e,e=g,g=b,--i<0&&(i=this.DB-1,--l)}return n.revert(e)}function bnGCD(t){var r=this.s<0?this.negate():this.clone(),o=t.s<0?t.negate():t.clone();if(r.compareTo(o)<0){var n=r;r=o,o=n}var i=r.getLowestSetBit(),e=o.getLowestSetBit();if(e<0)return r;for(i<e&&(e=i),e>0&&(r.rShiftTo(e,r),o.rShiftTo(e,o));r.signum()>0;)(i=r.getLowestSetBit())>0&&r.rShiftTo(i,r),(i=o.getLowestSetBit())>0&&o.rShiftTo(i,o),r.compareTo(o)>=0?(r.subTo(o,r),r.rShiftTo(1,r)):(o.subTo(r,o),o.rShiftTo(1,o));return e>0&&o.lShiftTo(e,o),o}function bnpModInt(t){if(t<=0)return 0;var r=this.DV%t,o=this.s<0?t-1:0;if(this.t>0)if(0==r)o=this[0]%t;else for(var n=this.t-1;n>=0;--n)o=(r*o+this[n])%t;return o}function bnModInverse(t){var r=t.isEven();if(0===this.signum())throw new Error("division by zero");if(this.isEven()&&r||0==t.signum())return BigInteger.ZERO;for(var o=t.clone(),n=this.clone(),i=nbv(1),e=nbv(0),s=nbv(0),u=nbv(1);0!=o.signum();){for(;o.isEven();)o.rShiftTo(1,o),r?(i.isEven()&&e.isEven()||(i.addTo(this,i),e.subTo(t,e)),i.rShiftTo(1,i)):e.isEven()||e.subTo(t,e),e.rShiftTo(1,e);for(;n.isEven();)n.rShiftTo(1,n),r?(s.isEven()&&u.isEven()||(s.addTo(this,s),u.subTo(t,u)),s.rShiftTo(1,s)):u.isEven()||u.subTo(t,u),u.rShiftTo(1,u);o.compareTo(n)>=0?(o.subTo(n,o),r&&i.subTo(s,i),e.subTo(u,e)):(n.subTo(o,n),r&&s.subTo(i,s),u.subTo(e,u))}if(0!=n.compareTo(BigInteger.ONE))return BigInteger.ZERO;for(;u.compareTo(t)>=0;)u.subTo(t,u);for(;u.signum()<0;)u.addTo(t,u);return u}function bnIsProbablePrime(t){var r,o=this.abs();if(1==o.t&&o[0]<=lowprimes[lowprimes.length-1]){for(r=0;r<lowprimes.length;++r)if(o[0]==lowprimes[r])return!0;return!1}if(o.isEven())return!1;for(r=1;r<lowprimes.length;){for(var n=lowprimes[r],i=r+1;i<lowprimes.length&&n<lplim;)n*=lowprimes[i++];for(n=o.modInt(n);r<i;)if(n%lowprimes[r++]==0)return!1}return o.millerRabin(t)}function bnpMillerRabin(t){var r=this.subtract(BigInteger.ONE),o=r.getLowestSetBit();if(o<=0)return!1;var n=r.shiftRight(o);(t=t+1>>1)>lowprimes.length&&(t=lowprimes.length);for(var i,e=new BigInteger(null),s=[],u=0;u<t;++u){for(;i=lowprimes[Math.floor(Math.random()*lowprimes.length)],s.indexOf(i)!=-1;);s.push(i),e.fromInt(i);var h=e.modPow(n,this);if(0!=h.compareTo(BigInteger.ONE)&&0!=h.compareTo(r)){for(var i=1;i++<o&&0!=h.compareTo(r);)if(h=h.modPowInt(2,this),0==h.compareTo(BigInteger.ONE))return!1;if(0!=h.compareTo(r))return!1}}return!0}var proto=BigInteger.prototype;proto.__bigi=require("../package.json").version,BigInteger.isBigInteger=function(t,r){return t&&t.__bigi&&(!r||t.__bigi===proto.__bigi)};var dbits;BigInteger.prototype.am=am1,dbits=26,BigInteger.prototype.DB=dbits,BigInteger.prototype.DM=(1<<dbits)-1;var DV=BigInteger.prototype.DV=1<<dbits,BI_FP=52;BigInteger.prototype.FV=Math.pow(2,BI_FP),BigInteger.prototype.F1=BI_FP-dbits,BigInteger.prototype.F2=2*dbits-BI_FP;var BI_RM="0123456789abcdefghijklmnopqrstuvwxyz",BI_RC=new Array,rr,vv;for(rr="0".charCodeAt(0),vv=0;vv<=9;++vv)BI_RC[rr++]=vv;for(rr="a".charCodeAt(0),vv=10;vv<36;++vv)BI_RC[rr++]=vv;for(rr="A".charCodeAt(0),vv=10;vv<36;++vv)BI_RC[rr++]=vv;Classic.prototype.convert=cConvert,Classic.prototype.revert=cRevert,Classic.prototype.reduce=cReduce,Classic.prototype.mulTo=cMulTo,Classic.prototype.sqrTo=cSqrTo,Montgomery.prototype.convert=montConvert,Montgomery.prototype.revert=montRevert,Montgomery.prototype.reduce=montReduce,Montgomery.prototype.mulTo=montMulTo,Montgomery.prototype.sqrTo=montSqrTo,proto.copyTo=bnpCopyTo,proto.fromInt=bnpFromInt,proto.fromString=bnpFromString,proto.clamp=bnpClamp,proto.dlShiftTo=bnpDLShiftTo,proto.drShiftTo=bnpDRShiftTo,proto.lShiftTo=bnpLShiftTo,proto.rShiftTo=bnpRShiftTo,proto.subTo=bnpSubTo,proto.multiplyTo=bnpMultiplyTo,proto.squareTo=bnpSquareTo,proto.divRemTo=bnpDivRemTo,proto.invDigit=bnpInvDigit,proto.isEven=bnpIsEven,proto.exp=bnpExp,proto.toString=bnToString,proto.negate=bnNegate,proto.abs=bnAbs,proto.compareTo=bnCompareTo,proto.bitLength=bnBitLength,proto.byteLength=bnByteLength,proto.mod=bnMod,proto.modPowInt=bnModPowInt,NullExp.prototype.convert=nNop,NullExp.prototype.revert=nNop,NullExp.prototype.mulTo=nMulTo,NullExp.prototype.sqrTo=nSqrTo,Barrett.prototype.convert=barrettConvert,Barrett.prototype.revert=barrettRevert,Barrett.prototype.reduce=barrettReduce,Barrett.prototype.mulTo=barrettMulTo,Barrett.prototype.sqrTo=barrettSqrTo;var lowprimes=[2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997],lplim=(1<<26)/lowprimes[lowprimes.length-1];proto.chunkSize=bnpChunkSize,proto.toRadix=bnpToRadix,proto.fromRadix=bnpFromRadix,proto.fromNumber=bnpFromNumber,proto.bitwiseTo=bnpBitwiseTo,proto.changeBit=bnpChangeBit,proto.addTo=bnpAddTo,proto.dMultiply=bnpDMultiply,proto.dAddOffset=bnpDAddOffset,proto.multiplyLowerTo=bnpMultiplyLowerTo,proto.multiplyUpperTo=bnpMultiplyUpperTo,proto.modInt=bnpModInt,proto.millerRabin=bnpMillerRabin,proto.clone=bnClone,proto.intValue=bnIntValue,proto.byteValue=bnByteValue,proto.shortValue=bnShortValue,proto.signum=bnSigNum,proto.toByteArray=bnToByteArray,proto.equals=bnEquals,proto.min=bnMin,proto.max=bnMax,proto.and=bnAnd,proto.or=bnOr,proto.xor=bnXor,proto.andNot=bnAndNot,proto.not=bnNot,proto.shiftLeft=bnShiftLeft,proto.shiftRight=bnShiftRight,proto.getLowestSetBit=bnGetLowestSetBit,proto.bitCount=bnBitCount,proto.testBit=bnTestBit,proto.setBit=bnSetBit,proto.clearBit=bnClearBit,proto.flipBit=bnFlipBit,proto.add=bnAdd,proto.subtract=bnSubtract,proto.multiply=bnMultiply,proto.divide=bnDivide,proto.remainder=bnRemainder,proto.divideAndRemainder=bnDivideAndRemainder,proto.modPow=bnModPow,proto.modInverse=bnModInverse,proto.pow=bnPow,proto.gcd=bnGCD,proto.isProbablePrime=bnIsProbablePrime,proto.square=bnSquare,BigInteger.ZERO=nbv(0),BigInteger.ONE=nbv(1),BigInteger.valueOf=nbv,module.exports=BigInteger;

},{"../package.json":7}],5:[function(require,module,exports){
(function (Buffer){
var assert=require("assert"),BigInteger=require("./bigi");BigInteger.fromByteArrayUnsigned=function(e){return new BigInteger(128&e[0]?[0].concat(e):e)},BigInteger.prototype.toByteArrayUnsigned=function(){var e=this.toByteArray();return 0===e[0]?e.slice(1):e},BigInteger.fromDERInteger=function(e){return new BigInteger(e)},BigInteger.prototype.toDERInteger=BigInteger.prototype.toByteArray,BigInteger.fromBuffer=function(e){if(128&e[0]){var t=Array.prototype.slice.call(e);return new BigInteger([0].concat(t))}return new BigInteger(e)},BigInteger.fromHex=function(e){return""===e?BigInteger.ZERO:(assert.equal(e,e.match(/^[A-Fa-f0-9]+/),"Invalid hex string"),assert.equal(e.length%2,0,"Incomplete hex"),new BigInteger(e,16))},BigInteger.prototype.toBuffer=function(e){for(var t=this.toByteArrayUnsigned(),r=[],n=e-t.length;r.length<n;)r.push(0);return new Buffer(r.concat(t))},BigInteger.prototype.toHex=function(e){return this.toBuffer(e).toString("hex")};

}).call(this,require("buffer").Buffer)

},{"./bigi":4,"assert":1,"buffer":51}],6:[function(require,module,exports){
var BigInteger=require("./bigi");require("./convert"),module.exports=BigInteger;

},{"./bigi":4,"./convert":5}],7:[function(require,module,exports){
module.exports={
  "name": "bigi",
  "version": "1.4.2",
  "description": "Big integers.",
  "keywords": [
    "cryptography",
    "math",
    "bitcoin",
    "arbitrary",
    "precision",
    "arithmetic",
    "big",
    "integer",
    "int",
    "number",
    "biginteger",
    "bigint",
    "bignumber",
    "decimal",
    "float"
  ],
  "devDependencies": {
    "coveralls": "^2.11.2",
    "istanbul": "^0.3.5",
    "jshint": "^2.5.1",
    "mocha": "^2.1.0",
    "mochify": "^2.1.0"
  },
  "repository": {
    "url": "https://github.com/cryptocoinjs/bigi",
    "type": "git"
  },
  "main": "./lib/index.js",
  "scripts": {
    "browser-test": "./node_modules/.bin/mochify --wd -R spec",
    "test": "./node_modules/.bin/_mocha -- test/*.js",
    "jshint": "./node_modules/.bin/jshint --config jshint.json lib/*.js ; true",
    "unit": "./node_modules/.bin/mocha",
    "coverage": "./node_modules/.bin/istanbul cover ./node_modules/.bin/_mocha -- --reporter list test/*.js",
    "coveralls": "npm run-script coverage && node ./node_modules/.bin/coveralls < coverage/lcov.info"
  },
  "dependencies": {},
  "testling": {
    "files": "test/*.js",
    "harness": "mocha",
    "browsers": [
      "ie/9..latest",
      "firefox/latest",
      "chrome/latest",
      "safari/6.0..latest",
      "iphone/6.0..latest",
      "android-browser/4.2..latest"
    ]
  }
}

},{}],8:[function(require,module,exports){
(function (Buffer){
function check(e){if(e.length<8)return!1;if(e.length>72)return!1;if(48!==e[0])return!1;if(e[1]!==e.length-2)return!1;if(2!==e[2])return!1;var r=e[3];if(0===r)return!1;if(5+r>=e.length)return!1;if(2!==e[4+r])return!1;var n=e[5+r];return 0!==n&&(6+r+n===e.length&&(!(128&e[4])&&(!(r>1&&0===e[4]&&!(128&e[5]))&&(!(128&e[r+6])&&!(n>1&&0===e[r+6]&&!(128&e[r+7]))))))}function decode(e){if(e.length<8)throw new Error("DER sequence length is too short");if(e.length>72)throw new Error("DER sequence length is too long");if(48!==e[0])throw new Error("Expected DER sequence");if(e[1]!==e.length-2)throw new Error("DER sequence length is invalid");if(2!==e[2])throw new Error("Expected DER integer");var r=e[3];if(0===r)throw new Error("R length is zero");if(5+r>=e.length)throw new Error("R length is too long");if(2!==e[4+r])throw new Error("Expected DER integer (2)");var n=e[5+r];if(0===n)throw new Error("S length is zero");if(6+r+n!==e.length)throw new Error("S length is invalid");if(128&e[4])throw new Error("R value is negative");if(r>1&&0===e[4]&&!(128&e[5]))throw new Error("R value excessively padded");if(128&e[r+6])throw new Error("S value is negative");if(n>1&&0===e[r+6]&&!(128&e[r+7]))throw new Error("S value excessively padded");return{r:e.slice(4,4+r),s:e.slice(6+r)}}function encode(e,r){var n=e.length,t=r.length;if(0===n)throw new Error("R length is zero");if(0===t)throw new Error("S length is zero");if(n>33)throw new Error("R length is too long");if(t>33)throw new Error("S length is too long");if(128&e[0])throw new Error("R value is negative");if(128&r[0])throw new Error("S value is negative");if(n>1&&0===e[0]&&!(128&e[1]))throw new Error("R value excessively padded");if(t>1&&0===r[0]&&!(128&r[1]))throw new Error("S value excessively padded");var o=new Buffer(6+n+t);return o[0]=48,o[1]=o.length-2,o[2]=2,o[3]=e.length,e.copy(o,4),o[4+n]=2,o[5+n]=r.length,r.copy(o,6+n),o}module.exports={check:check,decode:decode,encode:encode};

}).call(this,require("buffer").Buffer)

},{"buffer":51}],9:[function(require,module,exports){
module.exports={
  "OP_FALSE": 0,
  "OP_0": 0,
  "OP_PUSHDATA1": 76,
  "OP_PUSHDATA2": 77,
  "OP_PUSHDATA4": 78,
  "OP_1NEGATE": 79,
  "OP_RESERVED": 80,
  "OP_1": 81,
  "OP_TRUE": 81,
  "OP_2": 82,
  "OP_3": 83,
  "OP_4": 84,
  "OP_5": 85,
  "OP_6": 86,
  "OP_7": 87,
  "OP_8": 88,
  "OP_9": 89,
  "OP_10": 90,
  "OP_11": 91,
  "OP_12": 92,
  "OP_13": 93,
  "OP_14": 94,
  "OP_15": 95,
  "OP_16": 96,

  "OP_NOP": 97,
  "OP_VER": 98,
  "OP_IF": 99,
  "OP_NOTIF": 100,
  "OP_VERIF": 101,
  "OP_VERNOTIF": 102,
  "OP_ELSE": 103,
  "OP_ENDIF": 104,
  "OP_VERIFY": 105,
  "OP_RETURN": 106,

  "OP_TOALTSTACK": 107,
  "OP_FROMALTSTACK": 108,
  "OP_2DROP": 109,
  "OP_2DUP": 110,
  "OP_3DUP": 111,
  "OP_2OVER": 112,
  "OP_2ROT": 113,
  "OP_2SWAP": 114,
  "OP_IFDUP": 115,
  "OP_DEPTH": 116,
  "OP_DROP": 117,
  "OP_DUP": 118,
  "OP_NIP": 119,
  "OP_OVER": 120,
  "OP_PICK": 121,
  "OP_ROLL": 122,
  "OP_ROT": 123,
  "OP_SWAP": 124,
  "OP_TUCK": 125,

  "OP_CAT": 126,
  "OP_SUBSTR": 127,
  "OP_LEFT": 128,
  "OP_RIGHT": 129,
  "OP_SIZE": 130,

  "OP_INVERT": 131,
  "OP_AND": 132,
  "OP_OR": 133,
  "OP_XOR": 134,
  "OP_EQUAL": 135,
  "OP_EQUALVERIFY": 136,
  "OP_RESERVED1": 137,
  "OP_RESERVED2": 138,

  "OP_1ADD": 139,
  "OP_1SUB": 140,
  "OP_2MUL": 141,
  "OP_2DIV": 142,
  "OP_NEGATE": 143,
  "OP_ABS": 144,
  "OP_NOT": 145,
  "OP_0NOTEQUAL": 146,
  "OP_ADD": 147,
  "OP_SUB": 148,
  "OP_MUL": 149,
  "OP_DIV": 150,
  "OP_MOD": 151,
  "OP_LSHIFT": 152,
  "OP_RSHIFT": 153,

  "OP_BOOLAND": 154,
  "OP_BOOLOR": 155,
  "OP_NUMEQUAL": 156,
  "OP_NUMEQUALVERIFY": 157,
  "OP_NUMNOTEQUAL": 158,
  "OP_LESSTHAN": 159,
  "OP_GREATERTHAN": 160,
  "OP_LESSTHANOREQUAL": 161,
  "OP_GREATERTHANOREQUAL": 162,
  "OP_MIN": 163,
  "OP_MAX": 164,

  "OP_WITHIN": 165,

  "OP_RIPEMD160": 166,
  "OP_SHA1": 167,
  "OP_SHA256": 168,
  "OP_HASH160": 169,
  "OP_HASH256": 170,
  "OP_CODESEPARATOR": 171,
  "OP_CHECKSIG": 172,
  "OP_CHECKSIGVERIFY": 173,
  "OP_CHECKMULTISIG": 174,
  "OP_CHECKMULTISIGVERIFY": 175,

  "OP_NOP1": 176,
  "OP_NOP2": 177,
  "OP_CHECKLOCKTIMEVERIFY": 177,

  "OP_NOP3": 178,
  "OP_NOP4": 179,
  "OP_NOP5": 180,
  "OP_NOP6": 181,
  "OP_NOP7": 182,
  "OP_NOP8": 183,
  "OP_NOP9": 184,
  "OP_NOP10": 185,

  "OP_PUBKEYHASH": 253,
  "OP_PUBKEY": 254,
  "OP_INVALIDOPCODE": 255
}

},{}],10:[function(require,module,exports){
var OPS=require("./index.json"),map={};for(var op in OPS){map[OPS[op]]=op}module.exports=map;

},{"./index.json":9}],11:[function(require,module,exports){
(function (Buffer){
function fromBase58Check(t){var e=bs58check.decode(t);if(e.length<21)throw new TypeError(t+" is too short");if(e.length>22)throw new TypeError(t+" is too long");var r=22===e.length,c=r?2:1,o=r?e.readUInt16BE(0):e[0];return{hash:e.slice(c),version:o}}function toBase58Check(t,e){typeforce(types.tuple(types.Hash160bit,types.UInt16),arguments);var r=e>255,c=r?22:21,o=r?2:1,s=new Buffer(c);return r?s.writeUInt16BE(e,0):s.writeUInt8(e,0),t.copy(s,o),bs58check.encode(s)}function fromOutputScript(t,e){if(e=e||networks.bitcoin,bscript.pubKeyHash.output.check(t))return toBase58Check(bscript.compile(t).slice(3,23),e.pubKeyHash);if(bscript.scriptHash.output.check(t))return toBase58Check(bscript.compile(t).slice(2,22),e.scriptHash);throw new Error(bscript.toASM(t)+" has no matching Address")}function toOutputScript(t,e){e=e||networks.bitcoin;var r=fromBase58Check(t);if(r.version===e.pubKeyHash)return bscript.pubKeyHash.output.encode(r.hash);if(r.version===e.scriptHash)return bscript.scriptHash.output.encode(r.hash);throw new Error(t+" has no matching Script")}var bs58check=require("bs58check"),bscript=require("./script"),networks=require("./networks"),typeforce=require("typeforce"),types=require("./types");module.exports={fromBase58Check:fromBase58Check,fromOutputScript:fromOutputScript,toBase58Check:toBase58Check,toOutputScript:toOutputScript};

}).call(this,require("buffer").Buffer)

},{"./networks":20,"./script":21,"./types":47,"bs58check":50,"buffer":51,"typeforce":96}],12:[function(require,module,exports){
(function (Buffer){
function Block(){this.version=1,this.prevHash=null,this.merkleRoot=null,this.timestamp=0,this.bits=0,this.nonce=0}var bufferutils=require("./bufferutils"),bcrypto=require("./crypto"),fastMerkleRoot=require("merkle-lib/fastRoot"),typeforce=require("typeforce"),types=require("./types"),Transaction=require("./transaction");Block.fromBuffer=function(t){function r(r){return o+=r,t.slice(o-r,o)}function e(){var r=t.readUInt32LE(o);return o+=4,r}if(t.length<80)throw new Error("Buffer too small (< 80 bytes)");var o=0,n=new Block;if(n.version=function(){var r=t.readInt32LE(o);return o+=4,r}(),n.prevHash=r(32),n.merkleRoot=r(32),n.timestamp=e(),n.bits=e(),n.nonce=e(),80===t.length)return n;var i=function(){var r=bufferutils.readVarInt(t,o);return o+=r.size,r.number}();n.transactions=[];for(var s=0;s<i;++s){var c=function(){var r=Transaction.fromBuffer(t.slice(o),!1,!0);return o+=r.byteLength(),r}();n.transactions.push(c)}return n},Block.fromHex=function(t){return Block.fromBuffer(new Buffer(t,"hex"))},Block.prototype.getHash=function(){return bcrypto.hash256(this.toBuffer(!0))},Block.prototype.getId=function(){return this.getHash().reverse().toString("hex")},Block.prototype.getUTCDate=function(){var t=new Date(0);return t.setUTCSeconds(this.timestamp),t},Block.prototype.toBuffer=function(t){function r(t){t.copy(o,n),n+=t.length}function e(t){o.writeUInt32LE(t,n),n+=4}var o=new Buffer(80),n=0;if(function(t){o.writeInt32LE(t,n),n+=4}(this.version),r(this.prevHash),r(this.merkleRoot),e(this.timestamp),e(this.bits),e(this.nonce),t||!this.transactions)return o;var i=bufferutils.varIntBuffer(this.transactions.length),s=this.transactions.map(function(t){return t.toBuffer()});return Buffer.concat([o,i].concat(s))},Block.prototype.toHex=function(t){return this.toBuffer(t).toString("hex")},Block.calculateTarget=function(t){var r=((4278190080&t)>>24)-3,e=8388607&t,o=new Buffer(32);return o.fill(0),o.writeUInt32BE(e,28-r),o},Block.calculateMerkleRoot=function(t){if(typeforce([{getHash:types.Function}],t),0===t.length)throw TypeError("Cannot compute merkle root for zero transactions");return fastMerkleRoot(t.map(function(t){return t.getHash()}),bcrypto.hash256)},Block.prototype.checkMerkleRoot=function(){if(!this.transactions)return!1;var t=Block.calculateMerkleRoot(this.transactions);return 0===this.merkleRoot.compare(t)},Block.prototype.checkProofOfWork=function(){var t=this.getHash().reverse(),r=Block.calculateTarget(this.bits);return t.compare(r)<=0},module.exports=Block;

}).call(this,require("buffer").Buffer)

},{"./bufferutils":13,"./crypto":14,"./transaction":45,"./types":47,"buffer":51,"merkle-lib/fastRoot":67,"typeforce":96}],13:[function(require,module,exports){
function verifuint(r,n){if("number"!=typeof r)throw new Error("cannot write a non-number as a number");if(r<0)throw new Error("specified a negative value for writing an unsigned value");if(r>n)throw new Error("RangeError: value out of range");if(Math.floor(r)!==r)throw new Error("value has a fractional component")}function readUInt64LE(r,n){var t=r.readUInt32LE(n),e=r.readUInt32LE(n+4);return e*=4294967296,verifuint(e+t,9007199254740991),e+t}function writeUInt64LE(r,n,t){return verifuint(n,9007199254740991),r.writeInt32LE(n&-1,t),r.writeUInt32LE(Math.floor(n/4294967296),t+4),t+8}function readVarInt(r,n){return{number:varuint.decode(r,n),size:varuint.decode.bytes}}function writeVarInt(r,n,t){return varuint.encode(n,r,t),varuint.encode.bytes}var pushdata=require("pushdata-bitcoin"),varuint=require("varuint-bitcoin");module.exports={pushDataSize:pushdata.encodingLength,readPushDataInt:pushdata.decode,readUInt64LE:readUInt64LE,readVarInt:readVarInt,varIntBuffer:varuint.encode,varIntSize:varuint.encodingLength,writePushDataInt:pushdata.encode,writeUInt64LE:writeUInt64LE,writeVarInt:writeVarInt};

},{"pushdata-bitcoin":70,"varuint-bitcoin":102}],14:[function(require,module,exports){
function ripemd160(a){return createHash("rmd160").update(a).digest()}function sha1(a){return createHash("sha1").update(a).digest()}function sha256(a){return createHash("sha256").update(a).digest()}function hash160(a){return ripemd160(sha256(a))}function hash256(a){return sha256(sha256(a))}var createHash=require("create-hash");module.exports={hash160:hash160,hash256:hash256,ripemd160:ripemd160,sha1:sha1,sha256:sha256};

},{"create-hash":54}],15:[function(require,module,exports){
(function (Buffer){
function deterministicGenerateK(e,t,r){typeforce(types.tuple(types.Hash256bit,types.Buffer256bit,types.Function),arguments);var i=new Buffer(32),a=new Buffer(32);a.fill(1),i.fill(0),i=createHmac("sha256",i).update(a).update(ZERO).update(t).update(e).digest(),a=createHmac("sha256",i).update(a).digest(),i=createHmac("sha256",i).update(a).update(ONE).update(t).update(e).digest(),a=createHmac("sha256",i).update(a).digest(),a=createHmac("sha256",i).update(a).digest();for(var u=BigInteger.fromBuffer(a);u.signum()<=0||u.compareTo(secp256k1.n)>=0||!r(u);)i=createHmac("sha256",i).update(a).update(ZERO).digest(),a=createHmac("sha256",i).update(a).digest(),a=createHmac("sha256",i).update(a).digest(),u=BigInteger.fromBuffer(a);return u}function sign(e,t){typeforce(types.tuple(types.Hash256bit,types.BigInt),arguments);var r,i,a=t.toBuffer(32),u=BigInteger.fromBuffer(e),s=secp256k1.n,n=secp256k1.G;return deterministicGenerateK(e,a,function(e){var a=n.multiply(e);return!secp256k1.isInfinity(a)&&(r=a.affineX.mod(s),0!==r.signum()&&(i=e.modInverse(s).multiply(u.add(t.multiply(r))).mod(s),0!==i.signum()))}),i.compareTo(N_OVER_TWO)>0&&(i=s.subtract(i)),new ECSignature(r,i)}function verify(e,t,r){typeforce(types.tuple(types.Hash256bit,types.ECSignature,types.ECPoint),arguments);var i=secp256k1.n,a=secp256k1.G,u=t.r,s=t.s;if(u.signum()<=0||u.compareTo(i)>=0)return!1;if(s.signum()<=0||s.compareTo(i)>=0)return!1;var n=BigInteger.fromBuffer(e),p=s.modInverse(i),c=n.multiply(p).mod(i),f=u.multiply(p).mod(i),m=a.multiplyTwo(c,r,f);return!secp256k1.isInfinity(m)&&m.affineX.mod(i).equals(u)}var createHmac=require("create-hmac"),typeforce=require("typeforce"),types=require("./types"),BigInteger=require("bigi"),ECSignature=require("./ecsignature"),ZERO=new Buffer([0]),ONE=new Buffer([1]),ecurve=require("ecurve"),secp256k1=ecurve.getCurveByName("secp256k1"),N_OVER_TWO=secp256k1.n.shiftRight(1);module.exports={deterministicGenerateK:deterministicGenerateK,sign:sign,verify:verify,__curve:secp256k1};

}).call(this,require("buffer").Buffer)

},{"./ecsignature":17,"./types":47,"bigi":6,"buffer":51,"create-hmac":57,"ecurve":60,"typeforce":96}],16:[function(require,module,exports){
function ECPair(e,r,t){if(t&&typeforce({compressed:types.maybe(types.Boolean),network:types.maybe(types.Network)},t),t=t||{},e){if(e.signum()<=0)throw new Error("Private key must be greater than 0");if(e.compareTo(secp256k1.n)>=0)throw new Error("Private key must be less than the curve order");if(r)throw new TypeError("Unexpected publicKey parameter");this.d=e}else typeforce(types.ECPoint,r),this.__Q=r;this.compressed=void 0===t.compressed||t.compressed,this.network=t.network||NETWORKS.bitcoin}var baddress=require("./address"),bcrypto=require("./crypto"),ecdsa=require("./ecdsa"),randomBytes=require("randombytes"),typeforce=require("typeforce"),types=require("./types"),wif=require("wif"),NETWORKS=require("./networks"),BigInteger=require("bigi"),ecurve=require("ecurve"),secp256k1=ecdsa.__curve;Object.defineProperty(ECPair.prototype,"Q",{get:function(){return!this.__Q&&this.d&&(this.__Q=secp256k1.G.multiply(this.d)),this.__Q}}),ECPair.fromPublicKeyBuffer=function(e,r){var t=ecurve.Point.decodeFrom(secp256k1,e);return new ECPair(null,t,{compressed:t.compressed,network:r})},ECPair.fromWIF=function(e,r){var t=wif.decode(e),i=t.version;if(types.Array(r)){if(!(r=r.filter(function(e){return i===e.wif}).pop()))throw new Error("Unknown network version")}else if(r=r||NETWORKS.bitcoin,i!==r.wif)throw new Error("Invalid network version");return new ECPair(BigInteger.fromBuffer(t.privateKey),null,{compressed:t.compressed,network:r})},ECPair.makeRandom=function(e){e=e||{};var r,t=e.rng||randomBytes;do{var i=t(32);typeforce(types.Buffer256bit,i),r=BigInteger.fromBuffer(i)}while(r.signum()<=0||r.compareTo(secp256k1.n)>=0);return new ECPair(r,null,e)},ECPair.prototype.getAddress=function(){return baddress.toBase58Check(bcrypto.hash160(this.getPublicKeyBuffer()),this.getNetwork().pubKeyHash)},ECPair.prototype.getNetwork=function(){return this.network},ECPair.prototype.getPublicKeyBuffer=function(){return this.Q.getEncoded(this.compressed)},ECPair.prototype.sign=function(e){if(!this.d)throw new Error("Missing private key");return ecdsa.sign(e,this.d)},ECPair.prototype.toWIF=function(){if(!this.d)throw new Error("Missing private key");return wif.encode(this.network.wif,this.d.toBuffer(32),this.compressed)},ECPair.prototype.verify=function(e,r){return ecdsa.verify(e,r,this.Q)},module.exports=ECPair;

},{"./address":11,"./crypto":14,"./ecdsa":15,"./networks":20,"./types":47,"bigi":6,"ecurve":60,"randombytes":71,"typeforce":96,"wif":103}],17:[function(require,module,exports){
(function (Buffer){
function ECSignature(e,r){typeforce(types.tuple(types.BigInt,types.BigInt),arguments),this.r=e,this.s=r}var bip66=require("bip66"),typeforce=require("typeforce"),types=require("./types"),BigInteger=require("bigi");ECSignature.parseCompact=function(e){if(65!==e.length)throw new Error("Invalid signature length");var r=e.readUInt8(0)-27;if(r!==(7&r))throw new Error("Invalid signature parameter");return{compressed:!!(4&r),i:3&r,signature:new ECSignature(BigInteger.fromBuffer(e.slice(1,33)),BigInteger.fromBuffer(e.slice(33)))}},ECSignature.fromDER=function(e){var r=bip66.decode(e);return new ECSignature(BigInteger.fromDERInteger(r.r),BigInteger.fromDERInteger(r.s))},ECSignature.parseScriptSignature=function(e){var r=e.readUInt8(e.length-1),t=r&-129;if(t<=0||t>=4)throw new Error("Invalid hashType "+r);return{signature:ECSignature.fromDER(e.slice(0,-1)),hashType:r}},ECSignature.prototype.toCompact=function(e,r){r&&(e+=4),e+=27;var t=new Buffer(65);return t.writeUInt8(e,0),this.r.toBuffer(32).copy(t,1),this.s.toBuffer(32).copy(t,33),t},ECSignature.prototype.toDER=function(){var e=new Buffer(this.r.toDERInteger()),r=new Buffer(this.s.toDERInteger());return bip66.encode(e,r)},ECSignature.prototype.toScriptSignature=function(e){var r=e&-129;if(r<=0||r>=4)throw new Error("Invalid hashType "+e);var t=new Buffer(1);return t.writeUInt8(e,0),Buffer.concat([this.toDER(),t])},module.exports=ECSignature;

}).call(this,require("buffer").Buffer)

},{"./types":47,"bigi":6,"bip66":8,"buffer":51,"typeforce":96}],18:[function(require,module,exports){
(function (Buffer){
function HDNode(e,r){if(typeforce(types.tuple("ECPair",types.Buffer256bit),arguments),!e.compressed)throw new TypeError("BIP32 only allows compressed keyPairs");this.keyPair=e,this.chainCode=r,this.depth=0,this.index=0,this.parentFingerprint=0}var base58check=require("bs58check"),bcrypto=require("./crypto"),createHmac=require("create-hmac"),typeforce=require("typeforce"),types=require("./types"),NETWORKS=require("./networks"),BigInteger=require("bigi"),ECPair=require("./ecpair"),ecurve=require("ecurve"),curve=ecurve.getCurveByName("secp256k1");HDNode.HIGHEST_BIT=2147483648,HDNode.LENGTH=78,HDNode.MASTER_SECRET=new Buffer("Bitcoin seed"),HDNode.fromSeedBuffer=function(e,r){if(typeforce(types.tuple(types.Buffer,types.maybe(types.Network)),arguments),e.length<16)throw new TypeError("Seed should be at least 128 bits");if(e.length>64)throw new TypeError("Seed should be at most 512 bits");var t=createHmac("sha512",HDNode.MASTER_SECRET).update(e).digest(),i=t.slice(0,32),n=t.slice(32);return new HDNode(new ECPair(BigInteger.fromBuffer(i),null,{network:r}),n)},HDNode.fromSeedHex=function(e,r){return HDNode.fromSeedBuffer(new Buffer(e,"hex"),r)},HDNode.fromBase58=function(e,r,t){var i=base58check.decode(e);if(78!==i.length)throw new Error("Invalid buffer length");var n,o=i.readUInt32BE(0);if(Array.isArray(r)){if(!(n=r.filter(function(e){return o===e.bip32.private||o===e.bip32.public}).pop()))throw new Error("Unknown network version")}else n=r||NETWORKS.bitcoin;if(o!==n.bip32.private&&o!==n.bip32.public)throw new Error("Invalid network version");var d=i[4],s=i.readUInt32BE(5);if(0===d&&0!==s)throw new Error("Invalid parent fingerprint");var a=i.readUInt32BE(9);if(0===d&&0!==a)throw new Error("Invalid index");var p,u=i.slice(13,45);if(o===n.bip32.private){if(0!==i.readUInt8(45))throw new Error("Invalid private key");p=new ECPair(BigInteger.fromBuffer(i.slice(46,78)),null,{network:n})}else{var f=ecurve.Point.decodeFrom(curve,i.slice(45,78));t||curve.validate(f),p=new ECPair(null,f,{network:n})}var c=new HDNode(p,u);return c.depth=d,c.index=a,c.parentFingerprint=s,c},HDNode.prototype.getAddress=function(){return this.keyPair.getAddress()},HDNode.prototype.getIdentifier=function(){return bcrypto.hash160(this.keyPair.getPublicKeyBuffer())},HDNode.prototype.getFingerprint=function(){return this.getIdentifier().slice(0,4)},HDNode.prototype.getNetwork=function(){return this.keyPair.getNetwork()},HDNode.prototype.getPublicKeyBuffer=function(){return this.keyPair.getPublicKeyBuffer()},HDNode.prototype.neutered=function(){var e=new ECPair(null,this.keyPair.Q,{network:this.keyPair.network}),r=new HDNode(e,this.chainCode);return r.depth=this.depth,r.index=this.index,r.parentFingerprint=this.parentFingerprint,r},HDNode.prototype.sign=function(e){return this.keyPair.sign(e)},HDNode.prototype.verify=function(e,r){return this.keyPair.verify(e,r)},HDNode.prototype.toBase58=function(e){if(void 0!==e)throw new TypeError("Unsupported argument in 2.0.0");var r=this.keyPair.network,t=this.isNeutered()?r.bip32.public:r.bip32.private,i=new Buffer(78);return i.writeUInt32BE(t,0),i.writeUInt8(this.depth,4),i.writeUInt32BE(this.parentFingerprint,5),i.writeUInt32BE(this.index,9),this.chainCode.copy(i,13),this.isNeutered()?this.keyPair.getPublicKeyBuffer().copy(i,45):(i.writeUInt8(0,45),this.keyPair.d.toBuffer(32).copy(i,46)),base58check.encode(i)},HDNode.prototype.derive=function(e){typeforce(types.UInt32,e);var r=e>=HDNode.HIGHEST_BIT,t=new Buffer(37);if(r){if(this.isNeutered())throw new TypeError("Could not derive hardened child key");t[0]=0,this.keyPair.d.toBuffer(32).copy(t,1),t.writeUInt32BE(e,33)}else this.keyPair.getPublicKeyBuffer().copy(t,0),t.writeUInt32BE(e,33);var i=createHmac("sha512",this.chainCode).update(t).digest(),n=i.slice(0,32),o=i.slice(32),d=BigInteger.fromBuffer(n);if(d.compareTo(curve.n)>=0)return this.derive(e+1);var s;if(this.isNeutered()){var a=curve.G.multiply(d).add(this.keyPair.Q);if(curve.isInfinity(a))return this.derive(e+1);s=new ECPair(null,a,{network:this.keyPair.network})}else{var p=d.add(this.keyPair.d).mod(curve.n);if(0===p.signum())return this.derive(e+1);s=new ECPair(p,null,{network:this.keyPair.network})}var u=new HDNode(s,o);return u.depth=this.depth+1,u.index=e,u.parentFingerprint=this.getFingerprint().readUInt32BE(0),u},HDNode.prototype.deriveHardened=function(e){return typeforce(types.UInt31,e),this.derive(e+HDNode.HIGHEST_BIT)},HDNode.prototype.isNeutered=function(){return!this.keyPair.d},HDNode.prototype.derivePath=function(e){typeforce(types.BIP32Path,e);var r=e.split("/");if("m"===r[0]){if(this.parentFingerprint)throw new Error("Not a master node");r=r.slice(1)}return r.reduce(function(e,r){var t;return"'"===r.slice(-1)?(t=parseInt(r.slice(0,-1),10),e.deriveHardened(t)):(t=parseInt(r,10),e.derive(t))},this)},module.exports=HDNode;

}).call(this,require("buffer").Buffer)

},{"./crypto":14,"./ecpair":16,"./networks":20,"./types":47,"bigi":6,"bs58check":50,"buffer":51,"create-hmac":57,"ecurve":60,"typeforce":96}],19:[function(require,module,exports){
module.exports={Block:require("./block"),ECPair:require("./ecpair"),ECSignature:require("./ecsignature"),HDNode:require("./hdnode"),Transaction:require("./transaction"),TransactionBuilder:require("./transaction_builder"),address:require("./address"),bufferutils:require("./bufferutils"),crypto:require("./crypto"),networks:require("./networks"),opcodes:require("bitcoin-ops"),script:require("./script")};

},{"./address":11,"./block":12,"./bufferutils":13,"./crypto":14,"./ecpair":16,"./ecsignature":17,"./hdnode":18,"./networks":20,"./script":21,"./transaction":45,"./transaction_builder":46,"bitcoin-ops":9}],20:[function(require,module,exports){
module.exports={bitcoin:{messagePrefix:"Bitcoin Signed Message:\n",bip32:{public:76067358,private:76066276},pubKeyHash:0,scriptHash:5,wif:128},testnet:{messagePrefix:"Bitcoin Signed Message:\n",bip32:{public:70617039,private:70615956},pubKeyHash:111,scriptHash:196,wif:239},litecoin:{messagePrefix:"Litecoin Signed Message:\n",bip32:{public:27108450,private:27106558},pubKeyHash:48,scriptHash:5,wif:176}};

},{}],21:[function(require,module,exports){
(function (Buffer){
function isOPInt(e){return types.Number(e)&&(e===OPS.OP_0||e>=OPS.OP_1&&e<=OPS.OP_16||e===OPS.OP_1NEGATE)}function isPushOnlyChunk(e){return types.Buffer(e)||isOPInt(e)}function isPushOnly(e){return types.Array(e)&&e.every(isPushOnlyChunk)}function compile(e){if(Buffer.isBuffer(e))return e;typeforce(types.Array,e);var r=e.reduce(function(e,r){return Buffer.isBuffer(r)?1===r.length&&(129===r[0]||r[0]>=1&&r[0]<=16)?e+1:e+pushdata.encodingLength(r.length)+r.length:e+1},0),n=new Buffer(r),t=0;if(e.forEach(function(e){if(Buffer.isBuffer(e)){if(1===e.length&&e[0]>=1&&e[0]<=16){var r=OP_INT_BASE+e[0];return n.writeUInt8(r,t),void(t+=1)}if(1===e.length&&129===e[0])return n.writeUInt8(OPS.OP_1NEGATE,t),void(t+=1);t+=pushdata.encode(n,e.length,t),e.copy(n,t),t+=e.length}else n.writeUInt8(e,t),t+=1}),t!==n.length)throw new Error("Could not decode chunks");return n}function decompile(e){if(types.Array(e))return e;typeforce(types.Buffer,e);for(var r=[],n=0;n<e.length;){var t=e[n];if(t>OPS.OP_0&&t<=OPS.OP_PUSHDATA4){var i=pushdata.decode(e,n);if(null===i)return[];if((n+=i.size)+i.number>e.length)return[];var u=e.slice(n,n+i.number);n+=i.number,r.push(u)}else r.push(t),n+=1}return r}function toASM(e){return Buffer.isBuffer(e)&&(e=decompile(e)),e.map(function(e){return Buffer.isBuffer(e)?e.toString("hex"):REVERSE_OPS[e]}).join(" ")}function fromASM(e){return typeforce(types.String,e),compile(e.split(" ").map(function(e){return void 0!==OPS[e]?OPS[e]:(typeforce(types.Hex,e),new Buffer(e,"hex"))}))}function toStack(e){return e=decompile(e),typeforce(isPushOnly,e),e.map(function(e){return Buffer.isBuffer(e)?e:e===OPS.OP_0?new Buffer(0):scriptNumber.encode(e-OP_INT_BASE)})}function isCanonicalPubKey(e){if(!Buffer.isBuffer(e))return!1;if(e.length<33)return!1;switch(e[0]){case 2:case 3:return 33===e.length;case 4:return 65===e.length}return!1}function isDefinedHashType(e){var r=e&-129;return r>0&&r<4}function isCanonicalSignature(e){return!!Buffer.isBuffer(e)&&(!!isDefinedHashType(e[e.length-1])&&bip66.check(e.slice(0,-1)))}var bip66=require("bip66"),pushdata=require("pushdata-bitcoin"),typeforce=require("typeforce"),types=require("./types"),scriptNumber=require("./script_number"),OPS=require("bitcoin-ops"),REVERSE_OPS=require("bitcoin-ops/map"),OP_INT_BASE=OPS.OP_RESERVED;module.exports={compile:compile,decompile:decompile,fromASM:fromASM,toASM:toASM,toStack:toStack,number:require("./script_number"),isCanonicalPubKey:isCanonicalPubKey,isCanonicalSignature:isCanonicalSignature,isPushOnly:isPushOnly,isDefinedHashType:isDefinedHashType};var templates=require("./templates");for(var key in templates)module.exports[key]=templates[key];

}).call(this,require("buffer").Buffer)

},{"./script_number":22,"./templates":23,"./types":47,"bip66":8,"bitcoin-ops":9,"bitcoin-ops/map":10,"buffer":51,"pushdata-bitcoin":70,"typeforce":96}],22:[function(require,module,exports){
(function (Buffer){
function decode(r,e,n){e=e||4,n=void 0===n||n;var t=r.length;if(0===t)return 0;if(t>e)throw new TypeError("Script number overflow");if(n&&0==(127&r[t-1])&&(t<=1||0==(128&r[t-2])))throw new Error("Non-minimally encoded script number");if(5===t){var o=r.readUInt32LE(0),i=r.readUInt8(4);return 128&i?-(4294967296*(i&-129)+o):4294967296*i+o}for(var d=0,c=0;c<t;++c)d|=r[c]<<8*c;return 128&r[t-1]?-(d&~(128<<8*(t-1))):d}function scriptNumSize(r){return r>2147483647?5:r>8388607?4:r>32767?3:r>127?2:r>0?1:0}function encode(r){for(var e=Math.abs(r),n=scriptNumSize(e),t=new Buffer(n),o=r<0,i=0;i<n;++i)t.writeUInt8(255&e,i),e>>=8;return 128&t[n-1]?t.writeUInt8(o?128:0,n-1):o&&(t[n-1]|=128),t}module.exports={decode:decode,encode:encode};

}).call(this,require("buffer").Buffer)

},{"buffer":51}],23:[function(require,module,exports){
function classifyOutput(s){if(witnessPubKeyHash.output.check(s))return types.P2WPKH;if(witnessScriptHash.output.check(s))return types.P2WSH;if(pubKeyHash.output.check(s))return types.P2PKH;if(scriptHash.output.check(s))return types.P2SH;var t=decompile(s);return multisig.output.check(t)?types.MULTISIG:pubKey.output.check(t)?types.P2PK:witnessCommitment.output.check(t)?types.WITNESS_COMMITMENT:nullData.output.check(t)?types.NULLDATA:types.NONSTANDARD}function classifyInput(s,t){var e=decompile(s);return pubKeyHash.input.check(e)?types.P2PKH:scriptHash.input.check(e,t)?types.P2SH:multisig.input.check(e,t)?types.MULTISIG:pubKey.input.check(e)?types.P2PK:types.NONSTANDARD}function classifyWitness(s,t){var e=decompile(s);return witnessPubKeyHash.input.check(e)?types.P2WPKH:witnessScriptHash.input.check(e)?types.P2WSH:types.NONSTANDARD}var decompile=require("../script").decompile,multisig=require("./multisig"),nullData=require("./nulldata"),pubKey=require("./pubkey"),pubKeyHash=require("./pubkeyhash"),scriptHash=require("./scripthash"),witnessPubKeyHash=require("./witnesspubkeyhash"),witnessScriptHash=require("./witnessscripthash"),witnessCommitment=require("./witnesscommitment"),types={MULTISIG:"multisig",NONSTANDARD:"nonstandard",NULLDATA:"nulldata",P2PK:"pubkey",P2PKH:"pubkeyhash",P2SH:"scripthash",P2WPKH:"witnesspubkeyhash",P2WSH:"witnessscripthash",WITNESS_COMMITMENT:"witnesscommitment"};module.exports={classifyInput:classifyInput,classifyOutput:classifyOutput,classifyWitness:classifyWitness,multisig:multisig,nullData:nullData,pubKey:pubKey,pubKeyHash:pubKeyHash,scriptHash:scriptHash,witnessPubKeyHash:witnessPubKeyHash,witnessScriptHash:witnessScriptHash,witnessCommitment:witnessCommitment,types:types};

},{"../script":21,"./multisig":24,"./nulldata":27,"./pubkey":28,"./pubkeyhash":31,"./scripthash":34,"./witnesscommitment":37,"./witnesspubkeyhash":39,"./witnessscripthash":42}],24:[function(require,module,exports){
module.exports={input:require("./input"),output:require("./output")};

},{"./input":25,"./output":26}],25:[function(require,module,exports){
(function (Buffer){
function partialSignature(e){return e===OPS.OP_0||bscript.isCanonicalSignature(e)}function check(e,c){var t=bscript.decompile(e);return!(t.length<2)&&(t[0]===OPS.OP_0&&(c?t.slice(1).every(partialSignature):t.slice(1).every(bscript.isCanonicalSignature)))}function encodeStack(e,c){if(typeforce([partialSignature],e),c){var t=bscript.multisig.output.decode(c);if(e.length<t.m)throw new TypeError("Not enough signatures provided");if(e.length>t.pubKeys.length)throw new TypeError("Too many signatures provided")}return[].concat(new Buffer(0),e)}function encode(e,c){return bscript.compile(encodeStack(e,c))}function decodeStack(e,c){return typeforce(check,e,c),e.slice(1)}function decode(e,c){return decodeStack(bscript.decompile(e),c)}var bscript=require("../../script"),typeforce=require("typeforce"),OPS=require("bitcoin-ops");check.toJSON=function(){return"multisig input"},module.exports={check:check,decode:decode,decodeStack:decodeStack,encode:encode,encodeStack:encodeStack};

}).call(this,require("buffer").Buffer)

},{"../../script":21,"bitcoin-ops":9,"buffer":51,"typeforce":96}],26:[function(require,module,exports){
function check(e,r){var t=bscript.decompile(e);if(t.length<4)return!1;if(t[t.length-1]!==OPS.OP_CHECKMULTISIG)return!1;if(!types.Number(t[0]))return!1;if(!types.Number(t[t.length-2]))return!1;var c=t[0]-OP_INT_BASE,i=t[t.length-2]-OP_INT_BASE;return!(c<=0)&&(!(i>16)&&(!(c>i)&&(i===t.length-3&&(!!r||t.slice(1,-2).every(bscript.isCanonicalPubKey)))))}function encode(e,r){typeforce({m:types.Number,pubKeys:[bscript.isCanonicalPubKey]},{m:e,pubKeys:r});var t=r.length;if(t<e)throw new TypeError("Not enough pubKeys provided");return bscript.compile([].concat(OP_INT_BASE+e,r,OP_INT_BASE+t,OPS.OP_CHECKMULTISIG))}function decode(e,r){var t=bscript.decompile(e);return typeforce(check,t,r),{m:t[0]-OP_INT_BASE,pubKeys:t.slice(1,-2)}}var bscript=require("../../script"),types=require("../../types"),typeforce=require("typeforce"),OPS=require("bitcoin-ops"),OP_INT_BASE=OPS.OP_RESERVED;check.toJSON=function(){return"multi-sig output"},module.exports={check:check,decode:decode,encode:encode};

},{"../../script":21,"../../types":47,"bitcoin-ops":9,"typeforce":96}],27:[function(require,module,exports){
function check(e){var c=bscript.compile(e);return c.length>1&&c[0]===OPS.OP_RETURN}function encode(e){return typeforce(types.Buffer,e),bscript.compile([OPS.OP_RETURN,e])}function decode(e){return typeforce(check,e),e.slice(2)}var bscript=require("../script"),types=require("../types"),typeforce=require("typeforce"),OPS=require("bitcoin-ops");check.toJSON=function(){return"null data output"},module.exports={output:{check:check,decode:decode,encode:encode}};

},{"../script":21,"../types":47,"bitcoin-ops":9,"typeforce":96}],28:[function(require,module,exports){
module.exports={input:require("./input"),output:require("./output")};

},{"./input":29,"./output":30}],29:[function(require,module,exports){
function check(e){var c=bscript.decompile(e);return 1===c.length&&bscript.isCanonicalSignature(c[0])}function encodeStack(e){return typeforce(types.Buffer,e),[e]}function encode(e){return bscript.compile(encodeStack(e))}function decodeStack(e){return typeforce(check,e),e[0]}function decode(e){return decodeStack(bscript.decompile(e))}var bscript=require("../../script"),types=require("../../types"),typeforce=require("typeforce");check.toJSON=function(){return"pubKey input"},module.exports={check:check,decode:decode,decodeStack:decodeStack,encode:encode,encodeStack:encodeStack};

},{"../../script":21,"../../types":47,"typeforce":96}],30:[function(require,module,exports){
function check(e){var c=bscript.decompile(e);return 2===c.length&&bscript.isCanonicalPubKey(c[0])&&c[1]===OPS.OP_CHECKSIG}function encode(e){return typeforce(bscript.isCanonicalPubKey,e),bscript.compile([e,OPS.OP_CHECKSIG])}function decode(e){var c=bscript.decompile(e);return typeforce(check,c),c[0]}var bscript=require("../../script"),typeforce=require("typeforce"),OPS=require("bitcoin-ops");check.toJSON=function(){return"pubKey output"},module.exports={check:check,decode:decode,encode:encode};

},{"../../script":21,"bitcoin-ops":9,"typeforce":96}],31:[function(require,module,exports){
module.exports={input:require("./input"),output:require("./output")};

},{"./input":32,"./output":33}],32:[function(require,module,exports){
function check(e){var c=bscript.decompile(e);return 2===c.length&&bscript.isCanonicalSignature(c[0])&&bscript.isCanonicalPubKey(c[1])}function encodeStack(e,c){return typeforce({signature:types.Buffer,pubKey:types.Buffer},{signature:e,pubKey:c}),[e,c]}function encode(e,c){return bscript.compile(encodeStack(e,c))}function decodeStack(e){return typeforce(check,e),{signature:e[0],pubKey:e[1]}}function decode(e){return decodeStack(bscript.decompile(e))}var bscript=require("../../script"),types=require("../../types"),typeforce=require("typeforce");check.toJSON=function(){return"pubKeyHash input"},module.exports={check:check,decode:decode,decodeStack:decodeStack,encode:encode,encodeStack:encodeStack};

},{"../../script":21,"../../types":47,"typeforce":96}],33:[function(require,module,exports){
function check(e){var c=bscript.compile(e);return 25===c.length&&c[0]===OPS.OP_DUP&&c[1]===OPS.OP_HASH160&&20===c[2]&&c[23]===OPS.OP_EQUALVERIFY&&c[24]===OPS.OP_CHECKSIG}function encode(e){return typeforce(types.Hash160bit,e),bscript.compile([OPS.OP_DUP,OPS.OP_HASH160,e,OPS.OP_EQUALVERIFY,OPS.OP_CHECKSIG])}function decode(e){return typeforce(check,e),e.slice(3,23)}var bscript=require("../../script"),types=require("../../types"),typeforce=require("typeforce"),OPS=require("bitcoin-ops");check.toJSON=function(){return"pubKeyHash output"},module.exports={check:check,decode:decode,encode:encode};

},{"../../script":21,"../../types":47,"bitcoin-ops":9,"typeforce":96}],34:[function(require,module,exports){
module.exports={input:require("./input"),output:require("./output")};

},{"./input":35,"./output":36}],35:[function(require,module,exports){
(function (Buffer){
function check(e,c){var t=bscript.decompile(e);if(t.length<1)return!1;var r=t[t.length-1];if(!Buffer.isBuffer(r))return!1;var i=bscript.decompile(bscript.compile(t.slice(0,-1))),p=bscript.decompile(r);if(0===p.length)return!1;if(!bscript.isPushOnly(i))return!1;var n=bscript.classifyInput(i,c),o=bscript.classifyOutput(p);return 1===t.length?o===bscript.types.P2WSH||o===bscript.types.P2WPKH:n===o}function encodeStack(e,c){var t=bscript.compile(c);return[].concat(e,t)}function encode(e,c){var t=bscript.decompile(e);return bscript.compile(encodeStack(t,c))}function decodeStack(e){return typeforce(check,e),{redeemScriptStack:e.slice(0,-1),redeemScript:e[e.length-1]}}function decode(e){var c=bscript.decompile(e),t=decodeStack(c);return t.redeemScriptSig=bscript.compile(t.redeemScriptStack),delete t.redeemScriptStack,t}var bscript=require("../../script"),typeforce=require("typeforce");check.toJSON=function(){return"scriptHash input"},module.exports={check:check,decode:decode,decodeStack:decodeStack,encode:encode,encodeStack:encodeStack};

}).call(this,{"isBuffer":require("../../../../is-buffer/index.js")})

},{"../../../../is-buffer/index.js":66,"../../script":21,"typeforce":96}],36:[function(require,module,exports){
function check(e){var c=bscript.compile(e);return 23===c.length&&c[0]===OPS.OP_HASH160&&20===c[1]&&c[22]===OPS.OP_EQUAL}function encode(e){return typeforce(types.Hash160bit,e),bscript.compile([OPS.OP_HASH160,e,OPS.OP_EQUAL])}function decode(e){return typeforce(check,e),e.slice(2,22)}var bscript=require("../../script"),types=require("../../types"),typeforce=require("typeforce"),OPS=require("bitcoin-ops");check.toJSON=function(){return"scriptHash output"},module.exports={check:check,decode:decode,encode:encode};

},{"../../script":21,"../../types":47,"bitcoin-ops":9,"typeforce":96}],37:[function(require,module,exports){
module.exports={output:require("./output")};

},{"./output":38}],38:[function(require,module,exports){
(function (Buffer){
function check(e){var c=bscript.compile(e);return c.length>37&&c[0]===OPS.OP_RETURN&&36===c[1]&&c.slice(2,6).equals(HEADER)}function encode(e){return typeforce(types.Hash256bit,e),bscript.compile([OPS.OP_RETURN,Buffer.concat([HEADER,e])])}function decode(e){return typeforce(check,e),bscript.decompile(e)[1].slice(4,36)}var bscript=require("../../script"),types=require("../../types"),typeforce=require("typeforce"),OPS=require("bitcoin-ops"),HEADER=new Buffer("aa21a9ed","hex");check.toJSON=function(){return"Witness commitment output"},module.exports={check:check,decode:decode,encode:encode};

}).call(this,require("buffer").Buffer)

},{"../../script":21,"../../types":47,"bitcoin-ops":9,"buffer":51,"typeforce":96}],39:[function(require,module,exports){
module.exports={input:require("./input"),output:require("./output")};

},{"./input":40,"./output":41}],40:[function(require,module,exports){
var pkh=require("../pubkeyhash/input");module.exports={check:pkh.check,decodeStack:pkh.decodeStack,encodeStack:pkh.encodeStack};

},{"../pubkeyhash/input":32}],41:[function(require,module,exports){
function check(e){var c=bscript.compile(e);return 22===c.length&&c[0]===OPS.OP_0&&20===c[1]}function encode(e){return typeforce(types.Hash160bit,e),bscript.compile([OPS.OP_0,e])}function decode(e){return typeforce(check,e),e.slice(2)}var bscript=require("../../script"),types=require("../../types"),typeforce=require("typeforce"),OPS=require("bitcoin-ops");check.toJSON=function(){return"Witness pubKeyHash output"},module.exports={check:check,decode:decode,encode:encode};

},{"../../script":21,"../../types":47,"bitcoin-ops":9,"typeforce":96}],42:[function(require,module,exports){
module.exports={input:require("./input"),output:require("./output")};

},{"./input":43,"./output":44}],43:[function(require,module,exports){
var p2sh=require("../scripthash/input");module.exports={check:p2sh.check,decodeStack:p2sh.decodeStack,encodeStack:p2sh.encodeStack};

},{"../scripthash/input":35}],44:[function(require,module,exports){
function check(e){var c=bscript.compile(e);return 34===c.length&&c[0]===OPS.OP_0&&32===c[1]}function encode(e){return typeforce(types.Hash256bit,e),bscript.compile([OPS.OP_0,e])}function decode(e){return typeforce(check,e),e.slice(2)}var bscript=require("../../script"),types=require("../../types"),typeforce=require("typeforce"),OPS=require("bitcoin-ops");check.toJSON=function(){return"Witness scriptHash output"},module.exports={check:check,decode:decode,encode:encode};

},{"../../script":21,"../../types":47,"bitcoin-ops":9,"typeforce":96}],45:[function(require,module,exports){
(function (Buffer){
function varSliceSize(t){var n=t.length;return bufferutils.varIntSize(n)+n}function vectorSize(t){var n=t.length;return bufferutils.varIntSize(n)+t.reduce(function(t,n){return t+varSliceSize(n)},0)}function Transaction(){this.version=1,this.locktime=0,this.ins=[],this.outs=[],this.joinsplits=[]}var bcrypto=require("./crypto"),bscript=require("./script"),bufferutils=require("./bufferutils"),opcodes=require("bitcoin-ops"),typeforce=require("typeforce"),types=require("./types");Transaction.DEFAULT_SEQUENCE=4294967295,Transaction.SIGHASH_ALL=1,Transaction.SIGHASH_NONE=2,Transaction.SIGHASH_SINGLE=3,Transaction.SIGHASH_ANYONECANPAY=128,Transaction.ADVANCED_TRANSACTION_MARKER=0,Transaction.ADVANCED_TRANSACTION_FLAG=1;var EMPTY_SCRIPT=new Buffer(0),EMPTY_WITNESS=[],ZERO=new Buffer("0000000000000000000000000000000000000000000000000000000000000000","hex"),ONE=new Buffer("0000000000000000000000000000000000000000000000000000000000000001","hex"),VALUE_UINT64_MAX=new Buffer("ffffffffffffffff","hex"),BLANK_OUTPUT={script:EMPTY_SCRIPT,valueBuffer:VALUE_UINT64_MAX};Transaction.ZCASH_NUM_JS_INPUTS=2,Transaction.ZCASH_NUM_JS_OUTPUTS=2,Transaction.ZCASH_NOTECIPHERTEXT_SIZE=601,Transaction.ZCASH_G1_PREFIX_MASK=2,Transaction.ZCASH_G2_PREFIX_MASK=10,Transaction.fromBuffer=function(t,n,e){function r(n){return f+=n,t.slice(f-n,f)}function i(){var n=t.readUInt8(f);return f+=1,n}function s(){var n=t.readUInt32LE(f);return f+=4,n}function o(){var n=bufferutils.readUInt64LE(t,f);return f+=8,n}function a(){var n=bufferutils.readVarInt(t,f);return f+=n.size,n.number}function u(){return r(a())}function c(){var t=1&i();return{x:r(32),yLsb:t}}var f=0,h=new Transaction;h.version=function(){var n=t.readInt32LE(f);return f+=4,n}();var p=t.readUInt8(f),T=t.readUInt8(f+1),S=!1;n||p===Transaction.ADVANCED_TRANSACTION_MARKER&&T===Transaction.ADVANCED_TRANSACTION_FLAG&&(f+=2,S=!0);for(var l=a(),_=0;_<l;++_)h.ins.push({hash:r(32),index:s(),script:u(),sequence:s(),witness:EMPTY_WITNESS});var E=a();for(_=0;_<E;++_)h.outs.push({value:o(),script:u()});if(S){for(_=0;_<l;++_)h.ins[_].witness=function(){for(var t=a(),n=[],e=0;e<t;e++)n.push(u());return n}();if(!h.hasWitnesses())throw new Error("Transaction has superfluous witness data")}if(h.locktime=s(),h.version>=2&&n){var A=a();for(_=0;_<A;++_){for(var y=o(),I=o(),v=r(32),N=[],g=0;g<Transaction.ZCASH_NUM_JS_INPUTS;g++)N.push(r(32));var H=[];for(g=0;g<Transaction.ZCASH_NUM_JS_OUTPUTS;g++)H.push(r(32));var b=r(32),C=r(32),m=[];for(g=0;g<Transaction.ZCASH_NUM_JS_INPUTS;g++)m.push(r(32));var U={gA:c(),gAPrime:c(),gB:function(){var t=1&i();return{x:r(64),yLsb:t}}(),gBPrime:c(),gC:c(),gCPrime:c(),gK:c(),gH:c()},d=[];for(g=0;g<Transaction.ZCASH_NUM_JS_OUTPUTS;g++)d.push(r(Transaction.ZCASH_NOTECIPHERTEXT_SIZE));h.joinsplits.push({vpubOld:y,vpubNew:I,anchor:v,nullifiers:N,commitments:H,ephemeralKey:b,randomSeed:C,macs:m,zproof:U,ciphertexts:d})}A>0&&(h.joinsplitPubkey=r(32),h.joinsplitSig=r(64))}if(h.zcash=!!n,e)return h;if(f!==t.length)throw new Error("Transaction has unexpected data");return h},Transaction.fromHex=function(t,n){return Transaction.fromBuffer(new Buffer(t,"hex"),n)},Transaction.isCoinbaseHash=function(t){typeforce(types.Hash256bit,t);for(var n=0;n<32;++n)if(0!==t[n])return!1;return!0},Transaction.prototype.isCoinbase=function(){return 1===this.ins.length&&Transaction.isCoinbaseHash(this.ins[0].hash)},Transaction.prototype.addInput=function(t,n,e,r){return typeforce(types.tuple(types.Hash256bit,types.UInt32,types.maybe(types.UInt32),types.maybe(types.Buffer)),arguments),types.Null(e)&&(e=Transaction.DEFAULT_SEQUENCE),this.ins.push({hash:t,index:n,script:r||EMPTY_SCRIPT,sequence:e,witness:EMPTY_WITNESS})-1},Transaction.prototype.addOutput=function(t,n){return typeforce(types.tuple(types.Buffer,types.Satoshi),arguments),this.outs.push({script:t,value:n})-1},Transaction.prototype.hasWitnesses=function(){return this.ins.some(function(t){return 0!==t.witness.length})},Transaction.prototype.byteLength=function(){return this.__byteLength(!0)},Transaction.prototype.joinsplitByteLength=function(){if(this.version<2)return 0;if(!this.zcash)return 0;var t=this.joinsplits.length>0?96:0;return bufferutils.varIntSize(this.joinsplits.length)+this.joinsplits.reduce(function(t,n){return t+8+8+32+32*n.nullifiers.length+32*n.commitments.length+32+32+32*n.macs.length+65+231+n.ciphertexts.length*Transaction.ZCASH_NOTECIPHERTEXT_SIZE},0)+t},Transaction.prototype.__byteLength=function(t){var n=t&&this.hasWitnesses();return(n?10:8)+bufferutils.varIntSize(this.ins.length)+bufferutils.varIntSize(this.outs.length)+this.ins.reduce(function(t,n){return t+40+varSliceSize(n.script)},0)+this.outs.reduce(function(t,n){return t+8+varSliceSize(n.script)},0)+(n?this.ins.reduce(function(t,n){return t+vectorSize(n.witness)},0):0)+this.joinsplitByteLength()},Transaction.prototype.clone=function(){var t=new Transaction;return t.version=this.version,t.locktime=this.locktime,t.zcash=this.zcash,t.ins=this.ins.map(function(t){return{hash:t.hash,index:t.index,script:t.script,sequence:t.sequence,witness:t.witness}}),t.outs=this.outs.map(function(t){return{script:t.script,value:t.value}}),t},Transaction.prototype.hashForSignature=function(t,n,e){if(typeforce(types.tuple(types.UInt32,types.Buffer,types.Number),arguments),t>=this.ins.length)return ONE;var r=bscript.compile(bscript.decompile(n).filter(function(t){return t!==opcodes.OP_CODESEPARATOR})),i=this.clone();if((31&e)===Transaction.SIGHASH_NONE)i.outs=[],i.ins.forEach(function(n,e){e!==t&&(n.sequence=0)});else if((31&e)===Transaction.SIGHASH_SINGLE){if(t>=this.outs.length)return ONE;i.outs.length=t+1;for(var s=0;s<t;s++)i.outs[s]=BLANK_OUTPUT;i.ins.forEach(function(n,e){e!==t&&(n.sequence=0)})}e&Transaction.SIGHASH_ANYONECANPAY?(i.ins=[i.ins[t]],i.ins[0].script=r):(i.ins.forEach(function(t){t.script=EMPTY_SCRIPT}),i.ins[t].script=r);var o=new Buffer(i.__byteLength(!1)+4);return o.writeInt32LE(e,o.length-4),i.__toBuffer(o,0,!1),bcrypto.hash256(o)},Transaction.prototype.hashForWitnessV0=function(t,n,e,r){function i(t){f+=t.copy(c,f)}function s(t){f=c.writeUInt32LE(t,f)}function o(t){f=bufferutils.writeUInt64LE(c,t,f)}function a(t){f+=bufferutils.writeVarInt(c,t,f)}function u(t){a(t.length),i(t)}typeforce(types.tuple(types.UInt32,types.Buffer,types.Satoshi,types.UInt32),arguments);var c,f,h=ZERO,p=ZERO,T=ZERO;if(r&Transaction.SIGHASH_ANYONECANPAY||(c=new Buffer(36*this.ins.length),f=0,this.ins.forEach(function(t){i(t.hash),s(t.index)}),p=bcrypto.hash256(c)),r&Transaction.SIGHASH_ANYONECANPAY||(31&r)===Transaction.SIGHASH_SINGLE||(31&r)===Transaction.SIGHASH_NONE||(c=new Buffer(4*this.ins.length),f=0,this.ins.forEach(function(t){s(t.sequence)}),T=bcrypto.hash256(c)),(31&r)!==Transaction.SIGHASH_SINGLE&&(31&r)!==Transaction.SIGHASH_NONE){var S=this.outs.reduce(function(t,n){return t+8+varSliceSize(n.script)},0);c=new Buffer(S),f=0,this.outs.forEach(function(t){o(t.value),u(t.script)}),h=bcrypto.hash256(c)}else if((31&r)===Transaction.SIGHASH_SINGLE&&t<this.outs.length){var l=this.outs[t];c=new Buffer(8+varSliceSize(l.script)),f=0,o(l.value),u(l.script),h=bcrypto.hash256(c)}c=new Buffer(156+varSliceSize(n)),f=0;var _=this.ins[t];return s(this.version),i(p),i(T),i(_.hash),s(_.index),u(n),o(e),s(_.sequence),i(h),s(this.locktime),s(r),bcrypto.hash256(c)},Transaction.prototype.getHash=function(){return bcrypto.hash256(this.__toBuffer(void 0,void 0,!1))},Transaction.prototype.getId=function(){return this.getHash().reverse().toString("hex")},Transaction.prototype.toBuffer=function(t,n){return this.__toBuffer(t,n,!0)},Transaction.prototype.__toBuffer=function(t,n,e){function r(n){p+=n.copy(t,p)}function i(n){p=t.writeUInt8(n,p)}function s(n){p=t.writeUInt32LE(n,p)}function o(n){p=bufferutils.writeUInt64LE(t,n,p)}function a(n){p+=bufferutils.writeVarInt(t,n,p)}function u(t){a(t.length),r(t)}function c(t){a(t.length),t.forEach(u)}function f(t){i(Transaction.ZCASH_G1_PREFIX_MASK|t.yLsb),r(t.x)}function h(t){i(Transaction.ZCASH_G2_PREFIX_MASK|t.yLsb),r(t.x)}t||(t=new Buffer(this.__byteLength(e)));var p=n||0;!function(n){p=t.writeInt32LE(n,p)}(this.version);var T=e&&this.hasWitnesses();return T&&(i(Transaction.ADVANCED_TRANSACTION_MARKER),i(Transaction.ADVANCED_TRANSACTION_FLAG)),a(this.ins.length),this.ins.forEach(function(t){r(t.hash),s(t.index),u(t.script),s(t.sequence)}),a(this.outs.length),this.outs.forEach(function(t){t.valueBuffer?r(t.valueBuffer):o(t.value),u(t.script)}),T&&this.ins.forEach(function(t){c(t.witness)}),s(this.locktime),this.version>=2&&this.zcash&&(a(this.joinsplits.length),this.joinsplits.forEach(function(t){o(t.vpubOld),o(t.vpubNew),r(t.anchor),t.nullifiers.forEach(function(t){r(t)}),t.commitments.forEach(function(t){r(t)}),r(t.ephemeralKey),r(t.randomSeed),t.macs.forEach(function(t){r(t)}),f(t.zproof.gA),f(t.zproof.gAPrime),h(t.zproof.gB),f(t.zproof.gBPrime),f(t.zproof.gC),f(t.zproof.gCPrime),f(t.zproof.gK),f(t.zproof.gH),t.ciphertexts.forEach(function(t){r(t)})}),this.joinsplits.length>0&&(r(this.joinsplitPubkey),r(this.joinsplitSig))),void 0!==n?t.slice(n,p):t},Transaction.prototype.toHex=function(){return this.toBuffer().toString("hex")},Transaction.prototype.setInputScript=function(t,n){typeforce(types.tuple(types.Number,types.Buffer),arguments),this.ins[t].script=n},Transaction.prototype.setWitness=function(t,n){typeforce(types.tuple(types.Number,[types.Buffer]),arguments),this.ins[t].witness=n},module.exports=Transaction;

}).call(this,require("buffer").Buffer)

},{"./bufferutils":13,"./crypto":14,"./script":21,"./types":47,"bitcoin-ops":9,"buffer":51,"typeforce":96}],46:[function(require,module,exports){
(function (Buffer){
function extractChunks(t,e,r){var i=[],s=[];switch(t){case scriptTypes.P2PKH:i=e.slice(1),s=e.slice(0,1);break;case scriptTypes.P2PK:i[0]=r?bscript.pubKey.output.decode(r):void 0,s=e.slice(0,1);break;case scriptTypes.MULTISIG:if(r){i=bscript.multisig.output.decode(r).pubKeys}s=e.slice(1).map(function(t){return 0===t.length?void 0:t})}return{pubKeys:i,signatures:s}}function expandInput(t,e){var r,i,s,n,p,u,c,o,a,y,h=!1,d=!1,f=bscript.decompile(t);bscript.classifyInput(f,!0)===scriptTypes.P2SH&&(d=!0,p=f[f.length-1],o=bscript.classifyOutput(p),r=bscript.scriptHash.output.encode(bcrypto.hash160(p)),i=scriptTypes.P2SH,n=p);var S=bscript.classifyWitness(e);if(S===scriptTypes.P2WSH){if(u=e[e.length-1],c=bscript.classifyOutput(u),h=!0,0===t.length){if(r=bscript.witnessScriptHash.output.encode(bcrypto.sha256(u)),i=scriptTypes.P2WSH,void 0!==p)throw new Error("Redeem script given when unnecessary")}else{if(!p)throw new Error("No redeemScript provided for P2WSH, but scriptSig non-empty");if(a=bscript.witnessScriptHash.output.encode(bcrypto.sha256(u)),!p.equals(a))throw new Error("Redeem script didn't match witnessScript")}if(SIGNABLE.indexOf(bscript.classifyOutput(u))===-1)throw new Error("unsupported witness script");n=u,s=c,y=e.slice(0,-1)}else if(S===scriptTypes.P2WPKH){var b=e[e.length-1],w=bcrypto.hash160(b);if(0===t.length){if(r=bscript.witnessPubKeyHash.output.encode(w),i=scriptTypes.P2WPKH,void 0!==p)throw new Error("Redeem script given when unnecessary")}else{if(!p)throw new Error("No redeemScript provided for P2WPKH, but scriptSig wasn't empty");if(a=bscript.witnessPubKeyHash.output.encode(w),!p.equals(a))throw new Error("Redeem script did not have the right witness program")}s=scriptTypes.P2PKH,y=e}else if(p){if(P2SH.indexOf(o)===-1)throw new Error("Bad redeemscript!");n=p,s=o,y=f.slice(0,-1)}else i=s=bscript.classifyInput(t),y=f;var l=extractChunks(s,y,n),v={pubKeys:l.pubKeys,signatures:l.signatures,prevOutScript:r,prevOutType:i,signType:s,signScript:n,witness:Boolean(!1)};return d&&(v.redeemScript=p,v.redeemScriptType=o),h&&(v.witnessScript=u,v.witnessScriptType=c),v}function fixMultisigOrder(t,e,r){if(t.redeemScriptType===scriptTypes.MULTISIG&&t.redeemScript&&t.pubKeys.length!==t.signatures.length){var i=t.signatures.concat();t.signatures=t.pubKeys.map(function(s,n){var p,u=ECPair.fromPublicKeyBuffer(s);return i.some(function(s,n){if(!s)return!1;var c=ECSignature.parseScriptSignature(s),o=e.hashForSignature(r,t.redeemScript,c.hashType);return!!u.verify(o,c.signature)&&(i[n]=void 0,p=s,!0)}),p})}}function expandOutput(t,e,r){typeforce(types.Buffer,t);var i=bscript.decompile(t);e||(e=bscript.classifyOutput(t));var s=[];switch(e){case scriptTypes.P2PKH:if(!r)break;var n=i[2],p=bcrypto.hash160(r);n.equals(p)&&(s=[r]);break;case scriptTypes.P2WPKH:if(!r)break;var u=i[1],c=bcrypto.hash160(r);u.equals(c)&&(s=[r]);break;case scriptTypes.P2PK:s=i.slice(0,1);break;case scriptTypes.MULTISIG:s=i.slice(1,-2);break;default:return{scriptType:e}}return{pubKeys:s,scriptType:e,signatures:s.map(function(){})}}function checkP2shInput(t,e){if(t.prevOutType){if(t.prevOutType!==scriptTypes.P2SH)throw new Error("PrevOutScript must be P2SH");if(!bscript.decompile(t.prevOutScript)[1].equals(e))throw new Error("Inconsistent hash160(RedeemScript)")}}function checkP2WSHInput(t,e){if(t.prevOutType){if(t.prevOutType!==scriptTypes.P2WSH)throw new Error("PrevOutScript must be P2WSH");if(!bscript.decompile(t.prevOutScript)[1].equals(e))throw new Error("Inconsistent sha25(WitnessScript)")}}function prepareInput(t,e,r,i,s){var n,p,u,c,o,a,y,h,d,f=!1,S=!1,b=!1;if(r&&s){if(o=bcrypto.hash160(r),y=bcrypto.sha256(s),checkP2shInput(t,o),!r.equals(bscript.witnessScriptHash.output.encode(y)))throw new Error("Witness script inconsistent with redeem script");if(n=expandOutput(s,void 0,e),!n.pubKeys)throw new Error('WitnessScript not supported "'+bscript.toASM(r)+'"');p=bscript.types.P2SH,u=bscript.scriptHash.output.encode(o),f=S=b=!0,c=bscript.types.P2WSH,h=a=n.scriptType,d=s}else if(r){if(o=bcrypto.hash160(r),checkP2shInput(t,o),n=expandOutput(r,void 0,e),!n.pubKeys)throw new Error('RedeemScript not supported "'+bscript.toASM(r)+'"');p=bscript.types.P2SH,u=bscript.scriptHash.output.encode(o),f=!0,h=c=n.scriptType,d=r,S=h===bscript.types.P2WPKH}else if(s){if(y=bcrypto.sha256(s),checkP2WSHInput(t,y),n=expandOutput(s,void 0,e),!n.pubKeys)throw new Error('WitnessScript not supported "'+bscript.toASM(r)+'"');p=bscript.types.P2WSH,u=bscript.witnessScriptHash.output.encode(y),S=b=!0,h=a=n.scriptType,d=s}else if(t.prevOutType){if(t.prevOutType===scriptTypes.P2SH||t.prevOutType===scriptTypes.P2WSH)throw new Error("PrevOutScript is "+t.prevOutType+", requires redeemScript");if(p=t.prevOutType,u=t.prevOutScript,n=expandOutput(t.prevOutScript,t.prevOutType,e),!n.pubKeys)return;S=t.prevOutType===scriptTypes.P2WPKH,h=p,d=u}else u=bscript.pubKeyHash.output.encode(bcrypto.hash160(e)),n=expandOutput(u,scriptTypes.P2PKH,e),p=scriptTypes.P2PKH,S=!1,h=p,d=u;if(S&&!types.Satoshi(i))throw new Error("Input was witness but not given witness value");h===scriptTypes.P2WPKH&&(d=bscript.pubKeyHash.output.encode(bscript.witnessPubKeyHash.output.decode(d))),f&&(t.redeemScript=r,t.redeemScriptType=c),b&&(t.witnessScript=s,t.witnessScriptType=a),t.pubKeys=n.pubKeys,t.signatures=n.signatures,t.signScript=d,t.signType=h,t.prevOutScript=u,t.prevOutType=p,t.witness=S}function buildStack(t,e,r,i){if(t===scriptTypes.P2PKH){if(1===e.length&&e[0]instanceof Buffer&&1===r.length)return bscript.pubKeyHash.input.encodeStack(e[0],r[0])}else if(t===scriptTypes.P2PK){if(1===e.length&&e[0]instanceof Buffer)return bscript.pubKey.input.encodeStack(e[0])}else{if(t!==scriptTypes.MULTISIG)throw new Error("Not yet supported");if(e.length>0)return e=e.map(function(t){return t||ops.OP_0}),i||(e=e.filter(function(t){return t!==ops.OP_0})),bscript.multisig.input.encodeStack(e)}if(!i)throw new Error("Not enough signatures provided");return[]}function buildInput(t,e){var r=t.prevOutType,i=[],s=[];SIGNABLE.indexOf(r)!==-1&&(i=buildStack(r,t.signatures,t.pubKeys,t.script,e));var n=!1;if(r===bscript.types.P2SH){if(P2SH.indexOf(t.redeemScriptType)===-1)throw new Error("Impossible to sign this type");n=!0,SIGNABLE.indexOf(t.redeemScriptType)!==-1&&(i=buildStack(t.redeemScriptType,t.signatures,t.pubKeys,e)),r=t.redeemScriptType}if(r===bscript.types.P2WPKH)s=buildStack(bscript.types.P2PKH,t.signatures,t.pubKeys,e);else if(r===bscript.types.P2WSH){if(SIGNABLE.indexOf(t.witnessScriptType)===-1)throw new Error;s=buildStack(t.witnessScriptType,t.signatures,t.pubKeys,e),s.push(t.witnessScript),r=t.witnessScriptType}return n&&i.push(t.redeemScript),{type:r,script:bscript.compile(i),witness:s}}function TransactionBuilder(t,e){this.prevTxMap={},this.network=t||networks.bitcoin,this.maximumFeeRate=e||1e3,this.inputs=[],this.tx=new Transaction}function canSign(t){return void 0!==t.prevOutScript&&void 0!==t.signScript&&void 0!==t.pubKeys&&void 0!==t.signatures&&t.signatures.length===t.pubKeys.length&&t.pubKeys.length>0&&void 0!==t.witness}function signatureHashType(t){return t.readUInt8(t.length-1)}var baddress=require("./address"),bcrypto=require("./crypto"),bscript=require("./script"),networks=require("./networks"),ops=require("bitcoin-ops"),typeforce=require("typeforce"),types=require("./types"),scriptTypes=bscript.types,SIGNABLE=[bscript.types.P2PKH,bscript.types.P2PK,bscript.types.MULTISIG],P2SH=SIGNABLE.concat([bscript.types.P2WPKH,bscript.types.P2WSH]),ECPair=require("./ecpair"),ECSignature=require("./ecsignature"),Transaction=require("./transaction");TransactionBuilder.prototype.setLockTime=function(t){if(typeforce(types.UInt32,t),this.inputs.some(function(t){return!!t.signatures&&t.signatures.some(function(t){return t})}))throw new Error("No, this would invalidate signatures");this.tx.locktime=t},TransactionBuilder.prototype.setVersion=function(t){typeforce(types.UInt32,t),this.tx.version=t},TransactionBuilder.fromTransaction=function(t,e){var r=new TransactionBuilder(e);return r.setVersion(t.version),r.setLockTime(t.locktime),t.outs.forEach(function(t){r.addOutput(t.script,t.value)}),t.ins.forEach(function(t){r.__addInputUnsafe(t.hash,t.index,{sequence:t.sequence,script:t.script,witness:t.witness})}),r.inputs.forEach(function(e,r){fixMultisigOrder(e,t,r)}),r},TransactionBuilder.prototype.addInput=function(t,e,r,i){if(!this.__canModifyInputs())throw new Error("No, this would invalidate signatures");var s;if("string"==typeof t)t=new Buffer(t,"hex").reverse();else if(t instanceof Transaction){var n=t.outs[e];i=n.script,s=n.value,t=t.getHash()}return this.__addInputUnsafe(t,e,{sequence:r,prevOutScript:i,value:s})},TransactionBuilder.prototype.__addInputUnsafe=function(t,e,r){if(Transaction.isCoinbaseHash(t))throw new Error("coinbase inputs not supported");var i=t.toString("hex")+":"+e;if(void 0!==this.prevTxMap[i])throw new Error("Duplicate TxOut: "+i);var s={};if(void 0!==r.script&&(s=expandInput(r.script,r.witness)),void 0!==r.value&&(s.value=r.value),!s.prevOutScript&&r.prevOutScript){var n;if(!s.pubKeys&&!s.signatures){var p=expandOutput(r.prevOutScript);p.pubKeys&&(s.pubKeys=p.pubKeys,s.signatures=p.signatures),n=p.scriptType}s.prevOutScript=r.prevOutScript,s.prevOutType=n||bscript.classifyOutput(r.prevOutScript)}var u=this.tx.addInput(t,e,r.sequence,r.scriptSig);return this.inputs[u]=s,this.prevTxMap[i]=u,u},TransactionBuilder.prototype.addOutput=function(t,e){if(!this.__canModifyOutputs())throw new Error("No, this would invalidate signatures");return"string"==typeof t&&(t=baddress.toOutputScript(t,this.network)),this.tx.addOutput(t,e)},TransactionBuilder.prototype.build=function(){return this.__build(!1)},TransactionBuilder.prototype.buildIncomplete=function(){return this.__build(!0)},TransactionBuilder.prototype.__build=function(t){if(!t){if(!this.tx.ins.length)throw new Error("Transaction has no inputs");if(!this.tx.outs.length)throw new Error("Transaction has no outputs")}var e=this.tx.clone();if(this.inputs.forEach(function(r,i){if(!(r.witnessScriptType||r.redeemScriptType||r.prevOutType||t))throw new Error("Transaction is not complete");var s=buildInput(r,t);if(!t&&SIGNABLE.indexOf(s.type)===-1&&s.type!==bscript.types.P2WPKH)throw new Error(s.type+" not supported");e.setInputScript(i,s.script),e.setWitness(i,s.witness)}),!t&&this.__overMaximumFees(e.byteLength()))throw new Error("Transaction has absurd fees");return e},TransactionBuilder.prototype.sign=function(t,e,r,i,s,n){if(e.network!==this.network)throw new Error("Inconsistent network");if(!this.inputs[t])throw new Error("No input at index: "+t);i=i||Transaction.SIGHASH_ALL;var p=this.inputs[t];if(void 0!==p.redeemScript&&r&&!p.redeemScript.equals(r))throw new Error("Inconsistent redeemScript");var u=e.getPublicKeyBuffer();if(!canSign(p)&&(prepareInput(p,u,r,s,n),!canSign(p)))throw Error(p.prevOutType+" not supported");var c;if(c=p.witness?this.tx.hashForWitnessV0(t,p.signScript,s,i):this.tx.hashForSignature(t,p.signScript,i),!p.pubKeys.some(function(t,r){if(!u.equals(t))return!1;if(p.signatures[r])throw new Error("Signature already exists");return p.signatures[r]=e.sign(c).toScriptSignature(i),!0}))throw new Error("Key pair cannot sign for this input")},TransactionBuilder.prototype.__canModifyInputs=function(){return this.inputs.every(function(t){return void 0===t.signatures||t.signatures.every(function(t){return!t||signatureHashType(t)&Transaction.SIGHASH_ANYONECANPAY})})},TransactionBuilder.prototype.__canModifyOutputs=function(){var t=this.tx.ins.length,e=this.tx.outs.length;return this.inputs.every(function(r){return void 0===r.signatures||r.signatures.every(function(r){if(!r)return!0;var i=signatureHashType(r),s=31&i;return s===Transaction.SIGHASH_NONE||(s===Transaction.SIGHASH_SINGLE?t<=e:void 0)})})},TransactionBuilder.prototype.__overMaximumFees=function(t){return(this.inputs.reduce(function(t,e){return t+(e.value>>>0)},0)-this.tx.outs.reduce(function(t,e){return t+e.value},0))/t>this.maximumFeeRate},module.exports=TransactionBuilder;

}).call(this,require("buffer").Buffer)

},{"./address":11,"./crypto":14,"./ecpair":16,"./ecsignature":17,"./networks":20,"./script":21,"./transaction":45,"./types":47,"bitcoin-ops":9,"buffer":51,"typeforce":96}],47:[function(require,module,exports){
function UInt31(e){return typeforce.UInt32(e)&&e<=UINT31_MAX}function BIP32Path(e){return typeforce.String(e)&&e.match(/^(m\/)?(\d+'?\/)*\d+'?$/)}function Satoshi(e){return typeforce.UInt53(e)&&e<=SATOSHI_MAX}var typeforce=require("typeforce"),UINT31_MAX=Math.pow(2,31)-1;BIP32Path.toJSON=function(){return"BIP32 derivation path"};var SATOSHI_MAX=21e14,BigInt=typeforce.quacksLike("BigInteger"),ECPoint=typeforce.quacksLike("Point"),ECSignature=typeforce.compile({r:BigInt,s:BigInt}),Network=typeforce.compile({messagePrefix:typeforce.oneOf(typeforce.Buffer,typeforce.String),bip32:{public:typeforce.UInt32,private:typeforce.UInt32},pubKeyHash:typeforce.UInt16,scriptHash:typeforce.UInt16,wif:typeforce.UInt8}),types={BigInt:BigInt,BIP32Path:BIP32Path,Buffer256bit:typeforce.BufferN(32),ECPoint:ECPoint,ECSignature:ECSignature,Hash160bit:typeforce.BufferN(20),Hash256bit:typeforce.BufferN(32),Network:Network,Satoshi:Satoshi,UInt31:UInt31};for(var typeName in typeforce)types[typeName]=typeforce[typeName];module.exports=types;

},{"typeforce":96}],48:[function(require,module,exports){

},{}],49:[function(require,module,exports){
var basex=require("base-x");module.exports=basex("123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz");

},{"base-x":2}],50:[function(require,module,exports){
(function (Buffer){
"use strict";function sha256x2(e){var a=createHash("sha256").update(e).digest();return createHash("sha256").update(a).digest()}function encode(e){var a=sha256x2(e);return base58.encode(Buffer.concat([e,a],e.length+4))}function decodeRaw(e){var a=e.slice(0,-4),d=e.slice(-4),c=sha256x2(a);if(!(d[0]^c[0]|d[1]^c[1]|d[2]^c[2]|d[3]^c[3]))return a}function decodeUnsafe(e){var a=base58.decodeUnsafe(e);if(a)return decodeRaw(a)}function decode(e){var a=base58.decode(e),d=decodeRaw(a);if(!d)throw new Error("Invalid checksum");return d}var base58=require("bs58"),createHash=require("create-hash");module.exports={encode:encode,decode:decode,decodeUnsafe:decodeUnsafe,decodeRaw:decodeUnsafe};

}).call(this,require("buffer").Buffer)

},{"bs58":49,"buffer":51,"create-hash":54}],51:[function(require,module,exports){
"use strict";function typedArraySupport(){try{var e=new Uint8Array(1);return e.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===e.foo()}catch(e){return!1}}function createBuffer(e){if(e>K_MAX_LENGTH)throw new RangeError("Invalid typed array length");var t=new Uint8Array(e);return t.__proto__=Buffer.prototype,t}function Buffer(e,t,r){if("number"==typeof e){if("string"==typeof t)throw new Error("If encoding is specified then the first argument must be a string");return allocUnsafe(e)}return from(e,t,r)}function from(e,t,r){if("number"==typeof e)throw new TypeError('"value" argument must not be a number');return e instanceof ArrayBuffer?fromArrayBuffer(e,t,r):"string"==typeof e?fromString(e,t):fromObject(e)}function assertSize(e){if("number"!=typeof e)throw new TypeError('"size" argument must be a number');if(e<0)throw new RangeError('"size" argument must not be negative')}function alloc(e,t,r){return assertSize(e),e<=0?createBuffer(e):void 0!==t?"string"==typeof r?createBuffer(e).fill(t,r):createBuffer(e).fill(t):createBuffer(e)}function allocUnsafe(e){return assertSize(e),createBuffer(e<0?0:0|checked(e))}function fromString(e,t){if("string"==typeof t&&""!==t||(t="utf8"),!Buffer.isEncoding(t))throw new TypeError('"encoding" must be a valid string encoding');var r=0|byteLength(e,t),n=createBuffer(r),f=n.write(e,t);return f!==r&&(n=n.slice(0,f)),n}function fromArrayLike(e){for(var t=e.length<0?0:0|checked(e.length),r=createBuffer(t),n=0;n<t;n+=1)r[n]=255&e[n];return r}function fromArrayBuffer(e,t,r){if(t<0||e.byteLength<t)throw new RangeError("'offset' is out of bounds");if(e.byteLength<t+(r||0))throw new RangeError("'length' is out of bounds");var n;return n=void 0===t&&void 0===r?new Uint8Array(e):void 0===r?new Uint8Array(e,t):new Uint8Array(e,t,r),n.__proto__=Buffer.prototype,n}function fromObject(e){if(Buffer.isBuffer(e)){var t=0|checked(e.length),r=createBuffer(t);return 0===r.length?r:(e.copy(r,0,0,t),r)}if(e){if(isArrayBufferView(e)||"length"in e)return"number"!=typeof e.length||numberIsNaN(e.length)?createBuffer(0):fromArrayLike(e);if("Buffer"===e.type&&Array.isArray(e.data))return fromArrayLike(e.data)}throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}function checked(e){if(e>=K_MAX_LENGTH)throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+K_MAX_LENGTH.toString(16)+" bytes");return 0|e}function SlowBuffer(e){return+e!=e&&(e=0),Buffer.alloc(+e)}function byteLength(e,t){if(Buffer.isBuffer(e))return e.length;if(isArrayBufferView(e)||e instanceof ArrayBuffer)return e.byteLength;"string"!=typeof e&&(e=""+e);var r=e.length;if(0===r)return 0;for(var n=!1;;)switch(t){case"ascii":case"latin1":case"binary":return r;case"utf8":case"utf-8":case void 0:return utf8ToBytes(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*r;case"hex":return r>>>1;case"base64":return base64ToBytes(e).length;default:if(n)return utf8ToBytes(e).length;t=(""+t).toLowerCase(),n=!0}}function slowToString(e,t,r){var n=!1;if((void 0===t||t<0)&&(t=0),t>this.length)return"";if((void 0===r||r>this.length)&&(r=this.length),r<=0)return"";if(r>>>=0,t>>>=0,r<=t)return"";for(e||(e="utf8");;)switch(e){case"hex":return hexSlice(this,t,r);case"utf8":case"utf-8":return utf8Slice(this,t,r);case"ascii":return asciiSlice(this,t,r);case"latin1":case"binary":return latin1Slice(this,t,r);case"base64":return base64Slice(this,t,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return utf16leSlice(this,t,r);default:if(n)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),n=!0}}function swap(e,t,r){var n=e[t];e[t]=e[r],e[r]=n}function bidirectionalIndexOf(e,t,r,n,f){if(0===e.length)return-1;if("string"==typeof r?(n=r,r=0):r>2147483647?r=2147483647:r<-2147483648&&(r=-2147483648),r=+r,numberIsNaN(r)&&(r=f?0:e.length-1),r<0&&(r=e.length+r),r>=e.length){if(f)return-1;r=e.length-1}else if(r<0){if(!f)return-1;r=0}if("string"==typeof t&&(t=Buffer.from(t,n)),Buffer.isBuffer(t))return 0===t.length?-1:arrayIndexOf(e,t,r,n,f);if("number"==typeof t)return t&=255,"function"==typeof Uint8Array.prototype.indexOf?f?Uint8Array.prototype.indexOf.call(e,t,r):Uint8Array.prototype.lastIndexOf.call(e,t,r):arrayIndexOf(e,[t],r,n,f);throw new TypeError("val must be string, number or Buffer")}function arrayIndexOf(e,t,r,n,f){function i(e,t){return 1===o?e[t]:e.readUInt16BE(t*o)}var o=1,u=e.length,s=t.length;if(void 0!==n&&("ucs2"===(n=String(n).toLowerCase())||"ucs-2"===n||"utf16le"===n||"utf-16le"===n)){if(e.length<2||t.length<2)return-1;o=2,u/=2,s/=2,r/=2}var a;if(f){var h=-1;for(a=r;a<u;a++)if(i(e,a)===i(t,h===-1?0:a-h)){if(h===-1&&(h=a),a-h+1===s)return h*o}else h!==-1&&(a-=a-h),h=-1}else for(r+s>u&&(r=u-s),a=r;a>=0;a--){for(var c=!0,l=0;l<s;l++)if(i(e,a+l)!==i(t,l)){c=!1;break}if(c)return a}return-1}function hexWrite(e,t,r,n){r=Number(r)||0;var f=e.length-r;n?(n=Number(n))>f&&(n=f):n=f;var i=t.length;if(i%2!=0)throw new TypeError("Invalid hex string");n>i/2&&(n=i/2);for(var o=0;o<n;++o){var u=parseInt(t.substr(2*o,2),16);if(numberIsNaN(u))return o;e[r+o]=u}return o}function utf8Write(e,t,r,n){return blitBuffer(utf8ToBytes(t,e.length-r),e,r,n)}function asciiWrite(e,t,r,n){return blitBuffer(asciiToBytes(t),e,r,n)}function latin1Write(e,t,r,n){return asciiWrite(e,t,r,n)}function base64Write(e,t,r,n){return blitBuffer(base64ToBytes(t),e,r,n)}function ucs2Write(e,t,r,n){return blitBuffer(utf16leToBytes(t,e.length-r),e,r,n)}function base64Slice(e,t,r){return 0===t&&r===e.length?base64.fromByteArray(e):base64.fromByteArray(e.slice(t,r))}function utf8Slice(e,t,r){r=Math.min(e.length,r);for(var n=[],f=t;f<r;){var i=e[f],o=null,u=i>239?4:i>223?3:i>191?2:1;if(f+u<=r){var s,a,h,c;switch(u){case 1:i<128&&(o=i);break;case 2:s=e[f+1],128==(192&s)&&(c=(31&i)<<6|63&s)>127&&(o=c);break;case 3:s=e[f+1],a=e[f+2],128==(192&s)&&128==(192&a)&&(c=(15&i)<<12|(63&s)<<6|63&a)>2047&&(c<55296||c>57343)&&(o=c);break;case 4:s=e[f+1],a=e[f+2],h=e[f+3],128==(192&s)&&128==(192&a)&&128==(192&h)&&(c=(15&i)<<18|(63&s)<<12|(63&a)<<6|63&h)>65535&&c<1114112&&(o=c)}}null===o?(o=65533,u=1):o>65535&&(o-=65536,n.push(o>>>10&1023|55296),o=56320|1023&o),n.push(o),f+=u}return decodeCodePointsArray(n)}function decodeCodePointsArray(e){var t=e.length;if(t<=MAX_ARGUMENTS_LENGTH)return String.fromCharCode.apply(String,e);for(var r="",n=0;n<t;)r+=String.fromCharCode.apply(String,e.slice(n,n+=MAX_ARGUMENTS_LENGTH));return r}function asciiSlice(e,t,r){var n="";r=Math.min(e.length,r);for(var f=t;f<r;++f)n+=String.fromCharCode(127&e[f]);return n}function latin1Slice(e,t,r){var n="";r=Math.min(e.length,r);for(var f=t;f<r;++f)n+=String.fromCharCode(e[f]);return n}function hexSlice(e,t,r){var n=e.length;(!t||t<0)&&(t=0),(!r||r<0||r>n)&&(r=n);for(var f="",i=t;i<r;++i)f+=toHex(e[i]);return f}function utf16leSlice(e,t,r){for(var n=e.slice(t,r),f="",i=0;i<n.length;i+=2)f+=String.fromCharCode(n[i]+256*n[i+1]);return f}function checkOffset(e,t,r){if(e%1!=0||e<0)throw new RangeError("offset is not uint");if(e+t>r)throw new RangeError("Trying to access beyond buffer length")}function checkInt(e,t,r,n,f,i){if(!Buffer.isBuffer(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(t>f||t<i)throw new RangeError('"value" argument is out of bounds');if(r+n>e.length)throw new RangeError("Index out of range")}function checkIEEE754(e,t,r,n,f,i){if(r+n>e.length)throw new RangeError("Index out of range");if(r<0)throw new RangeError("Index out of range")}function writeFloat(e,t,r,n,f){return t=+t,r>>>=0,f||checkIEEE754(e,t,r,4,3.4028234663852886e38,-3.4028234663852886e38),ieee754.write(e,t,r,n,23,4),r+4}function writeDouble(e,t,r,n,f){return t=+t,r>>>=0,f||checkIEEE754(e,t,r,8,1.7976931348623157e308,-1.7976931348623157e308),ieee754.write(e,t,r,n,52,8),r+8}function base64clean(e){if(e=e.trim().replace(INVALID_BASE64_RE,""),e.length<2)return"";for(;e.length%4!=0;)e+="=";return e}function toHex(e){return e<16?"0"+e.toString(16):e.toString(16)}function utf8ToBytes(e,t){t=t||1/0;for(var r,n=e.length,f=null,i=[],o=0;o<n;++o){if((r=e.charCodeAt(o))>55295&&r<57344){if(!f){if(r>56319){(t-=3)>-1&&i.push(239,191,189);continue}if(o+1===n){(t-=3)>-1&&i.push(239,191,189);continue}f=r;continue}if(r<56320){(t-=3)>-1&&i.push(239,191,189),f=r;continue}r=65536+(f-55296<<10|r-56320)}else f&&(t-=3)>-1&&i.push(239,191,189);if(f=null,r<128){if((t-=1)<0)break;i.push(r)}else if(r<2048){if((t-=2)<0)break;i.push(r>>6|192,63&r|128)}else if(r<65536){if((t-=3)<0)break;i.push(r>>12|224,r>>6&63|128,63&r|128)}else{if(!(r<1114112))throw new Error("Invalid code point");if((t-=4)<0)break;i.push(r>>18|240,r>>12&63|128,r>>6&63|128,63&r|128)}}return i}function asciiToBytes(e){for(var t=[],r=0;r<e.length;++r)t.push(255&e.charCodeAt(r));return t}function utf16leToBytes(e,t){for(var r,n,f,i=[],o=0;o<e.length&&!((t-=2)<0);++o)r=e.charCodeAt(o),n=r>>8,f=r%256,i.push(f),i.push(n);return i}function base64ToBytes(e){return base64.toByteArray(base64clean(e))}function blitBuffer(e,t,r,n){for(var f=0;f<n&&!(f+r>=t.length||f>=e.length);++f)t[f+r]=e[f];return f}function isArrayBufferView(e){return"function"==typeof ArrayBuffer.isView&&ArrayBuffer.isView(e)}function numberIsNaN(e){return e!==e}var base64=require("base64-js"),ieee754=require("ieee754");exports.Buffer=Buffer,exports.SlowBuffer=SlowBuffer,exports.INSPECT_MAX_BYTES=50;var K_MAX_LENGTH=2147483647;exports.kMaxLength=K_MAX_LENGTH,Buffer.TYPED_ARRAY_SUPPORT=typedArraySupport(),Buffer.TYPED_ARRAY_SUPPORT||"undefined"==typeof console||"function"!=typeof console.error||console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."),"undefined"!=typeof Symbol&&Symbol.species&&Buffer[Symbol.species]===Buffer&&Object.defineProperty(Buffer,Symbol.species,{value:null,configurable:!0,enumerable:!1,writable:!1}),Buffer.poolSize=8192,Buffer.from=function(e,t,r){return from(e,t,r)},Buffer.prototype.__proto__=Uint8Array.prototype,Buffer.__proto__=Uint8Array,Buffer.alloc=function(e,t,r){return alloc(e,t,r)},Buffer.allocUnsafe=function(e){return allocUnsafe(e)},Buffer.allocUnsafeSlow=function(e){return allocUnsafe(e)},Buffer.isBuffer=function(e){return null!=e&&e._isBuffer===!0},Buffer.compare=function(e,t){if(!Buffer.isBuffer(e)||!Buffer.isBuffer(t))throw new TypeError("Arguments must be Buffers");if(e===t)return 0;for(var r=e.length,n=t.length,f=0,i=Math.min(r,n);f<i;++f)if(e[f]!==t[f]){r=e[f],n=t[f];break}return r<n?-1:n<r?1:0},Buffer.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},Buffer.concat=function(e,t){if(!Array.isArray(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return Buffer.alloc(0);var r;if(void 0===t)for(t=0,r=0;r<e.length;++r)t+=e[r].length;var n=Buffer.allocUnsafe(t),f=0;for(r=0;r<e.length;++r){var i=e[r];if(!Buffer.isBuffer(i))throw new TypeError('"list" argument must be an Array of Buffers');i.copy(n,f),f+=i.length}return n},Buffer.byteLength=byteLength,Buffer.prototype._isBuffer=!0,Buffer.prototype.swap16=function(){var e=this.length;if(e%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var t=0;t<e;t+=2)swap(this,t,t+1);return this},Buffer.prototype.swap32=function(){var e=this.length;if(e%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var t=0;t<e;t+=4)swap(this,t,t+3),swap(this,t+1,t+2);return this},Buffer.prototype.swap64=function(){var e=this.length;if(e%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var t=0;t<e;t+=8)swap(this,t,t+7),swap(this,t+1,t+6),swap(this,t+2,t+5),swap(this,t+3,t+4);return this},Buffer.prototype.toString=function(){var e=this.length;return 0===e?"":0===arguments.length?utf8Slice(this,0,e):slowToString.apply(this,arguments)},Buffer.prototype.equals=function(e){if(!Buffer.isBuffer(e))throw new TypeError("Argument must be a Buffer");return this===e||0===Buffer.compare(this,e)},Buffer.prototype.inspect=function(){var e="",t=exports.INSPECT_MAX_BYTES;return this.length>0&&(e=this.toString("hex",0,t).match(/.{2}/g).join(" "),this.length>t&&(e+=" ... ")),"<Buffer "+e+">"},Buffer.prototype.compare=function(e,t,r,n,f){if(!Buffer.isBuffer(e))throw new TypeError("Argument must be a Buffer");if(void 0===t&&(t=0),void 0===r&&(r=e?e.length:0),void 0===n&&(n=0),void 0===f&&(f=this.length),t<0||r>e.length||n<0||f>this.length)throw new RangeError("out of range index");if(n>=f&&t>=r)return 0;if(n>=f)return-1;if(t>=r)return 1;if(t>>>=0,r>>>=0,n>>>=0,f>>>=0,this===e)return 0;for(var i=f-n,o=r-t,u=Math.min(i,o),s=this.slice(n,f),a=e.slice(t,r),h=0;h<u;++h)if(s[h]!==a[h]){i=s[h],o=a[h];break}return i<o?-1:o<i?1:0},Buffer.prototype.includes=function(e,t,r){return this.indexOf(e,t,r)!==-1},Buffer.prototype.indexOf=function(e,t,r){return bidirectionalIndexOf(this,e,t,r,!0)},Buffer.prototype.lastIndexOf=function(e,t,r){return bidirectionalIndexOf(this,e,t,r,!1)},Buffer.prototype.write=function(e,t,r,n){if(void 0===t)n="utf8",r=this.length,t=0;else if(void 0===r&&"string"==typeof t)n=t,r=this.length,t=0;else{if(!isFinite(t))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");t>>>=0,isFinite(r)?(r>>>=0,void 0===n&&(n="utf8")):(n=r,r=void 0)}var f=this.length-t;if((void 0===r||r>f)&&(r=f),e.length>0&&(r<0||t<0)||t>this.length)throw new RangeError("Attempt to write outside buffer bounds");n||(n="utf8");for(var i=!1;;)switch(n){case"hex":return hexWrite(this,e,t,r);case"utf8":case"utf-8":return utf8Write(this,e,t,r);case"ascii":return asciiWrite(this,e,t,r);case"latin1":case"binary":return latin1Write(this,e,t,r);case"base64":return base64Write(this,e,t,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return ucs2Write(this,e,t,r);default:if(i)throw new TypeError("Unknown encoding: "+n);n=(""+n).toLowerCase(),i=!0}},Buffer.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var MAX_ARGUMENTS_LENGTH=4096;Buffer.prototype.slice=function(e,t){var r=this.length;e=~~e,t=void 0===t?r:~~t,e<0?(e+=r)<0&&(e=0):e>r&&(e=r),t<0?(t+=r)<0&&(t=0):t>r&&(t=r),t<e&&(t=e);var n=this.subarray(e,t);return n.__proto__=Buffer.prototype,n},Buffer.prototype.readUIntLE=function(e,t,r){e>>>=0,t>>>=0,r||checkOffset(e,t,this.length);for(var n=this[e],f=1,i=0;++i<t&&(f*=256);)n+=this[e+i]*f;return n},Buffer.prototype.readUIntBE=function(e,t,r){e>>>=0,t>>>=0,r||checkOffset(e,t,this.length);for(var n=this[e+--t],f=1;t>0&&(f*=256);)n+=this[e+--t]*f;return n},Buffer.prototype.readUInt8=function(e,t){return e>>>=0,t||checkOffset(e,1,this.length),this[e]},Buffer.prototype.readUInt16LE=function(e,t){return e>>>=0,t||checkOffset(e,2,this.length),this[e]|this[e+1]<<8},Buffer.prototype.readUInt16BE=function(e,t){return e>>>=0,t||checkOffset(e,2,this.length),this[e]<<8|this[e+1]},Buffer.prototype.readUInt32LE=function(e,t){return e>>>=0,t||checkOffset(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},Buffer.prototype.readUInt32BE=function(e,t){return e>>>=0,t||checkOffset(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},Buffer.prototype.readIntLE=function(e,t,r){e>>>=0,t>>>=0,r||checkOffset(e,t,this.length);for(var n=this[e],f=1,i=0;++i<t&&(f*=256);)n+=this[e+i]*f;return f*=128,n>=f&&(n-=Math.pow(2,8*t)),n},Buffer.prototype.readIntBE=function(e,t,r){e>>>=0,t>>>=0,r||checkOffset(e,t,this.length);for(var n=t,f=1,i=this[e+--n];n>0&&(f*=256);)i+=this[e+--n]*f;return f*=128,i>=f&&(i-=Math.pow(2,8*t)),i},Buffer.prototype.readInt8=function(e,t){return e>>>=0,t||checkOffset(e,1,this.length),128&this[e]?(255-this[e]+1)*-1:this[e]},Buffer.prototype.readInt16LE=function(e,t){e>>>=0,t||checkOffset(e,2,this.length);var r=this[e]|this[e+1]<<8;return 32768&r?4294901760|r:r},Buffer.prototype.readInt16BE=function(e,t){e>>>=0,t||checkOffset(e,2,this.length);var r=this[e+1]|this[e]<<8;return 32768&r?4294901760|r:r},Buffer.prototype.readInt32LE=function(e,t){return e>>>=0,t||checkOffset(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},Buffer.prototype.readInt32BE=function(e,t){return e>>>=0,t||checkOffset(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},Buffer.prototype.readFloatLE=function(e,t){return e>>>=0,t||checkOffset(e,4,this.length),ieee754.read(this,e,!0,23,4)},Buffer.prototype.readFloatBE=function(e,t){return e>>>=0,t||checkOffset(e,4,this.length),ieee754.read(this,e,!1,23,4)},Buffer.prototype.readDoubleLE=function(e,t){return e>>>=0,t||checkOffset(e,8,this.length),ieee754.read(this,e,!0,52,8)},Buffer.prototype.readDoubleBE=function(e,t){return e>>>=0,t||checkOffset(e,8,this.length),ieee754.read(this,e,!1,52,8)},Buffer.prototype.writeUIntLE=function(e,t,r,n){if(e=+e,t>>>=0,r>>>=0,!n){checkInt(this,e,t,r,Math.pow(2,8*r)-1,0)}var f=1,i=0;for(this[t]=255&e;++i<r&&(f*=256);)this[t+i]=e/f&255;return t+r},Buffer.prototype.writeUIntBE=function(e,t,r,n){if(e=+e,t>>>=0,r>>>=0,!n){checkInt(this,e,t,r,Math.pow(2,8*r)-1,0)}var f=r-1,i=1;for(this[t+f]=255&e;--f>=0&&(i*=256);)this[t+f]=e/i&255;return t+r},Buffer.prototype.writeUInt8=function(e,t,r){return e=+e,t>>>=0,r||checkInt(this,e,t,1,255,0),this[t]=255&e,t+1},Buffer.prototype.writeUInt16LE=function(e,t,r){return e=+e,t>>>=0,r||checkInt(this,e,t,2,65535,0),this[t]=255&e,this[t+1]=e>>>8,t+2},Buffer.prototype.writeUInt16BE=function(e,t,r){return e=+e,t>>>=0,r||checkInt(this,e,t,2,65535,0),this[t]=e>>>8,this[t+1]=255&e,t+2},Buffer.prototype.writeUInt32LE=function(e,t,r){return e=+e,t>>>=0,r||checkInt(this,e,t,4,4294967295,0),this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e,t+4},Buffer.prototype.writeUInt32BE=function(e,t,r){return e=+e,t>>>=0,r||checkInt(this,e,t,4,4294967295,0),this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e,t+4},Buffer.prototype.writeIntLE=function(e,t,r,n){if(e=+e,t>>>=0,!n){var f=Math.pow(2,8*r-1);checkInt(this,e,t,r,f-1,-f)}var i=0,o=1,u=0;for(this[t]=255&e;++i<r&&(o*=256);)e<0&&0===u&&0!==this[t+i-1]&&(u=1),this[t+i]=(e/o>>0)-u&255;return t+r},Buffer.prototype.writeIntBE=function(e,t,r,n){if(e=+e,t>>>=0,!n){var f=Math.pow(2,8*r-1);checkInt(this,e,t,r,f-1,-f)}var i=r-1,o=1,u=0;for(this[t+i]=255&e;--i>=0&&(o*=256);)e<0&&0===u&&0!==this[t+i+1]&&(u=1),this[t+i]=(e/o>>0)-u&255;return t+r},Buffer.prototype.writeInt8=function(e,t,r){return e=+e,t>>>=0,r||checkInt(this,e,t,1,127,-128),e<0&&(e=255+e+1),this[t]=255&e,t+1},Buffer.prototype.writeInt16LE=function(e,t,r){return e=+e,t>>>=0,r||checkInt(this,e,t,2,32767,-32768),this[t]=255&e,this[t+1]=e>>>8,t+2},Buffer.prototype.writeInt16BE=function(e,t,r){return e=+e,t>>>=0,r||checkInt(this,e,t,2,32767,-32768),this[t]=e>>>8,this[t+1]=255&e,t+2},Buffer.prototype.writeInt32LE=function(e,t,r){return e=+e,t>>>=0,r||checkInt(this,e,t,4,2147483647,-2147483648),this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24,t+4},Buffer.prototype.writeInt32BE=function(e,t,r){return e=+e,t>>>=0,r||checkInt(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e,t+4},Buffer.prototype.writeFloatLE=function(e,t,r){return writeFloat(this,e,t,!0,r)},Buffer.prototype.writeFloatBE=function(e,t,r){return writeFloat(this,e,t,!1,r)},Buffer.prototype.writeDoubleLE=function(e,t,r){return writeDouble(this,e,t,!0,r)},Buffer.prototype.writeDoubleBE=function(e,t,r){return writeDouble(this,e,t,!1,r)},Buffer.prototype.copy=function(e,t,r,n){if(r||(r=0),n||0===n||(n=this.length),t>=e.length&&(t=e.length),t||(t=0),n>0&&n<r&&(n=r),n===r)return 0;if(0===e.length||0===this.length)return 0;if(t<0)throw new RangeError("targetStart out of bounds");if(r<0||r>=this.length)throw new RangeError("sourceStart out of bounds");if(n<0)throw new RangeError("sourceEnd out of bounds");n>this.length&&(n=this.length),e.length-t<n-r&&(n=e.length-t+r);var f,i=n-r;if(this===e&&r<t&&t<n)for(f=i-1;f>=0;--f)e[f+t]=this[f+r];else if(i<1e3)for(f=0;f<i;++f)e[f+t]=this[f+r];else Uint8Array.prototype.set.call(e,this.subarray(r,r+i),t);return i},Buffer.prototype.fill=function(e,t,r,n){if("string"==typeof e){if("string"==typeof t?(n=t,t=0,r=this.length):"string"==typeof r&&(n=r,r=this.length),1===e.length){var f=e.charCodeAt(0);f<256&&(e=f)}if(void 0!==n&&"string"!=typeof n)throw new TypeError("encoding must be a string");if("string"==typeof n&&!Buffer.isEncoding(n))throw new TypeError("Unknown encoding: "+n)}else"number"==typeof e&&(e&=255);if(t<0||this.length<t||this.length<r)throw new RangeError("Out of range index");if(r<=t)return this;t>>>=0,r=void 0===r?this.length:r>>>0,e||(e=0);var i;if("number"==typeof e)for(i=t;i<r;++i)this[i]=e;else{var o=Buffer.isBuffer(e)?e:new Buffer(e,n),u=o.length;for(i=0;i<r-t;++i)this[i+t]=o[i%u]}return this};var INVALID_BASE64_RE=/[^+\/0-9A-Za-z-_]/g;

},{"base64-js":3,"ieee754":64}],52:[function(require,module,exports){
(function (Buffer){
function CipherBase(t){Transform.call(this),this.hashMode="string"==typeof t,this.hashMode?this[t]=this._finalOrDigest:this.final=this._finalOrDigest,this._decoder=null,this._encoding=null}var Transform=require("stream").Transform,inherits=require("inherits"),StringDecoder=require("string_decoder").StringDecoder;module.exports=CipherBase,inherits(CipherBase,Transform),CipherBase.prototype.update=function(t,e,r){"string"==typeof t&&(t=new Buffer(t,e));var i=this._update(t);return this.hashMode?this:(r&&(i=this._toString(i,r)),i)},CipherBase.prototype.setAutoPadding=function(){},CipherBase.prototype.getAuthTag=function(){throw new Error("trying to get auth tag in unsupported state")},CipherBase.prototype.setAuthTag=function(){throw new Error("trying to set auth tag in unsupported state")},CipherBase.prototype.setAAD=function(){throw new Error("trying to set aad in unsupported state")},CipherBase.prototype._transform=function(t,e,r){var i;try{this.hashMode?this._update(t):this.push(this._update(t))}catch(t){i=t}finally{r(i)}},CipherBase.prototype._flush=function(t){var e;try{this.push(this._final())}catch(t){e=t}finally{t(e)}},CipherBase.prototype._finalOrDigest=function(t){var e=this._final()||new Buffer("");return t&&(e=this._toString(e,t,!0)),e},CipherBase.prototype._toString=function(t,e,r){if(this._decoder||(this._decoder=new StringDecoder(e),this._encoding=e),this._encoding!==e)throw new Error("can't switch encodings");var i=this._decoder.write(t);return r&&(i+=this._decoder.end()),i};

}).call(this,require("buffer").Buffer)

},{"buffer":51,"inherits":65,"stream":92,"string_decoder":93}],53:[function(require,module,exports){
(function (Buffer){
function isArray(r){return Array.isArray?Array.isArray(r):"[object Array]"===objectToString(r)}function isBoolean(r){return"boolean"==typeof r}function isNull(r){return null===r}function isNullOrUndefined(r){return null==r}function isNumber(r){return"number"==typeof r}function isString(r){return"string"==typeof r}function isSymbol(r){return"symbol"==typeof r}function isUndefined(r){return void 0===r}function isRegExp(r){return"[object RegExp]"===objectToString(r)}function isObject(r){return"object"==typeof r&&null!==r}function isDate(r){return"[object Date]"===objectToString(r)}function isError(r){return"[object Error]"===objectToString(r)||r instanceof Error}function isFunction(r){return"function"==typeof r}function isPrimitive(r){return null===r||"boolean"==typeof r||"number"==typeof r||"string"==typeof r||"symbol"==typeof r||void 0===r}function objectToString(r){return Object.prototype.toString.call(r)}exports.isArray=isArray,exports.isBoolean=isBoolean,exports.isNull=isNull,exports.isNullOrUndefined=isNullOrUndefined,exports.isNumber=isNumber,exports.isString=isString,exports.isSymbol=isSymbol,exports.isUndefined=isUndefined,exports.isRegExp=isRegExp,exports.isObject=isObject,exports.isDate=isDate,exports.isError=isError,exports.isFunction=isFunction,exports.isPrimitive=isPrimitive,exports.isBuffer=Buffer.isBuffer;

}).call(this,{"isBuffer":require("../../is-buffer/index.js")})

},{"../../is-buffer/index.js":66}],54:[function(require,module,exports){
(function (Buffer){
"use strict";function HashNoConstructor(s){Base.call(this,"digest"),this._hash=s,this.buffers=[]}function Hash(s){Base.call(this,"digest"),this._hash=s}var inherits=require("inherits"),md5=require("./md5"),rmd160=require("ripemd160"),sha=require("sha.js"),Base=require("cipher-base");inherits(HashNoConstructor,Base),HashNoConstructor.prototype._update=function(s){this.buffers.push(s)},HashNoConstructor.prototype._final=function(){var s=Buffer.concat(this.buffers),t=this._hash(s);return this.buffers=null,t},inherits(Hash,Base),Hash.prototype._update=function(s){this._hash.update(s)},Hash.prototype._final=function(){return this._hash.digest()},module.exports=function(s){return s=s.toLowerCase(),"md5"===s?new HashNoConstructor(md5):"rmd160"===s||"ripemd160"===s?new HashNoConstructor(rmd160):new Hash(sha(s))};

}).call(this,require("buffer").Buffer)

},{"./md5":56,"buffer":51,"cipher-base":52,"inherits":65,"ripemd160":83,"sha.js":85}],55:[function(require,module,exports){
(function (Buffer){
"use strict";function toArray(r,e){if(r.length%intSize!=0){var t=r.length+(intSize-r.length%intSize);r=Buffer.concat([r,zeroBuffer],t)}for(var f=[],n=e?r.readInt32BE:r.readInt32LE,i=0;i<r.length;i+=intSize)f.push(n.call(r,i));return f}function toBuffer(r,e,t){for(var f=new Buffer(e),n=t?f.writeInt32BE:f.writeInt32LE,i=0;i<r.length;i++)n.call(f,r[i],4*i,!0);return f}function hash(r,e,t,f){return Buffer.isBuffer(r)||(r=new Buffer(r)),toBuffer(e(toArray(r,f),r.length*chrsz),t,f)}var intSize=4,zeroBuffer=new Buffer(intSize);zeroBuffer.fill(0);var chrsz=8;exports.hash=hash;

}).call(this,require("buffer").Buffer)

},{"buffer":51}],56:[function(require,module,exports){
"use strict";function core_md5(d,_){d[_>>5]|=128<<_%32,d[14+(_+64>>>9<<4)]=_;for(var m=1732584193,f=-271733879,i=-1732584194,h=271733878,r=0;r<d.length;r+=16){var g=m,n=f,e=i,a=h;m=md5_ff(m,f,i,h,d[r+0],7,-680876936),h=md5_ff(h,m,f,i,d[r+1],12,-389564586),i=md5_ff(i,h,m,f,d[r+2],17,606105819),f=md5_ff(f,i,h,m,d[r+3],22,-1044525330),m=md5_ff(m,f,i,h,d[r+4],7,-176418897),h=md5_ff(h,m,f,i,d[r+5],12,1200080426),i=md5_ff(i,h,m,f,d[r+6],17,-1473231341),f=md5_ff(f,i,h,m,d[r+7],22,-45705983),m=md5_ff(m,f,i,h,d[r+8],7,1770035416),h=md5_ff(h,m,f,i,d[r+9],12,-1958414417),i=md5_ff(i,h,m,f,d[r+10],17,-42063),f=md5_ff(f,i,h,m,d[r+11],22,-1990404162),m=md5_ff(m,f,i,h,d[r+12],7,1804603682),h=md5_ff(h,m,f,i,d[r+13],12,-40341101),i=md5_ff(i,h,m,f,d[r+14],17,-1502002290),f=md5_ff(f,i,h,m,d[r+15],22,1236535329),m=md5_gg(m,f,i,h,d[r+1],5,-165796510),h=md5_gg(h,m,f,i,d[r+6],9,-1069501632),i=md5_gg(i,h,m,f,d[r+11],14,643717713),f=md5_gg(f,i,h,m,d[r+0],20,-373897302),m=md5_gg(m,f,i,h,d[r+5],5,-701558691),h=md5_gg(h,m,f,i,d[r+10],9,38016083),i=md5_gg(i,h,m,f,d[r+15],14,-660478335),f=md5_gg(f,i,h,m,d[r+4],20,-405537848),m=md5_gg(m,f,i,h,d[r+9],5,568446438),h=md5_gg(h,m,f,i,d[r+14],9,-1019803690),i=md5_gg(i,h,m,f,d[r+3],14,-187363961),f=md5_gg(f,i,h,m,d[r+8],20,1163531501),m=md5_gg(m,f,i,h,d[r+13],5,-1444681467),h=md5_gg(h,m,f,i,d[r+2],9,-51403784),i=md5_gg(i,h,m,f,d[r+7],14,1735328473),f=md5_gg(f,i,h,m,d[r+12],20,-1926607734),m=md5_hh(m,f,i,h,d[r+5],4,-378558),h=md5_hh(h,m,f,i,d[r+8],11,-2022574463),i=md5_hh(i,h,m,f,d[r+11],16,1839030562),f=md5_hh(f,i,h,m,d[r+14],23,-35309556),m=md5_hh(m,f,i,h,d[r+1],4,-1530992060),h=md5_hh(h,m,f,i,d[r+4],11,1272893353),i=md5_hh(i,h,m,f,d[r+7],16,-155497632),f=md5_hh(f,i,h,m,d[r+10],23,-1094730640),m=md5_hh(m,f,i,h,d[r+13],4,681279174),h=md5_hh(h,m,f,i,d[r+0],11,-358537222),i=md5_hh(i,h,m,f,d[r+3],16,-722521979),f=md5_hh(f,i,h,m,d[r+6],23,76029189),m=md5_hh(m,f,i,h,d[r+9],4,-640364487),h=md5_hh(h,m,f,i,d[r+12],11,-421815835),i=md5_hh(i,h,m,f,d[r+15],16,530742520),f=md5_hh(f,i,h,m,d[r+2],23,-995338651),m=md5_ii(m,f,i,h,d[r+0],6,-198630844),h=md5_ii(h,m,f,i,d[r+7],10,1126891415),i=md5_ii(i,h,m,f,d[r+14],15,-1416354905),f=md5_ii(f,i,h,m,d[r+5],21,-57434055),m=md5_ii(m,f,i,h,d[r+12],6,1700485571),h=md5_ii(h,m,f,i,d[r+3],10,-1894986606),i=md5_ii(i,h,m,f,d[r+10],15,-1051523),f=md5_ii(f,i,h,m,d[r+1],21,-2054922799),m=md5_ii(m,f,i,h,d[r+8],6,1873313359),h=md5_ii(h,m,f,i,d[r+15],10,-30611744),i=md5_ii(i,h,m,f,d[r+6],15,-1560198380),f=md5_ii(f,i,h,m,d[r+13],21,1309151649),m=md5_ii(m,f,i,h,d[r+4],6,-145523070),h=md5_ii(h,m,f,i,d[r+11],10,-1120210379),i=md5_ii(i,h,m,f,d[r+2],15,718787259),f=md5_ii(f,i,h,m,d[r+9],21,-343485551),m=safe_add(m,g),f=safe_add(f,n),i=safe_add(i,e),h=safe_add(h,a)}return Array(m,f,i,h)}function md5_cmn(d,_,m,f,i,h){return safe_add(bit_rol(safe_add(safe_add(_,d),safe_add(f,h)),i),m)}function md5_ff(d,_,m,f,i,h,r){return md5_cmn(_&m|~_&f,d,_,i,h,r)}function md5_gg(d,_,m,f,i,h,r){return md5_cmn(_&f|m&~f,d,_,i,h,r)}function md5_hh(d,_,m,f,i,h,r){return md5_cmn(_^m^f,d,_,i,h,r)}function md5_ii(d,_,m,f,i,h,r){return md5_cmn(m^(_|~f),d,_,i,h,r)}function safe_add(d,_){var m=(65535&d)+(65535&_);return(d>>16)+(_>>16)+(m>>16)<<16|65535&m}function bit_rol(d,_){return d<<_|d>>>32-_}var helpers=require("./helpers");module.exports=function(d){return helpers.hash(d,core_md5,16)};

},{"./helpers":55}],57:[function(require,module,exports){
(function (Buffer){
"use strict";function Hmac(t,e){Transform.call(this),t=t.toLowerCase(),"string"==typeof e&&(e=new Buffer(e));var r="sha512"===t||"sha384"===t?128:64;this._alg=t,this._key=e,e.length>r?e=createHash(t).update(e).digest():e.length<r&&(e=Buffer.concat([e,ZEROS],r));for(var a=this._ipad=new Buffer(r),s=this._opad=new Buffer(r),i=0;i<r;i++)a[i]=54^e[i],s[i]=92^e[i];this._hash=createHash(t).update(a)}var createHash=require("create-hash/browser"),inherits=require("inherits"),Transform=require("stream").Transform,ZEROS=new Buffer(128);ZEROS.fill(0),inherits(Hmac,Transform),Hmac.prototype.update=function(t,e){return this._hash.update(t,e),this},Hmac.prototype._transform=function(t,e,r){this._hash.update(t),r()},Hmac.prototype._flush=function(t){this.push(this.digest()),t()},Hmac.prototype.digest=function(t){var e=this._hash.digest();return createHash(this._alg).update(this._opad).update(e).digest(t)},module.exports=function(t,e){return new Hmac(t,e)};

}).call(this,require("buffer").Buffer)

},{"buffer":51,"create-hash/browser":54,"inherits":65,"stream":92}],58:[function(require,module,exports){
function Curve(i,t,n,r,s,e,o){this.p=i,this.a=t,this.b=n,this.G=Point.fromAffine(this,r,s),this.n=e,this.h=o,this.infinity=new Point(this,null,null,BigInteger.ZERO),this.pOverFour=i.add(BigInteger.ONE).shiftRight(2),this.pLength=Math.floor((this.p.bitLength()+7)/8)}var assert=require("assert"),BigInteger=require("bigi"),Point=require("./point");Curve.prototype.pointFromX=function(i,t){var n=t.pow(3).add(this.a.multiply(t)).add(this.b).mod(this.p),r=n.modPow(this.pOverFour,this.p),s=r;return r.isEven()^!i&&(s=this.p.subtract(s)),Point.fromAffine(this,t,s)},Curve.prototype.isInfinity=function(i){return i===this.infinity||0===i.z.signum()&&0!==i.y.signum()},Curve.prototype.isOnCurve=function(i){if(this.isInfinity(i))return!0;var t=i.affineX,n=i.affineY,r=this.a,s=this.b,e=this.p;if(t.signum()<0||t.compareTo(e)>=0)return!1;if(n.signum()<0||n.compareTo(e)>=0)return!1;var o=n.square().mod(e),u=t.pow(3).add(r.multiply(t)).add(s).mod(e);return o.equals(u)},Curve.prototype.validate=function(i){assert(!this.isInfinity(i),"Point is at infinity"),assert(this.isOnCurve(i),"Point is not on the curve");var t=i.multiply(this.n);return assert(this.isInfinity(t),"Point is not a scalar multiple of G"),!0},module.exports=Curve;

},{"./point":62,"assert":1,"bigi":6}],59:[function(require,module,exports){
module.exports={
  "secp128r1": {
    "p": "fffffffdffffffffffffffffffffffff",
    "a": "fffffffdfffffffffffffffffffffffc",
    "b": "e87579c11079f43dd824993c2cee5ed3",
    "n": "fffffffe0000000075a30d1b9038a115",
    "h": "01",
    "Gx": "161ff7528b899b2d0c28607ca52c5b86",
    "Gy": "cf5ac8395bafeb13c02da292dded7a83"
  },
  "secp160k1": {
    "p": "fffffffffffffffffffffffffffffffeffffac73",
    "a": "00",
    "b": "07",
    "n": "0100000000000000000001b8fa16dfab9aca16b6b3",
    "h": "01",
    "Gx": "3b4c382ce37aa192a4019e763036f4f5dd4d7ebb",
    "Gy": "938cf935318fdced6bc28286531733c3f03c4fee"
  },
  "secp160r1": {
    "p": "ffffffffffffffffffffffffffffffff7fffffff",
    "a": "ffffffffffffffffffffffffffffffff7ffffffc",
    "b": "1c97befc54bd7a8b65acf89f81d4d4adc565fa45",
    "n": "0100000000000000000001f4c8f927aed3ca752257",
    "h": "01",
    "Gx": "4a96b5688ef573284664698968c38bb913cbfc82",
    "Gy": "23a628553168947d59dcc912042351377ac5fb32"
  },
  "secp192k1": {
    "p": "fffffffffffffffffffffffffffffffffffffffeffffee37",
    "a": "00",
    "b": "03",
    "n": "fffffffffffffffffffffffe26f2fc170f69466a74defd8d",
    "h": "01",
    "Gx": "db4ff10ec057e9ae26b07d0280b7f4341da5d1b1eae06c7d",
    "Gy": "9b2f2f6d9c5628a7844163d015be86344082aa88d95e2f9d"
  },
  "secp192r1": {
    "p": "fffffffffffffffffffffffffffffffeffffffffffffffff",
    "a": "fffffffffffffffffffffffffffffffefffffffffffffffc",
    "b": "64210519e59c80e70fa7e9ab72243049feb8deecc146b9b1",
    "n": "ffffffffffffffffffffffff99def836146bc9b1b4d22831",
    "h": "01",
    "Gx": "188da80eb03090f67cbf20eb43a18800f4ff0afd82ff1012",
    "Gy": "07192b95ffc8da78631011ed6b24cdd573f977a11e794811"
  },
  "secp256k1": {
    "p": "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f",
    "a": "00",
    "b": "07",
    "n": "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141",
    "h": "01",
    "Gx": "79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798",
    "Gy": "483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8"
  },
  "secp256r1": {
    "p": "ffffffff00000001000000000000000000000000ffffffffffffffffffffffff",
    "a": "ffffffff00000001000000000000000000000000fffffffffffffffffffffffc",
    "b": "5ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2604b",
    "n": "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551",
    "h": "01",
    "Gx": "6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296",
    "Gy": "4fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f5"
  }
}

},{}],60:[function(require,module,exports){
var Point=require("./point"),Curve=require("./curve"),getCurveByName=require("./names");module.exports={Curve:Curve,Point:Point,getCurveByName:getCurveByName};

},{"./curve":58,"./names":61,"./point":62}],61:[function(require,module,exports){
function getCurveByName(e){var r=curves[e];if(!r)return null;var n=new BigInteger(r.p,16),g=new BigInteger(r.a,16),u=new BigInteger(r.b,16),i=new BigInteger(r.n,16),t=new BigInteger(r.h,16);return new Curve(n,g,u,new BigInteger(r.Gx,16),new BigInteger(r.Gy,16),i,t)}var BigInteger=require("bigi"),curves=require("./curves.json"),Curve=require("./curve");module.exports=getCurveByName;

},{"./curve":58,"./curves.json":59,"bigi":6}],62:[function(require,module,exports){
(function (Buffer){
function Point(t,i,e,r){assert.notStrictEqual(r,void 0,"Missing Z coordinate"),this.curve=t,this.x=i,this.y=e,this.z=r,this._zInv=null,this.compressed=!0}var assert=require("assert"),BigInteger=require("bigi"),THREE=BigInteger.valueOf(3);Object.defineProperty(Point.prototype,"zInv",{get:function(){return null===this._zInv&&(this._zInv=this.z.modInverse(this.curve.p)),this._zInv}}),Object.defineProperty(Point.prototype,"affineX",{get:function(){return this.x.multiply(this.zInv).mod(this.curve.p)}}),Object.defineProperty(Point.prototype,"affineY",{get:function(){return this.y.multiply(this.zInv).mod(this.curve.p)}}),Point.fromAffine=function(t,i,e){return new Point(t,i,e,BigInteger.ONE)},Point.prototype.equals=function(t){return t===this||(this.curve.isInfinity(this)?this.curve.isInfinity(t):this.curve.isInfinity(t)?this.curve.isInfinity(this):0===t.y.multiply(this.z).subtract(this.y.multiply(t.z)).mod(this.curve.p).signum()&&0===t.x.multiply(this.z).subtract(this.x.multiply(t.z)).mod(this.curve.p).signum())},Point.prototype.negate=function(){var t=this.curve.p.subtract(this.y);return new Point(this.curve,this.x,t,this.z)},Point.prototype.add=function(t){if(this.curve.isInfinity(this))return t;if(this.curve.isInfinity(t))return this;var i=this.x,e=this.y,r=t.x,n=t.y,s=n.multiply(this.z).subtract(e.multiply(t.z)).mod(this.curve.p),u=r.multiply(this.z).subtract(i.multiply(t.z)).mod(this.curve.p);if(0===u.signum())return 0===s.signum()?this.twice():this.curve.infinity;var h=u.square(),o=h.multiply(u),l=i.multiply(h),f=s.square().multiply(this.z),p=f.subtract(l.shiftLeft(1)).multiply(t.z).subtract(o).multiply(u).mod(this.curve.p),c=l.multiply(THREE).multiply(s).subtract(e.multiply(o)).subtract(f.multiply(s)).multiply(t.z).add(s.multiply(o)).mod(this.curve.p),y=o.multiply(this.z).multiply(t.z).mod(this.curve.p);return new Point(this.curve,p,c,y)},Point.prototype.twice=function(){if(this.curve.isInfinity(this))return this;if(0===this.y.signum())return this.curve.infinity;var t=this.x,i=this.y,e=i.multiply(this.z).mod(this.curve.p),r=e.multiply(i).mod(this.curve.p),n=this.curve.a,s=t.square().multiply(THREE);0!==n.signum()&&(s=s.add(this.z.square().multiply(n))),s=s.mod(this.curve.p);var u=s.square().subtract(t.shiftLeft(3).multiply(r)).shiftLeft(1).multiply(e).mod(this.curve.p),h=s.multiply(THREE).multiply(t).subtract(r.shiftLeft(1)).shiftLeft(2).multiply(r).subtract(s.pow(3)).mod(this.curve.p),o=e.pow(3).shiftLeft(3).mod(this.curve.p);return new Point(this.curve,u,h,o)},Point.prototype.multiply=function(t){if(this.curve.isInfinity(this))return this;if(0===t.signum())return this.curve.infinity;for(var i=t,e=i.multiply(THREE),r=this.negate(),n=this,s=e.bitLength()-2;s>0;--s){var u=e.testBit(s),h=i.testBit(s);n=n.twice(),u!==h&&(n=n.add(u?this:r))}return n},Point.prototype.multiplyTwo=function(t,i,e){for(var r=Math.max(t.bitLength(),e.bitLength())-1,n=this.curve.infinity,s=this.add(i);r>=0;){var u=t.testBit(r),h=e.testBit(r);n=n.twice(),u?n=h?n.add(s):n.add(this):h&&(n=n.add(i)),--r}return n},Point.prototype.getEncoded=function(t){if(null==t&&(t=this.compressed),this.curve.isInfinity(this))return new Buffer("00","hex");var i,e=this.affineX,r=this.affineY,n=this.curve.pLength;return t?(i=new Buffer(1+n),i.writeUInt8(r.isEven()?2:3,0)):(i=new Buffer(1+n+n),i.writeUInt8(4,0),r.toBuffer(n).copy(i,1+n)),e.toBuffer(n).copy(i,1),i},Point.decodeFrom=function(t,i){var e,r=i.readUInt8(0),n=4!==r,s=Math.floor((t.p.bitLength()+7)/8),u=BigInteger.fromBuffer(i.slice(1,1+s));if(n){assert.equal(i.length,s+1,"Invalid sequence length"),assert(2===r||3===r,"Invalid sequence tag");var h=3===r;e=t.pointFromX(h,u)}else{assert.equal(i.length,1+s+s,"Invalid sequence length");var o=BigInteger.fromBuffer(i.slice(1+s));e=Point.fromAffine(t,u,o)}return e.compressed=n,e},Point.prototype.toString=function(){return this.curve.isInfinity(this)?"(INFINITY)":"("+this.affineX.toString()+","+this.affineY.toString()+")"},module.exports=Point;

}).call(this,require("buffer").Buffer)

},{"assert":1,"bigi":6,"buffer":51}],63:[function(require,module,exports){
function EventEmitter(){this._events=this._events||{},this._maxListeners=this._maxListeners||void 0}function isFunction(e){return"function"==typeof e}function isNumber(e){return"number"==typeof e}function isObject(e){return"object"==typeof e&&null!==e}function isUndefined(e){return void 0===e}module.exports=EventEmitter,EventEmitter.EventEmitter=EventEmitter,EventEmitter.prototype._events=void 0,EventEmitter.prototype._maxListeners=void 0,EventEmitter.defaultMaxListeners=10,EventEmitter.prototype.setMaxListeners=function(e){if(!isNumber(e)||e<0||isNaN(e))throw TypeError("n must be a positive number");return this._maxListeners=e,this},EventEmitter.prototype.emit=function(e){var t,i,n,s,r,o;if(this._events||(this._events={}),"error"===e&&(!this._events.error||isObject(this._events.error)&&!this._events.error.length)){if((t=arguments[1])instanceof Error)throw t;var h=new Error('Uncaught, unspecified "error" event. ('+t+")");throw h.context=t,h}if(i=this._events[e],isUndefined(i))return!1;if(isFunction(i))switch(arguments.length){case 1:i.call(this);break;case 2:i.call(this,arguments[1]);break;case 3:i.call(this,arguments[1],arguments[2]);break;default:s=Array.prototype.slice.call(arguments,1),i.apply(this,s)}else if(isObject(i))for(s=Array.prototype.slice.call(arguments,1),o=i.slice(),n=o.length,r=0;r<n;r++)o[r].apply(this,s);return!0},EventEmitter.prototype.addListener=function(e,t){var i;if(!isFunction(t))throw TypeError("listener must be a function");return this._events||(this._events={}),this._events.newListener&&this.emit("newListener",e,isFunction(t.listener)?t.listener:t),this._events[e]?isObject(this._events[e])?this._events[e].push(t):this._events[e]=[this._events[e],t]:this._events[e]=t,isObject(this._events[e])&&!this._events[e].warned&&(i=isUndefined(this._maxListeners)?EventEmitter.defaultMaxListeners:this._maxListeners)&&i>0&&this._events[e].length>i&&(this._events[e].warned=!0,console.error("(node) warning: possible EventEmitter memory leak detected. %d listeners added. Use emitter.setMaxListeners() to increase limit.",this._events[e].length),"function"==typeof console.trace&&console.trace()),this},EventEmitter.prototype.on=EventEmitter.prototype.addListener,EventEmitter.prototype.once=function(e,t){function i(){this.removeListener(e,i),n||(n=!0,t.apply(this,arguments))}if(!isFunction(t))throw TypeError("listener must be a function");var n=!1;return i.listener=t,this.on(e,i),this},EventEmitter.prototype.removeListener=function(e,t){var i,n,s,r;if(!isFunction(t))throw TypeError("listener must be a function");if(!this._events||!this._events[e])return this;if(i=this._events[e],s=i.length,n=-1,i===t||isFunction(i.listener)&&i.listener===t)delete this._events[e],this._events.removeListener&&this.emit("removeListener",e,t);else if(isObject(i)){for(r=s;r-- >0;)if(i[r]===t||i[r].listener&&i[r].listener===t){n=r;break}if(n<0)return this;1===i.length?(i.length=0,delete this._events[e]):i.splice(n,1),this._events.removeListener&&this.emit("removeListener",e,t)}return this},EventEmitter.prototype.removeAllListeners=function(e){var t,i;if(!this._events)return this;if(!this._events.removeListener)return 0===arguments.length?this._events={}:this._events[e]&&delete this._events[e],this;if(0===arguments.length){for(t in this._events)"removeListener"!==t&&this.removeAllListeners(t);return this.removeAllListeners("removeListener"),this._events={},this}if(i=this._events[e],isFunction(i))this.removeListener(e,i);else if(i)for(;i.length;)this.removeListener(e,i[i.length-1]);return delete this._events[e],this},EventEmitter.prototype.listeners=function(e){return this._events&&this._events[e]?isFunction(this._events[e])?[this._events[e]]:this._events[e].slice():[]},EventEmitter.prototype.listenerCount=function(e){if(this._events){var t=this._events[e];if(isFunction(t))return 1;if(t)return t.length}return 0},EventEmitter.listenerCount=function(e,t){return e.listenerCount(t)};

},{}],64:[function(require,module,exports){
exports.read=function(a,o,t,r,h){var M,p,w=8*h-r-1,f=(1<<w)-1,e=f>>1,i=-7,N=t?h-1:0,n=t?-1:1,s=a[o+N];for(N+=n,M=s&(1<<-i)-1,s>>=-i,i+=w;i>0;M=256*M+a[o+N],N+=n,i-=8);for(p=M&(1<<-i)-1,M>>=-i,i+=r;i>0;p=256*p+a[o+N],N+=n,i-=8);if(0===M)M=1-e;else{if(M===f)return p?NaN:1/0*(s?-1:1);p+=Math.pow(2,r),M-=e}return(s?-1:1)*p*Math.pow(2,M-r)},exports.write=function(a,o,t,r,h,M){var p,w,f,e=8*M-h-1,i=(1<<e)-1,N=i>>1,n=23===h?Math.pow(2,-24)-Math.pow(2,-77):0,s=r?0:M-1,u=r?1:-1,l=o<0||0===o&&1/o<0?1:0;for(o=Math.abs(o),isNaN(o)||o===1/0?(w=isNaN(o)?1:0,p=i):(p=Math.floor(Math.log(o)/Math.LN2),o*(f=Math.pow(2,-p))<1&&(p--,f*=2),o+=p+N>=1?n/f:n*Math.pow(2,1-N),o*f>=2&&(p++,f/=2),p+N>=i?(w=0,p=i):p+N>=1?(w=(o*f-1)*Math.pow(2,h),p+=N):(w=o*Math.pow(2,N-1)*Math.pow(2,h),p=0));h>=8;a[t+s]=255&w,s+=u,w/=256,h-=8);for(p=p<<h|w,e+=h;e>0;a[t+s]=255&p,s+=u,p/=256,e-=8);a[t+s-u]|=128*l};

},{}],65:[function(require,module,exports){
"function"==typeof Object.create?module.exports=function(t,e){t.super_=e,t.prototype=Object.create(e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}})}:module.exports=function(t,e){t.super_=e;var o=function(){};o.prototype=e.prototype,t.prototype=new o,t.prototype.constructor=t};

},{}],66:[function(require,module,exports){
function isBuffer(f){return!!f.constructor&&"function"==typeof f.constructor.isBuffer&&f.constructor.isBuffer(f)}function isSlowBuffer(f){return"function"==typeof f.readFloatLE&&"function"==typeof f.slice&&isBuffer(f.slice(0,0))}module.exports=function(f){return null!=f&&(isBuffer(f)||isSlowBuffer(f)||!!f._isBuffer)};

},{}],67:[function(require,module,exports){
(function (Buffer){
module.exports=function(r,e){if(!Array.isArray(r))throw TypeError("Expected values Array");if("function"!=typeof e)throw TypeError("Expected digest Function");for(var o=r.length,t=r.concat();o>1;){for(var n=0,a=0;a<o;a+=2,++n){var c=Buffer.concat([t[a],a+1!==o?t[a+1]:t[a]]);t[n]=e(c)}o=n}return t[0]};

}).call(this,require("buffer").Buffer)

},{"buffer":51}],68:[function(require,module,exports){
(function (process){
"use strict";function nextTick(e,n,c,r){if("function"!=typeof e)throw new TypeError('"callback" argument must be a function');var s,t,o=arguments.length;switch(o){case 0:case 1:return process.nextTick(e);case 2:return process.nextTick(function(){e.call(null,n)});case 3:return process.nextTick(function(){e.call(null,n,c)});case 4:return process.nextTick(function(){e.call(null,n,c,r)});default:for(s=new Array(o-1),t=0;t<s.length;)s[t++]=arguments[t];return process.nextTick(function(){e.apply(null,s)})}}!process.version||0===process.version.indexOf("v0.")||0===process.version.indexOf("v1.")&&0!==process.version.indexOf("v1.8.")?module.exports=nextTick:module.exports=process.nextTick;

}).call(this,require('_process'))

},{"_process":69}],69:[function(require,module,exports){
function defaultSetTimout(){throw new Error("setTimeout has not been defined")}function defaultClearTimeout(){throw new Error("clearTimeout has not been defined")}function runTimeout(e){if(cachedSetTimeout===setTimeout)return setTimeout(e,0);if((cachedSetTimeout===defaultSetTimout||!cachedSetTimeout)&&setTimeout)return cachedSetTimeout=setTimeout,setTimeout(e,0);try{return cachedSetTimeout(e,0)}catch(t){try{return cachedSetTimeout.call(null,e,0)}catch(t){return cachedSetTimeout.call(this,e,0)}}}function runClearTimeout(e){if(cachedClearTimeout===clearTimeout)return clearTimeout(e);if((cachedClearTimeout===defaultClearTimeout||!cachedClearTimeout)&&clearTimeout)return cachedClearTimeout=clearTimeout,clearTimeout(e);try{return cachedClearTimeout(e)}catch(t){try{return cachedClearTimeout.call(null,e)}catch(t){return cachedClearTimeout.call(this,e)}}}function cleanUpNextTick(){draining&&currentQueue&&(draining=!1,currentQueue.length?queue=currentQueue.concat(queue):queueIndex=-1,queue.length&&drainQueue())}function drainQueue(){if(!draining){var e=runTimeout(cleanUpNextTick);draining=!0;for(var t=queue.length;t;){for(currentQueue=queue,queue=[];++queueIndex<t;)currentQueue&&currentQueue[queueIndex].run();queueIndex=-1,t=queue.length}currentQueue=null,draining=!1,runClearTimeout(e)}}function Item(e,t){this.fun=e,this.array=t}function noop(){}var process=module.exports={},cachedSetTimeout,cachedClearTimeout;!function(){try{cachedSetTimeout="function"==typeof setTimeout?setTimeout:defaultSetTimout}catch(e){cachedSetTimeout=defaultSetTimout}try{cachedClearTimeout="function"==typeof clearTimeout?clearTimeout:defaultClearTimeout}catch(e){cachedClearTimeout=defaultClearTimeout}}();var queue=[],draining=!1,currentQueue,queueIndex=-1;process.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var u=1;u<arguments.length;u++)t[u-1]=arguments[u];queue.push(new Item(e,t)),1!==queue.length||draining||runTimeout(drainQueue)},Item.prototype.run=function(){this.fun.apply(null,this.array)},process.title="browser",process.browser=!0,process.env={},process.argv=[],process.version="",process.versions={},process.on=noop,process.addListener=noop,process.once=noop,process.off=noop,process.removeListener=noop,process.removeAllListeners=noop,process.emit=noop,process.binding=function(e){throw new Error("process.binding is not supported")},process.cwd=function(){return"/"},process.chdir=function(e){throw new Error("process.chdir is not supported")},process.umask=function(){return 0};

},{}],70:[function(require,module,exports){
function encodingLength(e){return e<OPS.OP_PUSHDATA1?1:e<=255?2:e<=65535?3:5}function encode(e,n,t){var r=encodingLength(n);return 1===r?e.writeUInt8(n,t):2===r?(e.writeUInt8(OPS.OP_PUSHDATA1,t),e.writeUInt8(n,t+1)):3===r?(e.writeUInt8(OPS.OP_PUSHDATA2,t),e.writeUInt16LE(n,t+1)):(e.writeUInt8(OPS.OP_PUSHDATA4,t),e.writeUInt32LE(n,t+1)),r}function decode(e,n){var t,r,i=e.readUInt8(n);if(i<OPS.OP_PUSHDATA1)t=i,r=1;else if(i===OPS.OP_PUSHDATA1){if(n+2>e.length)return null;t=e.readUInt8(n+1),r=2}else if(i===OPS.OP_PUSHDATA2){if(n+3>e.length)return null;t=e.readUInt16LE(n+1),r=3}else{if(n+5>e.length)return null;if(i!==OPS.OP_PUSHDATA4)throw new Error("Unexpected opcode");t=e.readUInt32LE(n+1),r=5}return{opcode:i,number:t,size:r}}var OPS=require("bitcoin-ops");module.exports={encodingLength:encodingLength,encode:encode,decode:decode};

},{"bitcoin-ops":9}],71:[function(require,module,exports){
(function (process,global,Buffer){
"use strict";function oldBrowser(){throw new Error("secure random number generation not supported by this browser\nuse chrome, FireFox or Internet Explorer 11")}function randomBytes(r,o){if(r>65536)throw new Error("requested too many random bytes");var e=new global.Uint8Array(r);r>0&&crypto.getRandomValues(e);var t=new Buffer(e.buffer);return"function"==typeof o?process.nextTick(function(){o(null,t)}):t}var crypto=global.crypto||global.msCrypto;crypto&&crypto.getRandomValues?module.exports=randomBytes:module.exports=oldBrowser;

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer)

},{"_process":69,"buffer":51}],72:[function(require,module,exports){
module.exports=require("./lib/_stream_duplex.js");

},{"./lib/_stream_duplex.js":73}],73:[function(require,module,exports){
"use strict";function Duplex(e){if(!(this instanceof Duplex))return new Duplex(e);Readable.call(this,e),Writable.call(this,e),e&&e.readable===!1&&(this.readable=!1),e&&e.writable===!1&&(this.writable=!1),this.allowHalfOpen=!0,e&&e.allowHalfOpen===!1&&(this.allowHalfOpen=!1),this.once("end",onend)}function onend(){this.allowHalfOpen||this._writableState.ended||processNextTick(onEndNT,this)}function onEndNT(e){e.end()}function forEach(e,t){for(var r=0,i=e.length;r<i;r++)t(e[r],r)}var objectKeys=Object.keys||function(e){var t=[];for(var r in e)t.push(r);return t};module.exports=Duplex;var processNextTick=require("process-nextick-args"),util=require("core-util-is");util.inherits=require("inherits");var Readable=require("./_stream_readable"),Writable=require("./_stream_writable");util.inherits(Duplex,Readable);for(var keys=objectKeys(Writable.prototype),v=0;v<keys.length;v++){var method=keys[v];Duplex.prototype[method]||(Duplex.prototype[method]=Writable.prototype[method])}

},{"./_stream_readable":75,"./_stream_writable":77,"core-util-is":53,"inherits":65,"process-nextick-args":68}],74:[function(require,module,exports){
"use strict";function PassThrough(r){if(!(this instanceof PassThrough))return new PassThrough(r);Transform.call(this,r)}module.exports=PassThrough;var Transform=require("./_stream_transform"),util=require("core-util-is");util.inherits=require("inherits"),util.inherits(PassThrough,Transform),PassThrough.prototype._transform=function(r,s,i){i(null,r)};

},{"./_stream_transform":76,"core-util-is":53,"inherits":65}],75:[function(require,module,exports){
(function (process){
"use strict";function ReadableState(e,t){Duplex=Duplex||require("./_stream_duplex"),e=e||{},this.objectMode=!!e.objectMode,t instanceof Duplex&&(this.objectMode=this.objectMode||!!e.readableObjectMode);var r=e.highWaterMark,n=this.objectMode?16:16384;this.highWaterMark=r||0===r?r:n,this.highWaterMark=~~this.highWaterMark,this.buffer=[],this.length=0,this.pipes=null,this.pipesCount=0,this.flowing=null,this.ended=!1,this.endEmitted=!1,this.reading=!1,this.sync=!0,this.needReadable=!1,this.emittedReadable=!1,this.readableListening=!1,this.resumeScheduled=!1,this.defaultEncoding=e.defaultEncoding||"utf8",this.ranOut=!1,this.awaitDrain=0,this.readingMore=!1,this.decoder=null,this.encoding=null,e.encoding&&(StringDecoder||(StringDecoder=require("string_decoder/").StringDecoder),this.decoder=new StringDecoder(e.encoding),this.encoding=e.encoding)}function Readable(e){if(Duplex=Duplex||require("./_stream_duplex"),!(this instanceof Readable))return new Readable(e);this._readableState=new ReadableState(e,this),this.readable=!0,e&&"function"==typeof e.read&&(this._read=e.read),Stream.call(this)}function readableAddChunk(e,t,r,n,a){var i=chunkInvalid(t,r);if(i)e.emit("error",i);else if(null===r)t.reading=!1,onEofChunk(e,t);else if(t.objectMode||r&&r.length>0)if(t.ended&&!a){var d=new Error("stream.push() after EOF");e.emit("error",d)}else if(t.endEmitted&&a){var d=new Error("stream.unshift() after end event");e.emit("error",d)}else{var o;!t.decoder||a||n||(r=t.decoder.write(r),o=!t.objectMode&&0===r.length),a||(t.reading=!1),o||(t.flowing&&0===t.length&&!t.sync?(e.emit("data",r),e.read(0)):(t.length+=t.objectMode?1:r.length,a?t.buffer.unshift(r):t.buffer.push(r),t.needReadable&&emitReadable(e))),maybeReadMore(e,t)}else a||(t.reading=!1);return needMoreData(t)}function needMoreData(e){return!e.ended&&(e.needReadable||e.length<e.highWaterMark||0===e.length)}function computeNewHighWaterMark(e){return e>=MAX_HWM?e=MAX_HWM:(e--,e|=e>>>1,e|=e>>>2,e|=e>>>4,e|=e>>>8,e|=e>>>16,e++),e}function howMuchToRead(e,t){return 0===t.length&&t.ended?0:t.objectMode?0===e?0:1:null===e||isNaN(e)?t.flowing&&t.buffer.length?t.buffer[0].length:t.length:e<=0?0:(e>t.highWaterMark&&(t.highWaterMark=computeNewHighWaterMark(e)),e>t.length?t.ended?t.length:(t.needReadable=!0,0):e)}function chunkInvalid(e,t){var r=null;return Buffer.isBuffer(t)||"string"==typeof t||null===t||void 0===t||e.objectMode||(r=new TypeError("Invalid non-string/buffer chunk")),r}function onEofChunk(e,t){if(!t.ended){if(t.decoder){var r=t.decoder.end();r&&r.length&&(t.buffer.push(r),t.length+=t.objectMode?1:r.length)}t.ended=!0,emitReadable(e)}}function emitReadable(e){var t=e._readableState;t.needReadable=!1,t.emittedReadable||(debug("emitReadable",t.flowing),t.emittedReadable=!0,t.sync?processNextTick(emitReadable_,e):emitReadable_(e))}function emitReadable_(e){debug("emit readable"),e.emit("readable"),flow(e)}function maybeReadMore(e,t){t.readingMore||(t.readingMore=!0,processNextTick(maybeReadMore_,e,t))}function maybeReadMore_(e,t){for(var r=t.length;!t.reading&&!t.flowing&&!t.ended&&t.length<t.highWaterMark&&(debug("maybeReadMore read 0"),e.read(0),r!==t.length);)r=t.length;t.readingMore=!1}function pipeOnDrain(e){return function(){var t=e._readableState;debug("pipeOnDrain",t.awaitDrain),t.awaitDrain&&t.awaitDrain--,0===t.awaitDrain&&EElistenerCount(e,"data")&&(t.flowing=!0,flow(e))}}function nReadingNextTick(e){debug("readable nexttick read 0"),e.read(0)}function resume(e,t){t.resumeScheduled||(t.resumeScheduled=!0,processNextTick(resume_,e,t))}function resume_(e,t){t.reading||(debug("resume read 0"),e.read(0)),t.resumeScheduled=!1,e.emit("resume"),flow(e),t.flowing&&!t.reading&&e.read(0)}function flow(e){var t=e._readableState;if(debug("flow",t.flowing),t.flowing)do{var r=e.read()}while(null!==r&&t.flowing)}function fromList(e,t){var r,n=t.buffer,a=t.length,i=!!t.decoder,d=!!t.objectMode;if(0===n.length)return null;if(0===a)r=null;else if(d)r=n.shift();else if(!e||e>=a)r=i?n.join(""):1===n.length?n[0]:Buffer.concat(n,a),n.length=0;else if(e<n[0].length){var o=n[0];r=o.slice(0,e),n[0]=o.slice(e)}else if(e===n[0].length)r=n.shift();else{r=i?"":new Buffer(e);for(var l=0,u=0,s=n.length;u<s&&l<e;u++){var o=n[0],h=Math.min(e-l,o.length);i?r+=o.slice(0,h):o.copy(r,l,0,h),h<o.length?n[0]=o.slice(h):n.shift(),l+=h}}return r}function endReadable(e){var t=e._readableState;if(t.length>0)throw new Error("endReadable called on non-empty stream");t.endEmitted||(t.ended=!0,processNextTick(endReadableNT,t,e))}function endReadableNT(e,t){e.endEmitted||0!==e.length||(e.endEmitted=!0,t.readable=!1,t.emit("end"))}function forEach(e,t){for(var r=0,n=e.length;r<n;r++)t(e[r],r)}function indexOf(e,t){for(var r=0,n=e.length;r<n;r++)if(e[r]===t)return r;return-1}module.exports=Readable;var processNextTick=require("process-nextick-args"),isArray=require("isarray"),Buffer=require("buffer").Buffer;Readable.ReadableState=ReadableState;var EE=require("events"),EElistenerCount=function(e,t){return e.listeners(t).length},Stream;!function(){try{Stream=require("stream")}catch(e){}finally{Stream||(Stream=require("events").EventEmitter)}}();var Buffer=require("buffer").Buffer,util=require("core-util-is");util.inherits=require("inherits");var debugUtil=require("util"),debug=void 0;debug=debugUtil&&debugUtil.debuglog?debugUtil.debuglog("stream"):function(){};var StringDecoder;util.inherits(Readable,Stream);var Duplex,Duplex;Readable.prototype.push=function(e,t){var r=this._readableState;return r.objectMode||"string"!=typeof e||(t=t||r.defaultEncoding)!==r.encoding&&(e=new Buffer(e,t),t=""),readableAddChunk(this,r,e,t,!1)},Readable.prototype.unshift=function(e){return readableAddChunk(this,this._readableState,e,"",!0)},Readable.prototype.isPaused=function(){return this._readableState.flowing===!1},Readable.prototype.setEncoding=function(e){return StringDecoder||(StringDecoder=require("string_decoder/").StringDecoder),this._readableState.decoder=new StringDecoder(e),this._readableState.encoding=e,this};var MAX_HWM=8388608;Readable.prototype.read=function(e){debug("read",e);var t=this._readableState,r=e;if(("number"!=typeof e||e>0)&&(t.emittedReadable=!1),0===e&&t.needReadable&&(t.length>=t.highWaterMark||t.ended))return debug("read: emitReadable",t.length,t.ended),0===t.length&&t.ended?endReadable(this):emitReadable(this),null;if(0===(e=howMuchToRead(e,t))&&t.ended)return 0===t.length&&endReadable(this),null;var n=t.needReadable;debug("need readable",n),(0===t.length||t.length-e<t.highWaterMark)&&(n=!0,debug("length less than watermark",n)),(t.ended||t.reading)&&(n=!1,debug("reading or ended",n)),n&&(debug("do read"),t.reading=!0,t.sync=!0,0===t.length&&(t.needReadable=!0),this._read(t.highWaterMark),t.sync=!1),n&&!t.reading&&(e=howMuchToRead(r,t));var a;return a=e>0?fromList(e,t):null,null===a&&(t.needReadable=!0,e=0),t.length-=e,0!==t.length||t.ended||(t.needReadable=!0),r!==e&&t.ended&&0===t.length&&endReadable(this),null!==a&&this.emit("data",a),a},Readable.prototype._read=function(e){this.emit("error",new Error("not implemented"))},Readable.prototype.pipe=function(e,t){function r(e){debug("onunpipe"),e===s&&a()}function n(){debug("onend"),e.end()}function a(){debug("cleanup"),e.removeListener("close",o),e.removeListener("finish",l),e.removeListener("drain",c),e.removeListener("error",d),e.removeListener("unpipe",r),s.removeListener("end",n),s.removeListener("end",a),s.removeListener("data",i),b=!0,!h.awaitDrain||e._writableState&&!e._writableState.needDrain||c()}function i(t){debug("ondata"),!1===e.write(t)&&(1!==h.pipesCount||h.pipes[0]!==e||1!==s.listenerCount("data")||b||(debug("false write response, pause",s._readableState.awaitDrain),s._readableState.awaitDrain++),s.pause())}function d(t){debug("onerror",t),u(),e.removeListener("error",d),0===EElistenerCount(e,"error")&&e.emit("error",t)}function o(){e.removeListener("finish",l),u()}function l(){debug("onfinish"),e.removeListener("close",o),u()}function u(){debug("unpipe"),s.unpipe(e)}var s=this,h=this._readableState;switch(h.pipesCount){case 0:h.pipes=e;break;case 1:h.pipes=[h.pipes,e];break;default:h.pipes.push(e)}h.pipesCount+=1,debug("pipe count=%d opts=%j",h.pipesCount,t);var f=(!t||t.end!==!1)&&e!==process.stdout&&e!==process.stderr,p=f?n:a;h.endEmitted?processNextTick(p):s.once("end",p),e.on("unpipe",r);var c=pipeOnDrain(s);e.on("drain",c);var b=!1;return s.on("data",i),e._events&&e._events.error?isArray(e._events.error)?e._events.error.unshift(d):e._events.error=[d,e._events.error]:e.on("error",d),e.once("close",o),e.once("finish",l),e.emit("pipe",s),h.flowing||(debug("pipe resume"),s.resume()),e},Readable.prototype.unpipe=function(e){var t=this._readableState;if(0===t.pipesCount)return this;if(1===t.pipesCount)return e&&e!==t.pipes?this:(e||(e=t.pipes),t.pipes=null,t.pipesCount=0,t.flowing=!1,e&&e.emit("unpipe",this),this);if(!e){var r=t.pipes,n=t.pipesCount;t.pipes=null,t.pipesCount=0,t.flowing=!1;for(var a=0;a<n;a++)r[a].emit("unpipe",this);return this}var i=indexOf(t.pipes,e);return i===-1?this:(t.pipes.splice(i,1),t.pipesCount-=1,1===t.pipesCount&&(t.pipes=t.pipes[0]),e.emit("unpipe",this),this)},Readable.prototype.on=function(e,t){var r=Stream.prototype.on.call(this,e,t);if("data"===e&&!1!==this._readableState.flowing&&this.resume(),"readable"===e&&!this._readableState.endEmitted){var n=this._readableState;n.readableListening||(n.readableListening=!0,n.emittedReadable=!1,n.needReadable=!0,n.reading?n.length&&emitReadable(this,n):processNextTick(nReadingNextTick,this))}return r},Readable.prototype.addListener=Readable.prototype.on,Readable.prototype.resume=function(){var e=this._readableState;return e.flowing||(debug("resume"),e.flowing=!0,resume(this,e)),this},Readable.prototype.pause=function(){return debug("call pause flowing=%j",this._readableState.flowing),!1!==this._readableState.flowing&&(debug("pause"),this._readableState.flowing=!1,this.emit("pause")),this},Readable.prototype.wrap=function(e){var t=this._readableState,r=!1,n=this;e.on("end",function(){if(debug("wrapped end"),t.decoder&&!t.ended){var e=t.decoder.end();e&&e.length&&n.push(e)}n.push(null)}),e.on("data",function(a){if(debug("wrapped data"),t.decoder&&(a=t.decoder.write(a)),(!t.objectMode||null!==a&&void 0!==a)&&(t.objectMode||a&&a.length)){n.push(a)||(r=!0,e.pause())}});for(var a in e)void 0===this[a]&&"function"==typeof e[a]&&(this[a]=function(t){return function(){return e[t].apply(e,arguments)}}(a));return forEach(["error","close","destroy","pause","resume"],function(t){e.on(t,n.emit.bind(n,t))}),n._read=function(t){debug("wrapped _read",t),r&&(r=!1,e.resume())},n},Readable._fromList=fromList;

}).call(this,require('_process'))

},{"./_stream_duplex":73,"_process":69,"buffer":51,"core-util-is":53,"events":63,"inherits":65,"isarray":78,"process-nextick-args":68,"stream":92,"string_decoder/":93,"util":48}],76:[function(require,module,exports){
"use strict";function TransformState(r){this.afterTransform=function(t,n){return afterTransform(r,t,n)},this.needTransform=!1,this.transforming=!1,this.writecb=null,this.writechunk=null,this.writeencoding=null}function afterTransform(r,t,n){var e=r._transformState;e.transforming=!1;var i=e.writecb;if(!i)return r.emit("error",new Error("no writecb in Transform class"));e.writechunk=null,e.writecb=null,null!==n&&void 0!==n&&r.push(n),i(t);var a=r._readableState;a.reading=!1,(a.needReadable||a.length<a.highWaterMark)&&r._read(a.highWaterMark)}function Transform(r){if(!(this instanceof Transform))return new Transform(r);Duplex.call(this,r),this._transformState=new TransformState(this);var t=this;this._readableState.needReadable=!0,this._readableState.sync=!1,r&&("function"==typeof r.transform&&(this._transform=r.transform),"function"==typeof r.flush&&(this._flush=r.flush)),this.once("prefinish",function(){"function"==typeof this._flush?this._flush(function(r){done(t,r)}):done(t)})}function done(r,t){if(t)return r.emit("error",t);var n=r._writableState,e=r._transformState;if(n.length)throw new Error("calling transform done when ws.length != 0");if(e.transforming)throw new Error("calling transform done when still transforming");return r.push(null)}module.exports=Transform;var Duplex=require("./_stream_duplex"),util=require("core-util-is");util.inherits=require("inherits"),util.inherits(Transform,Duplex),Transform.prototype.push=function(r,t){return this._transformState.needTransform=!1,Duplex.prototype.push.call(this,r,t)},Transform.prototype._transform=function(r,t,n){throw new Error("not implemented")},Transform.prototype._write=function(r,t,n){var e=this._transformState;if(e.writecb=n,e.writechunk=r,e.writeencoding=t,!e.transforming){var i=this._readableState;(e.needTransform||i.needReadable||i.length<i.highWaterMark)&&this._read(i.highWaterMark)}},Transform.prototype._read=function(r){var t=this._transformState;null!==t.writechunk&&t.writecb&&!t.transforming?(t.transforming=!0,this._transform(t.writechunk,t.writeencoding,t.afterTransform)):t.needTransform=!0};

},{"./_stream_duplex":73,"core-util-is":53,"inherits":65}],77:[function(require,module,exports){
(function (process){
"use strict";function nop(){}function WriteReq(e,t,r){this.chunk=e,this.encoding=t,this.callback=r,this.next=null}function WritableState(e,t){Duplex=Duplex||require("./_stream_duplex"),e=e||{},this.objectMode=!!e.objectMode,t instanceof Duplex&&(this.objectMode=this.objectMode||!!e.writableObjectMode);var r=e.highWaterMark,i=this.objectMode?16:16384;this.highWaterMark=r||0===r?r:i,this.highWaterMark=~~this.highWaterMark,this.needDrain=!1,this.ending=!1,this.ended=!1,this.finished=!1;var n=e.decodeStrings===!1;this.decodeStrings=!n,this.defaultEncoding=e.defaultEncoding||"utf8",this.length=0,this.writing=!1,this.corked=0,this.sync=!0,this.bufferProcessing=!1,this.onwrite=function(e){onwrite(t,e)},this.writecb=null,this.writelen=0,this.bufferedRequest=null,this.lastBufferedRequest=null,this.pendingcb=0,this.prefinished=!1,this.errorEmitted=!1,this.bufferedRequestCount=0,this.corkedRequestsFree=new CorkedRequest(this),this.corkedRequestsFree.next=new CorkedRequest(this)}function Writable(e){if(Duplex=Duplex||require("./_stream_duplex"),!(this instanceof Writable||this instanceof Duplex))return new Writable(e);this._writableState=new WritableState(e,this),this.writable=!0,e&&("function"==typeof e.write&&(this._write=e.write),"function"==typeof e.writev&&(this._writev=e.writev)),Stream.call(this)}function writeAfterEnd(e,t){var r=new Error("write after end");e.emit("error",r),processNextTick(t,r)}function validChunk(e,t,r,i){var n=!0;if(!Buffer.isBuffer(r)&&"string"!=typeof r&&null!==r&&void 0!==r&&!t.objectMode){var s=new TypeError("Invalid non-string/buffer chunk");e.emit("error",s),processNextTick(i,s),n=!1}return n}function decodeChunk(e,t,r){return e.objectMode||e.decodeStrings===!1||"string"!=typeof t||(t=new Buffer(t,r)),t}function writeOrBuffer(e,t,r,i,n){r=decodeChunk(t,r,i),Buffer.isBuffer(r)&&(i="buffer");var s=t.objectMode?1:r.length;t.length+=s;var f=t.length<t.highWaterMark;if(f||(t.needDrain=!0),t.writing||t.corked){var u=t.lastBufferedRequest;t.lastBufferedRequest=new WriteReq(r,i,n),u?u.next=t.lastBufferedRequest:t.bufferedRequest=t.lastBufferedRequest,t.bufferedRequestCount+=1}else doWrite(e,t,!1,s,r,i,n);return f}function doWrite(e,t,r,i,n,s,f){t.writelen=i,t.writecb=f,t.writing=!0,t.sync=!0,r?e._writev(n,t.onwrite):e._write(n,s,t.onwrite),t.sync=!1}function onwriteError(e,t,r,i,n){--t.pendingcb,r?processNextTick(n,i):n(i),e._writableState.errorEmitted=!0,e.emit("error",i)}function onwriteStateUpdate(e){e.writing=!1,e.writecb=null,e.length-=e.writelen,e.writelen=0}function onwrite(e,t){var r=e._writableState,i=r.sync,n=r.writecb;if(onwriteStateUpdate(r),t)onwriteError(e,r,i,t,n);else{var s=needFinish(r);s||r.corked||r.bufferProcessing||!r.bufferedRequest||clearBuffer(e,r),i?asyncWrite(afterWrite,e,r,s,n):afterWrite(e,r,s,n)}}function afterWrite(e,t,r,i){r||onwriteDrain(e,t),t.pendingcb--,i(),finishMaybe(e,t)}function onwriteDrain(e,t){0===t.length&&t.needDrain&&(t.needDrain=!1,e.emit("drain"))}function clearBuffer(e,t){t.bufferProcessing=!0;var r=t.bufferedRequest;if(e._writev&&r&&r.next){var i=t.bufferedRequestCount,n=new Array(i),s=t.corkedRequestsFree;s.entry=r;for(var f=0;r;)n[f]=r,r=r.next,f+=1;doWrite(e,t,!0,t.length,n,"",s.finish),t.pendingcb++,t.lastBufferedRequest=null,t.corkedRequestsFree=s.next,s.next=null}else{for(;r;){var u=r.chunk,o=r.encoding,a=r.callback;if(doWrite(e,t,!1,t.objectMode?1:u.length,u,o,a),r=r.next,t.writing)break}null===r&&(t.lastBufferedRequest=null)}t.bufferedRequestCount=0,t.bufferedRequest=r,t.bufferProcessing=!1}function needFinish(e){return e.ending&&0===e.length&&null===e.bufferedRequest&&!e.finished&&!e.writing}function prefinish(e,t){t.prefinished||(t.prefinished=!0,e.emit("prefinish"))}function finishMaybe(e,t){var r=needFinish(t);return r&&(0===t.pendingcb?(prefinish(e,t),t.finished=!0,e.emit("finish")):prefinish(e,t)),r}function endWritable(e,t,r){t.ending=!0,finishMaybe(e,t),r&&(t.finished?processNextTick(r):e.once("finish",r)),t.ended=!0,e.writable=!1}function CorkedRequest(e){var t=this;this.next=null,this.entry=null,this.finish=function(r){var i=t.entry;for(t.entry=null;i;){var n=i.callback;e.pendingcb--,n(r),i=i.next}e.corkedRequestsFree?e.corkedRequestsFree.next=t:e.corkedRequestsFree=t}}module.exports=Writable;var processNextTick=require("process-nextick-args"),asyncWrite=!process.browser&&["v0.10","v0.9."].indexOf(process.version.slice(0,5))>-1?setImmediate:processNextTick,Buffer=require("buffer").Buffer;Writable.WritableState=WritableState;var util=require("core-util-is");util.inherits=require("inherits");var internalUtil={deprecate:require("util-deprecate")},Stream;!function(){try{Stream=require("stream")}catch(e){}finally{Stream||(Stream=require("events").EventEmitter)}}();var Buffer=require("buffer").Buffer;util.inherits(Writable,Stream);var Duplex;WritableState.prototype.getBuffer=function(){for(var e=this.bufferedRequest,t=[];e;)t.push(e),e=e.next;return t},function(){try{Object.defineProperty(WritableState.prototype,"buffer",{get:internalUtil.deprecate(function(){return this.getBuffer()},"_writableState.buffer is deprecated. Use _writableState.getBuffer instead.")})}catch(e){}}();var Duplex;Writable.prototype.pipe=function(){this.emit("error",new Error("Cannot pipe. Not readable."))},Writable.prototype.write=function(e,t,r){var i=this._writableState,n=!1;return"function"==typeof t&&(r=t,t=null),Buffer.isBuffer(e)?t="buffer":t||(t=i.defaultEncoding),"function"!=typeof r&&(r=nop),i.ended?writeAfterEnd(this,r):validChunk(this,i,e,r)&&(i.pendingcb++,n=writeOrBuffer(this,i,e,t,r)),n},Writable.prototype.cork=function(){this._writableState.corked++},Writable.prototype.uncork=function(){var e=this._writableState;e.corked&&(e.corked--,e.writing||e.corked||e.finished||e.bufferProcessing||!e.bufferedRequest||clearBuffer(this,e))},Writable.prototype.setDefaultEncoding=function(e){if("string"==typeof e&&(e=e.toLowerCase()),!(["hex","utf8","utf-8","ascii","binary","base64","ucs2","ucs-2","utf16le","utf-16le","raw"].indexOf((e+"").toLowerCase())>-1))throw new TypeError("Unknown encoding: "+e);this._writableState.defaultEncoding=e},Writable.prototype._write=function(e,t,r){r(new Error("not implemented"))},Writable.prototype._writev=null,Writable.prototype.end=function(e,t,r){var i=this._writableState;"function"==typeof e?(r=e,e=null,t=null):"function"==typeof t&&(r=t,t=null),null!==e&&void 0!==e&&this.write(e,t),i.corked&&(i.corked=1,this.uncork()),i.ending||i.finished||endWritable(this,i,r)};

}).call(this,require('_process'))

},{"./_stream_duplex":73,"_process":69,"buffer":51,"core-util-is":53,"events":63,"inherits":65,"process-nextick-args":68,"stream":92,"util-deprecate":98}],78:[function(require,module,exports){
var toString={}.toString;module.exports=Array.isArray||function(r){return"[object Array]"==toString.call(r)};

},{}],79:[function(require,module,exports){
module.exports=require("./lib/_stream_passthrough.js");

},{"./lib/_stream_passthrough.js":74}],80:[function(require,module,exports){
var Stream=function(){try{return require("stream")}catch(r){}}();exports=module.exports=require("./lib/_stream_readable.js"),exports.Stream=Stream||exports,exports.Readable=exports,exports.Writable=require("./lib/_stream_writable.js"),exports.Duplex=require("./lib/_stream_duplex.js"),exports.Transform=require("./lib/_stream_transform.js"),exports.PassThrough=require("./lib/_stream_passthrough.js");

},{"./lib/_stream_duplex.js":73,"./lib/_stream_passthrough.js":74,"./lib/_stream_readable.js":75,"./lib/_stream_transform.js":76,"./lib/_stream_writable.js":77,"stream":92}],81:[function(require,module,exports){
module.exports=require("./lib/_stream_transform.js");

},{"./lib/_stream_transform.js":76}],82:[function(require,module,exports){
module.exports=require("./lib/_stream_writable.js");

},{"./lib/_stream_writable.js":77}],83:[function(require,module,exports){
(function (Buffer){
function bytesToWords(r){for(var f=[],n=0,t=0;n<r.length;n++,t+=8)f[t>>>5]|=r[n]<<24-t%32;return f}function wordsToBytes(r){for(var f=[],n=0;n<32*r.length;n+=8)f.push(r[n>>>5]>>>24-n%32&255);return f}function processBlock(r,f,n){for(var t=0;t<16;t++){var o=n+t,e=f[o];f[o]=16711935&(e<<8|e>>>24)|4278255360&(e<<24|e>>>8)}var u,l,s,h,c,i,a,v,d,p;i=u=r[0],a=l=r[1],v=s=r[2],d=h=r[3],p=c=r[4];var g;for(t=0;t<80;t+=1)g=u+f[n+zl[t]]|0,g+=t<16?f1(l,s,h)+hl[0]:t<32?f2(l,s,h)+hl[1]:t<48?f3(l,s,h)+hl[2]:t<64?f4(l,s,h)+hl[3]:f5(l,s,h)+hl[4],g|=0,g=rotl(g,sl[t]),g=g+c|0,u=c,c=h,h=rotl(s,10),s=l,l=g,g=i+f[n+zr[t]]|0,g+=t<16?f5(a,v,d)+hr[0]:t<32?f4(a,v,d)+hr[1]:t<48?f3(a,v,d)+hr[2]:t<64?f2(a,v,d)+hr[3]:f1(a,v,d)+hr[4],g|=0,g=rotl(g,sr[t]),g=g+p|0,i=p,p=d,d=rotl(v,10),v=a,a=g;g=r[1]+s+d|0,r[1]=r[2]+h+p|0,r[2]=r[3]+c+i|0,r[3]=r[4]+u+a|0,r[4]=r[0]+l+v|0,r[0]=g}function f1(r,f,n){return r^f^n}function f2(r,f,n){return r&f|~r&n}function f3(r,f,n){return(r|~f)^n}function f4(r,f,n){return r&n|f&~n}function f5(r,f,n){return r^(f|~n)}function rotl(r,f){return r<<f|r>>>32-f}function ripemd160(r){var f=[1732584193,4023233417,2562383102,271733878,3285377520];"string"==typeof r&&(r=new Buffer(r,"utf8"));var n=bytesToWords(r),t=8*r.length,o=8*r.length;n[t>>>5]|=128<<24-t%32,n[14+(t+64>>>9<<4)]=16711935&(o<<8|o>>>24)|4278255360&(o<<24|o>>>8);for(var e=0;e<n.length;e+=16)processBlock(f,n,e);for(e=0;e<5;e++){var u=f[e];f[e]=16711935&(u<<8|u>>>24)|4278255360&(u<<24|u>>>8)}var l=wordsToBytes(f);return new Buffer(l)}var zl=[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,7,4,13,1,10,6,15,3,12,0,9,5,2,14,11,8,3,10,14,4,9,15,8,1,2,7,0,6,13,11,5,12,1,9,11,10,0,8,12,4,13,3,7,15,14,5,6,2,4,0,5,9,7,12,2,10,14,1,3,8,11,6,15,13],zr=[5,14,7,0,9,2,11,4,13,6,15,8,1,10,3,12,6,11,3,7,0,13,5,10,14,15,8,12,4,9,1,2,15,5,1,3,7,14,6,9,11,8,12,2,10,0,4,13,8,6,4,1,3,11,15,0,5,12,2,13,9,7,10,14,12,15,10,4,1,5,8,7,6,2,13,14,0,3,9,11],sl=[11,14,15,12,5,8,7,9,11,13,14,15,6,7,9,8,7,6,8,13,11,9,7,15,7,12,15,9,11,7,13,12,11,13,6,7,14,9,13,15,14,8,13,6,5,12,7,5,11,12,14,15,14,15,9,8,9,14,5,6,8,6,5,12,9,15,5,11,6,8,13,12,5,12,13,14,11,8,5,6],sr=[8,9,9,11,13,15,15,5,7,7,8,11,14,14,12,6,9,13,15,7,12,8,9,11,7,7,12,7,6,15,13,11,9,7,15,11,8,6,6,14,12,13,5,14,13,13,7,5,15,5,8,11,14,14,6,14,6,9,12,9,12,5,15,8,8,5,12,9,12,5,14,6,8,13,6,5,15,13,11,11],hl=[0,1518500249,1859775393,2400959708,2840853838],hr=[1352829926,1548603684,1836072691,2053994217,0];module.exports=ripemd160;

}).call(this,require("buffer").Buffer)

},{"buffer":51}],84:[function(require,module,exports){
(function (Buffer){
function Hash(t,i){this._block=new Buffer(t),this._finalSize=i,this._blockSize=t,this._len=0,this._s=0}Hash.prototype.update=function(t,i){"string"==typeof t&&(i=i||"utf8",t=new Buffer(t,i));for(var s=this._len+=t.length,e=this._s||0,h=0,o=this._block;e<s;){for(var l=Math.min(t.length,h+this._blockSize-e%this._blockSize),_=l-h,n=0;n<_;n++)o[e%this._blockSize+n]=t[n+h];e+=_,h+=_,e%this._blockSize==0&&this._update(o)}return this._s=e,this},Hash.prototype.digest=function(t){var i=8*this._len;this._block[this._len%this._blockSize]=128,this._block.fill(0,this._len%this._blockSize+1),i%(8*this._blockSize)>=8*this._finalSize&&(this._update(this._block),this._block.fill(0)),this._block.writeInt32BE(i,this._blockSize-4);var s=this._update(this._block)||this._hash();return t?s.toString(t):s},Hash.prototype._update=function(){throw new Error("_update must be implemented by subclass")},module.exports=Hash;

}).call(this,require("buffer").Buffer)

},{"buffer":51}],85:[function(require,module,exports){
var exports=module.exports=function(e){e=e.toLowerCase();var r=exports[e];if(!r)throw new Error(e+" is not supported (we accept pull requests)");return new r};exports.sha=require("./sha"),exports.sha1=require("./sha1"),exports.sha224=require("./sha224"),exports.sha256=require("./sha256"),exports.sha384=require("./sha384"),exports.sha512=require("./sha512");

},{"./sha":86,"./sha1":87,"./sha224":88,"./sha256":89,"./sha384":90,"./sha512":91}],86:[function(require,module,exports){
(function (Buffer){
function Sha(){this.init(),this._w=W,Hash.call(this,64,56)}function rotl5(t){return t<<5|t>>>27}function rotl30(t){return t<<30|t>>>2}function ft(t,i,h,r){return 0===t?i&h|~i&r:2===t?i&h|i&r|h&r:i^h^r}var inherits=require("inherits"),Hash=require("./hash"),K=[1518500249,1859775393,-1894007588,-899497514],W=new Array(80);inherits(Sha,Hash),Sha.prototype.init=function(){return this._a=1732584193,this._b=4023233417,this._c=2562383102,this._d=271733878,this._e=3285377520,this},Sha.prototype._update=function(t){for(var i=this._w,h=0|this._a,r=0|this._b,s=0|this._c,e=0|this._d,n=0|this._e,_=0;_<16;++_)i[_]=t.readInt32BE(4*_);for(;_<80;++_)i[_]=i[_-3]^i[_-8]^i[_-14]^i[_-16];for(var a=0;a<80;++a){var o=~~(a/20),u=rotl5(h)+ft(o,r,s,e)+n+i[a]+K[o]|0;n=e,e=s,s=rotl30(r),r=h,h=u}this._a=h+this._a|0,this._b=r+this._b|0,this._c=s+this._c|0,this._d=e+this._d|0,this._e=n+this._e|0},Sha.prototype._hash=function(){var t=new Buffer(20);return t.writeInt32BE(0|this._a,0),t.writeInt32BE(0|this._b,4),t.writeInt32BE(0|this._c,8),t.writeInt32BE(0|this._d,12),t.writeInt32BE(0|this._e,16),t},module.exports=Sha;

}).call(this,require("buffer").Buffer)

},{"./hash":84,"buffer":51,"inherits":65}],87:[function(require,module,exports){
(function (Buffer){
function Sha1(){this.init(),this._w=W,Hash.call(this,64,56)}function rotl1(t){return t<<1|t>>>31}function rotl5(t){return t<<5|t>>>27}function rotl30(t){return t<<30|t>>>2}function ft(t,i,h,r){return 0===t?i&h|~i&r:2===t?i&h|i&r|h&r:i^h^r}var inherits=require("inherits"),Hash=require("./hash"),K=[1518500249,1859775393,-1894007588,-899497514],W=new Array(80);inherits(Sha1,Hash),Sha1.prototype.init=function(){return this._a=1732584193,this._b=4023233417,this._c=2562383102,this._d=271733878,this._e=3285377520,this},Sha1.prototype._update=function(t){for(var i=this._w,h=0|this._a,r=0|this._b,s=0|this._c,n=0|this._d,e=0|this._e,_=0;_<16;++_)i[_]=t.readInt32BE(4*_);for(;_<80;++_)i[_]=rotl1(i[_-3]^i[_-8]^i[_-14]^i[_-16]);for(var a=0;a<80;++a){var o=~~(a/20),u=rotl5(h)+ft(o,r,s,n)+e+i[a]+K[o]|0;e=n,n=s,s=rotl30(r),r=h,h=u}this._a=h+this._a|0,this._b=r+this._b|0,this._c=s+this._c|0,this._d=n+this._d|0,this._e=e+this._e|0},Sha1.prototype._hash=function(){var t=new Buffer(20);return t.writeInt32BE(0|this._a,0),t.writeInt32BE(0|this._b,4),t.writeInt32BE(0|this._c,8),t.writeInt32BE(0|this._d,12),t.writeInt32BE(0|this._e,16),t},module.exports=Sha1;

}).call(this,require("buffer").Buffer)

},{"./hash":84,"buffer":51,"inherits":65}],88:[function(require,module,exports){
(function (Buffer){
function Sha224(){this.init(),this._w=W,Hash.call(this,64,56)}var inherits=require("inherits"),Sha256=require("./sha256"),Hash=require("./hash"),W=new Array(64);inherits(Sha224,Sha256),Sha224.prototype.init=function(){return this._a=3238371032,this._b=914150663,this._c=812702999,this._d=4144912697,this._e=4290775857,this._f=1750603025,this._g=1694076839,this._h=3204075428,this},Sha224.prototype._hash=function(){var t=new Buffer(28);return t.writeInt32BE(this._a,0),t.writeInt32BE(this._b,4),t.writeInt32BE(this._c,8),t.writeInt32BE(this._d,12),t.writeInt32BE(this._e,16),t.writeInt32BE(this._f,20),t.writeInt32BE(this._g,24),t},module.exports=Sha224;

}).call(this,require("buffer").Buffer)

},{"./hash":84,"./sha256":89,"buffer":51,"inherits":65}],89:[function(require,module,exports){
(function (Buffer){
function Sha256(){this.init(),this._w=W,Hash.call(this,64,56)}function ch(t,i,h){return h^t&(i^h)}function maj(t,i,h){return t&i|h&(t|i)}function sigma0(t){return(t>>>2|t<<30)^(t>>>13|t<<19)^(t>>>22|t<<10)}function sigma1(t){return(t>>>6|t<<26)^(t>>>11|t<<21)^(t>>>25|t<<7)}function gamma0(t){return(t>>>7|t<<25)^(t>>>18|t<<14)^t>>>3}function gamma1(t){return(t>>>17|t<<15)^(t>>>19|t<<13)^t>>>10}var inherits=require("inherits"),Hash=require("./hash"),K=[1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298],W=new Array(64);inherits(Sha256,Hash),Sha256.prototype.init=function(){return this._a=1779033703,this._b=3144134277,this._c=1013904242,this._d=2773480762,this._e=1359893119,this._f=2600822924,this._g=528734635,this._h=1541459225,this},Sha256.prototype._update=function(t){for(var i=this._w,h=0|this._a,s=0|this._b,r=0|this._c,n=0|this._d,_=0|this._e,a=0|this._f,e=0|this._g,u=0|this._h,o=0;o<16;++o)i[o]=t.readInt32BE(4*o);for(;o<64;++o)i[o]=gamma1(i[o-2])+i[o-7]+gamma0(i[o-15])+i[o-16]|0;for(var f=0;f<64;++f){var c=u+sigma1(_)+ch(_,a,e)+K[f]+i[f]|0,m=sigma0(h)+maj(h,s,r)|0;u=e,e=a,a=_,_=n+c|0,n=r,r=s,s=h,h=c+m|0}this._a=h+this._a|0,this._b=s+this._b|0,this._c=r+this._c|0,this._d=n+this._d|0,this._e=_+this._e|0,this._f=a+this._f|0,this._g=e+this._g|0,this._h=u+this._h|0},Sha256.prototype._hash=function(){var t=new Buffer(32);return t.writeInt32BE(this._a,0),t.writeInt32BE(this._b,4),t.writeInt32BE(this._c,8),t.writeInt32BE(this._d,12),t.writeInt32BE(this._e,16),t.writeInt32BE(this._f,20),t.writeInt32BE(this._g,24),t.writeInt32BE(this._h,28),t},module.exports=Sha256;

}).call(this,require("buffer").Buffer)

},{"./hash":84,"buffer":51,"inherits":65}],90:[function(require,module,exports){
(function (Buffer){
function Sha384(){this.init(),this._w=W,Hash.call(this,128,112)}var inherits=require("inherits"),SHA512=require("./sha512"),Hash=require("./hash"),W=new Array(160);inherits(Sha384,SHA512),Sha384.prototype.init=function(){return this._ah=3418070365,this._bh=1654270250,this._ch=2438529370,this._dh=355462360,this._eh=1731405415,this._fh=2394180231,this._gh=3675008525,this._hh=1203062813,this._al=3238371032,this._bl=914150663,this._cl=812702999,this._dl=4144912697,this._el=4290775857,this._fl=1750603025,this._gl=1694076839,this._hl=3204075428,this},Sha384.prototype._hash=function(){function h(h,i,s){t.writeInt32BE(h,s),t.writeInt32BE(i,s+4)}var t=new Buffer(48);return h(this._ah,this._al,0),h(this._bh,this._bl,8),h(this._ch,this._cl,16),h(this._dh,this._dl,24),h(this._eh,this._el,32),h(this._fh,this._fl,40),t},module.exports=Sha384;

}).call(this,require("buffer").Buffer)

},{"./hash":84,"./sha512":91,"buffer":51,"inherits":65}],91:[function(require,module,exports){
(function (Buffer){
function Sha512(){this.init(),this._w=W,Hash.call(this,128,112)}function Ch(h,t,i){return i^h&(t^i)}function maj(h,t,i){return h&t|i&(h|t)}function sigma0(h,t){return(h>>>28|t<<4)^(t>>>2|h<<30)^(t>>>7|h<<25)}function sigma1(h,t){return(h>>>14|t<<18)^(h>>>18|t<<14)^(t>>>9|h<<23)}function Gamma0(h,t){return(h>>>1|t<<31)^(h>>>8|t<<24)^h>>>7}function Gamma0l(h,t){return(h>>>1|t<<31)^(h>>>8|t<<24)^(h>>>7|t<<25)}function Gamma1(h,t){return(h>>>19|t<<13)^(t>>>29|h<<3)^h>>>6}function Gamma1l(h,t){return(h>>>19|t<<13)^(t>>>29|h<<3)^(h>>>6|t<<26)}function getCarry(h,t){return h>>>0<t>>>0?1:0}var inherits=require("inherits"),Hash=require("./hash"),K=[1116352408,3609767458,1899447441,602891725,3049323471,3964484399,3921009573,2173295548,961987163,4081628472,1508970993,3053834265,2453635748,2937671579,2870763221,3664609560,3624381080,2734883394,310598401,1164996542,607225278,1323610764,1426881987,3590304994,1925078388,4068182383,2162078206,991336113,2614888103,633803317,3248222580,3479774868,3835390401,2666613458,4022224774,944711139,264347078,2341262773,604807628,2007800933,770255983,1495990901,1249150122,1856431235,1555081692,3175218132,1996064986,2198950837,2554220882,3999719339,2821834349,766784016,2952996808,2566594879,3210313671,3203337956,3336571891,1034457026,3584528711,2466948901,113926993,3758326383,338241895,168717936,666307205,1188179964,773529912,1546045734,1294757372,1522805485,1396182291,2643833823,1695183700,2343527390,1986661051,1014477480,2177026350,1206759142,2456956037,344077627,2730485921,1290863460,2820302411,3158454273,3259730800,3505952657,3345764771,106217008,3516065817,3606008344,3600352804,1432725776,4094571909,1467031594,275423344,851169720,430227734,3100823752,506948616,1363258195,659060556,3750685593,883997877,3785050280,958139571,3318307427,1322822218,3812723403,1537002063,2003034995,1747873779,3602036899,1955562222,1575990012,2024104815,1125592928,2227730452,2716904306,2361852424,442776044,2428436474,593698344,2756734187,3733110249,3204031479,2999351573,3329325298,3815920427,3391569614,3928383900,3515267271,566280711,3940187606,3454069534,4118630271,4000239992,116418474,1914138554,174292421,2731055270,289380356,3203993006,460393269,320620315,685471733,587496836,852142971,1086792851,1017036298,365543100,1126000580,2618297676,1288033470,3409855158,1501505948,4234509866,1607167915,987167468,1816402316,1246189591],W=new Array(160);inherits(Sha512,Hash),Sha512.prototype.init=function(){return this._ah=1779033703,this._bh=3144134277,this._ch=1013904242,this._dh=2773480762,this._eh=1359893119,this._fh=2600822924,this._gh=528734635,this._hh=1541459225,this._al=4089235720,this._bl=2227873595,this._cl=4271175723,this._dl=1595750129,this._el=2917565137,this._fl=725511199,this._gl=4215389547,this._hl=327033209,this},Sha512.prototype._update=function(h){for(var t=this._w,i=0|this._ah,s=0|this._bh,_=0|this._ch,r=0|this._dh,a=0|this._eh,e=0|this._fh,l=0|this._gh,n=0|this._hh,g=0|this._al,f=0|this._bl,u=0|this._cl,c=0|this._dl,m=0|this._el,o=0|this._fl,y=0|this._gl,C=0|this._hl,d=0;d<32;d+=2)t[d]=h.readInt32BE(4*d),t[d+1]=h.readInt32BE(4*d+4);for(;d<160;d+=2){var b=t[d-30],p=t[d-30+1],v=Gamma0(b,p),G=Gamma0l(p,b);b=t[d-4],p=t[d-4+1];var w=Gamma1(b,p),S=Gamma1l(p,b),B=t[d-14],E=t[d-14+1],I=t[d-32],j=t[d-32+1],H=G+E|0,q=v+B+getCarry(H,G)|0;H=H+S|0,q=q+w+getCarry(H,S)|0,H=H+j|0,q=q+I+getCarry(H,j)|0,t[d]=q,t[d+1]=H}for(var W=0;W<160;W+=2){q=t[W],H=t[W+1];var x=maj(i,s,_),A=maj(g,f,u),k=sigma0(i,g),z=sigma0(g,i),D=sigma1(a,m),F=sigma1(m,a),J=K[W],L=K[W+1],M=Ch(a,e,l),N=Ch(m,o,y),O=C+F|0,P=n+D+getCarry(O,C)|0;O=O+N|0,P=P+M+getCarry(O,N)|0,O=O+L|0,P=P+J+getCarry(O,L)|0,O=O+H|0,P=P+q+getCarry(O,H)|0;var Q=z+A|0,R=k+x+getCarry(Q,z)|0;n=l,C=y,l=e,y=o,e=a,o=m,m=c+O|0,a=r+P+getCarry(m,c)|0,r=_,c=u,_=s,u=f,s=i,f=g,g=O+Q|0,i=P+R+getCarry(g,O)|0}this._al=this._al+g|0,this._bl=this._bl+f|0,this._cl=this._cl+u|0,this._dl=this._dl+c|0,this._el=this._el+m|0,this._fl=this._fl+o|0,this._gl=this._gl+y|0,this._hl=this._hl+C|0,this._ah=this._ah+i+getCarry(this._al,g)|0,this._bh=this._bh+s+getCarry(this._bl,f)|0,this._ch=this._ch+_+getCarry(this._cl,u)|0,this._dh=this._dh+r+getCarry(this._dl,c)|0,this._eh=this._eh+a+getCarry(this._el,m)|0,this._fh=this._fh+e+getCarry(this._fl,o)|0,this._gh=this._gh+l+getCarry(this._gl,y)|0,this._hh=this._hh+n+getCarry(this._hl,C)|0},Sha512.prototype._hash=function(){function h(h,i,s){t.writeInt32BE(h,s),t.writeInt32BE(i,s+4)}var t=new Buffer(64);return h(this._ah,this._al,0),h(this._bh,this._bl,8),h(this._ch,this._cl,16),h(this._dh,this._dl,24),h(this._eh,this._el,32),h(this._fh,this._fl,40),h(this._gh,this._gl,48),h(this._hh,this._hl,56),t},module.exports=Sha512;

}).call(this,require("buffer").Buffer)

},{"./hash":84,"buffer":51,"inherits":65}],92:[function(require,module,exports){
function Stream(){EE.call(this)}module.exports=Stream;var EE=require("events").EventEmitter;require("inherits")(Stream,EE),Stream.Readable=require("readable-stream/readable.js"),Stream.Writable=require("readable-stream/writable.js"),Stream.Duplex=require("readable-stream/duplex.js"),Stream.Transform=require("readable-stream/transform.js"),Stream.PassThrough=require("readable-stream/passthrough.js"),Stream.Stream=Stream,Stream.prototype.pipe=function(e,r){function t(r){e.writable&&!1===e.write(r)&&m.pause&&m.pause()}function a(){m.readable&&m.resume&&m.resume()}function n(){u||(u=!0,e.end())}function o(){u||(u=!0,"function"==typeof e.destroy&&e.destroy())}function s(e){if(i(),0===EE.listenerCount(this,"error"))throw e}function i(){m.removeListener("data",t),e.removeListener("drain",a),m.removeListener("end",n),m.removeListener("close",o),m.removeListener("error",s),e.removeListener("error",s),m.removeListener("end",i),m.removeListener("close",i),e.removeListener("close",i)}var m=this;m.on("data",t),e.on("drain",a),e._isStdio||r&&r.end===!1||(m.on("end",n),m.on("close",o));var u=!1;return m.on("error",s),e.on("error",s),m.on("end",i),m.on("close",i),e.on("close",i),e.emit("pipe",m),e};

},{"events":63,"inherits":65,"readable-stream/duplex.js":72,"readable-stream/passthrough.js":79,"readable-stream/readable.js":80,"readable-stream/transform.js":81,"readable-stream/writable.js":82}],93:[function(require,module,exports){
function assertEncoding(e){if(e&&!isBufferEncoding(e))throw new Error("Unknown encoding: "+e)}function passThroughWrite(e){return e.toString(this.encoding)}function utf16DetectIncompleteChar(e){this.charReceived=e.length%2,this.charLength=this.charReceived?2:0}function base64DetectIncompleteChar(e){this.charReceived=e.length%3,this.charLength=this.charReceived?3:0}var Buffer=require("buffer").Buffer,isBufferEncoding=Buffer.isEncoding||function(e){switch(e&&e.toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":case"raw":return!0;default:return!1}},StringDecoder=exports.StringDecoder=function(e){switch(this.encoding=(e||"utf8").toLowerCase().replace(/[-_]/,""),assertEncoding(e),this.encoding){case"utf8":this.surrogateSize=3;break;case"ucs2":case"utf16le":this.surrogateSize=2,this.detectIncompleteChar=utf16DetectIncompleteChar;break;case"base64":this.surrogateSize=3,this.detectIncompleteChar=base64DetectIncompleteChar;break;default:return void(this.write=passThroughWrite)}this.charBuffer=new Buffer(6),this.charReceived=0,this.charLength=0};StringDecoder.prototype.write=function(e){for(var t="";this.charLength;){var r=e.length>=this.charLength-this.charReceived?this.charLength-this.charReceived:e.length;if(e.copy(this.charBuffer,this.charReceived,0,r),this.charReceived+=r,this.charReceived<this.charLength)return"";e=e.slice(r,e.length),t=this.charBuffer.slice(0,this.charLength).toString(this.encoding);var h=t.charCodeAt(t.length-1);if(!(h>=55296&&h<=56319)){if(this.charReceived=this.charLength=0,0===e.length)return t;break}this.charLength+=this.surrogateSize,t=""}this.detectIncompleteChar(e);var i=e.length;this.charLength&&(e.copy(this.charBuffer,0,e.length-this.charReceived,i),i-=this.charReceived),t+=e.toString(this.encoding,0,i);var i=t.length-1,h=t.charCodeAt(i);if(h>=55296&&h<=56319){var c=this.surrogateSize;return this.charLength+=c,this.charReceived+=c,this.charBuffer.copy(this.charBuffer,c,0,c),e.copy(this.charBuffer,0,0,c),t.substring(0,i)}return t},StringDecoder.prototype.detectIncompleteChar=function(e){for(var t=e.length>=3?3:e.length;t>0;t--){var r=e[e.length-t];if(1==t&&r>>5==6){this.charLength=2;break}if(t<=2&&r>>4==14){this.charLength=3;break}if(t<=3&&r>>3==30){this.charLength=4;break}}this.charReceived=t},StringDecoder.prototype.end=function(e){var t="";if(e&&e.length&&(t=this.write(e)),this.charReceived){var r=this.charReceived,h=this.charBuffer,i=this.encoding;t+=h.slice(0,r).toString(i)}return t};

},{"buffer":51}],94:[function(require,module,exports){
function TfTypeError(r,e,t){this.__error=Error.call(this),this.__type=r,this.__value=e,this.__valueTypeName=t;var o;Object.defineProperty(this,"message",{enumerable:!0,get:function(){return o?o:(t=t||getValueTypeName(e),o=tfErrorString(r,e,t))}})}function TfPropertyTypeError(r,e,t,o,n,i){this.__error=n||Error.call(this),this.__label=t,this.__property=e,this.__type=r,this.__value=o,this.__valueTypeName=i;var a;Object.defineProperty(this,"message",{enumerable:!0,get:function(){return a?a:(r?(i=i||getValueTypeName(o),a=tfPropertyErrorString(r,t,e,o,i)):a='Unexpected property "'+e+'"',a)}})}function tfCustomError(r,e){return new TfTypeError(r,{},e)}function tfSubError(r,e,t){return r instanceof TfPropertyTypeError?(e=e+"."+r.__property,t=r.__label,new TfPropertyTypeError(r.__type,e,t,r.__value,r.__error,r.__valueTypeName)):r instanceof TfTypeError?new TfPropertyTypeError(r.__type,e,t,r.__value,r.__error,r.__valueTypeName):r}function getTypeName(r){return r.name||r.toString().match(/function (.*?)\s*\(/)[1]}function getValueTypeName(r){return native.Null(r)?"":getTypeName(r.constructor)}function getValue(r){return native.Function(r)?"":native.String(r)?JSON.stringify(r):r&&native.Object(r)?"":r}function tfJSON(r){return native.Function(r)?r.toJSON?r.toJSON():getTypeName(r):native.Array(r)?"Array":r&&native.Object(r)?"Object":void 0!==r?r:""}function tfErrorString(r,e,t){var o=getValue(e);return"Expected "+tfJSON(r)+", got"+(""!==t?" "+t:"")+(""!==o?" "+o:"")}function tfPropertyErrorString(r,e,t,o,n){var i='" of type ';return"key"===e&&(i='" with key type '),tfErrorString('property "'+tfJSON(t)+i+tfJSON(r),o,n)}var inherits=require("inherits"),native=require("./native");[TfTypeError,TfPropertyTypeError].forEach(function(r){inherits(r,Error),Object.defineProperty(r,"stack",{get:function(){return this.__error.stack}})}),module.exports={TfTypeError:TfTypeError,TfPropertyTypeError:TfPropertyTypeError,tfCustomError:tfCustomError,tfSubError:tfSubError,tfJSON:tfJSON,getValueTypeName:getValueTypeName};

},{"./native":97,"inherits":65}],95:[function(require,module,exports){
(function (Buffer){
function _Buffer(n){return Buffer.isBuffer(n)}function _BufferN(n){function t(t){if(!Buffer.isBuffer(t))return!1;if(t.length!==n)throw errors.tfCustomError("Buffer(Length: "+n+")","Buffer(Length: "+t.length+")");return!0}return t.toJSON=function(){return"Buffer"},t}function Hex(n){return"string"==typeof n&&/^([0-9a-f]{2})+$/i.test(n)}function _HexN(n){function t(t){if(!Hex(t))return!1;if(t.length!==n)throw errors.tfCustomError("Hex(Length: "+n+")","Hex(Length: "+t.length+")");return!0}return t.toJSON=function(){return"Hex"},t}function Finite(n){return"number"==typeof n&&isFinite(n)}function Int8(n){return n<<24>>24===n}function Int16(n){return n<<16>>16===n}function Int32(n){return(0|n)===n}function UInt8(n){return(255&n)===n}function UInt16(n){return(65535&n)===n}function UInt32(n){return n>>>0===n}function UInt53(n){return"number"==typeof n&&n>=0&&n<=UINT53_MAX&&Math.floor(n)===n}var errors=require("./errors");_Buffer.toJSON=function(){return"Buffer"};var UINT53_MAX=Math.pow(2,53)-1;module.exports={Buffer:_Buffer,BufferN:_BufferN,Finite:Finite,Hex:Hex,HexN:_HexN,Int8:Int8,Int16:Int16,Int32:Int32,UInt8:UInt8,UInt16:UInt16,UInt32:UInt32,UInt53:UInt53};

}).call(this,{"isBuffer":require("../is-buffer/index.js")})

},{"../is-buffer/index.js":66,"./errors":94}],96:[function(require,module,exports){
function compile(r){return NATIVE.String(r)?"?"===r[0]?TYPES.maybe(compile(r.slice(1))):NATIVE[r]||TYPES.quacksLike(r):r&&NATIVE.Object(r)?NATIVE.Array(r)?TYPES.arrayOf(compile(r[0])):TYPES.object(r):NATIVE.Function(r)?r:TYPES.value(r)}function typeforce(r,e,t,n){if(NATIVE.Function(r)){if(r(e,t))return!0;throw new TfTypeError(n||r,e)}return typeforce(compile(r),e,t)}function __async(r,e,t,n){if("function"==typeof t)return __async(r,e,!1,t);try{typeforce(r,e,t)}catch(r){return n(r)}n()}var ERRORS=require("./errors"),NATIVE=require("./native"),tfJSON=ERRORS.tfJSON,TfTypeError=ERRORS.TfTypeError,TfPropertyTypeError=ERRORS.TfPropertyTypeError,tfSubError=ERRORS.tfSubError,getValueTypeName=ERRORS.getValueTypeName,TYPES={arrayOf:function(r){function e(e,t){return!!NATIVE.Array(e)&&e.every(function(e,n){try{return typeforce(r,e,t)}catch(r){throw tfSubError(r,n)}})}return r=compile(r),e.toJSON=function(){return"["+tfJSON(r)+"]"},e},maybe:function r(e){function t(t,n){return NATIVE.Null(t)||e(t,n,r)}return e=compile(e),t.toJSON=function(){return"?"+tfJSON(e)},t},map:function(r,e){function t(t,n){if(!NATIVE.Object(t,n))return!1;if(NATIVE.Null(t,n))return!1;for(var o in t){try{e&&typeforce(e,o,n)}catch(r){throw tfSubError(r,o,"key")}try{typeforce(r,t[o],n)}catch(r){throw tfSubError(r,o)}}return!0}return r=compile(r),e&&(e=compile(e)),t.toJSON=e?function(){return"{"+tfJSON(e)+": "+tfJSON(r)+"}"}:function(){return"{"+tfJSON(r)+"}"},t},object:function(r){function e(r,e){if(!NATIVE.Object(r))return!1;if(NATIVE.Null(r))return!1;var n;try{for(n in t){typeforce(t[n],r[n],e)}}catch(r){throw tfSubError(r,n)}if(e)for(n in r)if(!t[n])throw new TfPropertyTypeError(void 0,n);return!0}var t={};for(var n in r)t[n]=compile(r[n]);return e.toJSON=function(){return tfJSON(t)},e},oneOf:function(){function r(r,t){return e.some(function(e){try{return typeforce(e,r,t)}catch(r){return!1}})}var e=[].slice.call(arguments).map(compile);return r.toJSON=function(){return e.map(tfJSON).join("|")},r},quacksLike:function(r){function e(e){return r===getValueTypeName(e)}return e.toJSON=function(){return r},e},tuple:function(){function r(r,t){return e.every(function(e,n){try{return typeforce(e,r[n],t)}catch(r){throw tfSubError(r,n)}})&&(!t||r.length===arguments.length)}var e=[].slice.call(arguments).map(compile);return r.toJSON=function(){return"("+e.map(tfJSON).join(", ")+")"},r},value:function(r){function e(e){return e===r}return e.toJSON=function(){return r},e}};for(var typeName in NATIVE)typeforce[typeName]=NATIVE[typeName];for(typeName in TYPES)typeforce[typeName]=TYPES[typeName];var extra=require("./extra");for(typeName in extra)typeforce[typeName]=extra[typeName];typeforce.async=__async,typeforce.compile=compile,typeforce.TfTypeError=TfTypeError,typeforce.TfPropertyTypeError=TfPropertyTypeError,module.exports=typeforce;

},{"./errors":94,"./extra":95,"./native":97}],97:[function(require,module,exports){
var types={Array:function(n){return null!==n&&void 0!==n&&n.constructor===Array},Boolean:function(n){return"boolean"==typeof n},Function:function(n){return"function"==typeof n},Null:function(n){return void 0===n||null===n},Number:function(n){return"number"==typeof n},Object:function(n){return"object"==typeof n},String:function(n){return"string"==typeof n},"":function(){return!0}};for(var typeName in types)types[typeName].toJSON=function(n){return n}.bind(null,typeName);module.exports=types;

},{}],98:[function(require,module,exports){
(function (global){
function deprecate(r,e){function o(){if(!t){if(config("throwDeprecation"))throw new Error(e);config("traceDeprecation")?console.trace(e):console.warn(e),t=!0}return r.apply(this,arguments)}if(config("noDeprecation"))return r;var t=!1;return o}function config(r){try{if(!global.localStorage)return!1}catch(r){return!1}var e=global.localStorage[r];return null!=e&&"true"===String(e).toLowerCase()}module.exports=deprecate;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],99:[function(require,module,exports){
"function"==typeof Object.create?module.exports=function(t,e){t.super_=e,t.prototype=Object.create(e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}})}:module.exports=function(t,e){t.super_=e;var o=function(){};o.prototype=e.prototype,t.prototype=new o,t.prototype.constructor=t};

},{}],100:[function(require,module,exports){
module.exports=function(o){return o&&"object"==typeof o&&"function"==typeof o.copy&&"function"==typeof o.fill&&"function"==typeof o.readUInt8};

},{}],101:[function(require,module,exports){
(function (process,global){
function inspect(e,r){var t={seen:[],stylize:stylizeNoColor};return arguments.length>=3&&(t.depth=arguments[2]),arguments.length>=4&&(t.colors=arguments[3]),isBoolean(r)?t.showHidden=r:r&&exports._extend(t,r),isUndefined(t.showHidden)&&(t.showHidden=!1),isUndefined(t.depth)&&(t.depth=2),isUndefined(t.colors)&&(t.colors=!1),isUndefined(t.customInspect)&&(t.customInspect=!0),t.colors&&(t.stylize=stylizeWithColor),formatValue(t,e,t.depth)}function stylizeWithColor(e,r){var t=inspect.styles[r];return t?"["+inspect.colors[t][0]+"m"+e+"["+inspect.colors[t][1]+"m":e}function stylizeNoColor(e,r){return e}function arrayToHash(e){var r={};return e.forEach(function(e,t){r[e]=!0}),r}function formatValue(e,r,t){if(e.customInspect&&r&&isFunction(r.inspect)&&r.inspect!==exports.inspect&&(!r.constructor||r.constructor.prototype!==r)){var n=r.inspect(t,e);return isString(n)||(n=formatValue(e,n,t)),n}var i=formatPrimitive(e,r);if(i)return i;var o=Object.keys(r),s=arrayToHash(o);if(e.showHidden&&(o=Object.getOwnPropertyNames(r)),isError(r)&&(o.indexOf("message")>=0||o.indexOf("description")>=0))return formatError(r);if(0===o.length){if(isFunction(r)){var u=r.name?": "+r.name:"";return e.stylize("[Function"+u+"]","special")}if(isRegExp(r))return e.stylize(RegExp.prototype.toString.call(r),"regexp");if(isDate(r))return e.stylize(Date.prototype.toString.call(r),"date");if(isError(r))return formatError(r)}var c="",a=!1,l=["{","}"];if(isArray(r)&&(a=!0,l=["[","]"]),isFunction(r)){c=" [Function"+(r.name?": "+r.name:"")+"]"}if(isRegExp(r)&&(c=" "+RegExp.prototype.toString.call(r)),isDate(r)&&(c=" "+Date.prototype.toUTCString.call(r)),isError(r)&&(c=" "+formatError(r)),0===o.length&&(!a||0==r.length))return l[0]+c+l[1];if(t<0)return isRegExp(r)?e.stylize(RegExp.prototype.toString.call(r),"regexp"):e.stylize("[Object]","special");e.seen.push(r);var p;return p=a?formatArray(e,r,t,s,o):o.map(function(n){return formatProperty(e,r,t,s,n,a)}),e.seen.pop(),reduceToSingleString(p,c,l)}function formatPrimitive(e,r){if(isUndefined(r))return e.stylize("undefined","undefined");if(isString(r)){var t="'"+JSON.stringify(r).replace(/^"|"$/g,"").replace(/'/g,"\\'").replace(/\\"/g,'"')+"'";return e.stylize(t,"string")}return isNumber(r)?e.stylize(""+r,"number"):isBoolean(r)?e.stylize(""+r,"boolean"):isNull(r)?e.stylize("null","null"):void 0}function formatError(e){return"["+Error.prototype.toString.call(e)+"]"}function formatArray(e,r,t,n,i){for(var o=[],s=0,u=r.length;s<u;++s)hasOwnProperty(r,String(s))?o.push(formatProperty(e,r,t,n,String(s),!0)):o.push("");return i.forEach(function(i){i.match(/^\d+$/)||o.push(formatProperty(e,r,t,n,i,!0))}),o}function formatProperty(e,r,t,n,i,o){var s,u,c;if(c=Object.getOwnPropertyDescriptor(r,i)||{value:r[i]},c.get?u=c.set?e.stylize("[Getter/Setter]","special"):e.stylize("[Getter]","special"):c.set&&(u=e.stylize("[Setter]","special")),hasOwnProperty(n,i)||(s="["+i+"]"),u||(e.seen.indexOf(c.value)<0?(u=isNull(t)?formatValue(e,c.value,null):formatValue(e,c.value,t-1),u.indexOf("\n")>-1&&(u=o?u.split("\n").map(function(e){return"  "+e}).join("\n").substr(2):"\n"+u.split("\n").map(function(e){return"   "+e}).join("\n"))):u=e.stylize("[Circular]","special")),isUndefined(s)){if(o&&i.match(/^\d+$/))return u;s=JSON.stringify(""+i),s.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)?(s=s.substr(1,s.length-2),s=e.stylize(s,"name")):(s=s.replace(/'/g,"\\'").replace(/\\"/g,'"').replace(/(^"|"$)/g,"'"),s=e.stylize(s,"string"))}return s+": "+u}function reduceToSingleString(e,r,t){var n=0;return e.reduce(function(e,r){return n++,r.indexOf("\n")>=0&&n++,e+r.replace(/\u001b\[\d\d?m/g,"").length+1},0)>60?t[0]+(""===r?"":r+"\n ")+" "+e.join(",\n  ")+" "+t[1]:t[0]+r+" "+e.join(", ")+" "+t[1]}function isArray(e){return Array.isArray(e)}function isBoolean(e){return"boolean"==typeof e}function isNull(e){return null===e}function isNullOrUndefined(e){return null==e}function isNumber(e){return"number"==typeof e}function isString(e){return"string"==typeof e}function isSymbol(e){return"symbol"==typeof e}function isUndefined(e){return void 0===e}function isRegExp(e){return isObject(e)&&"[object RegExp]"===objectToString(e)}function isObject(e){return"object"==typeof e&&null!==e}function isDate(e){return isObject(e)&&"[object Date]"===objectToString(e)}function isError(e){return isObject(e)&&("[object Error]"===objectToString(e)||e instanceof Error)}function isFunction(e){return"function"==typeof e}function isPrimitive(e){return null===e||"boolean"==typeof e||"number"==typeof e||"string"==typeof e||"symbol"==typeof e||void 0===e}function objectToString(e){return Object.prototype.toString.call(e)}function pad(e){return e<10?"0"+e.toString(10):e.toString(10)}function timestamp(){var e=new Date,r=[pad(e.getHours()),pad(e.getMinutes()),pad(e.getSeconds())].join(":");return[e.getDate(),months[e.getMonth()],r].join(" ")}function hasOwnProperty(e,r){return Object.prototype.hasOwnProperty.call(e,r)}var formatRegExp=/%[sdj%]/g;exports.format=function(e){if(!isString(e)){for(var r=[],t=0;t<arguments.length;t++)r.push(inspect(arguments[t]));return r.join(" ")}for(var t=1,n=arguments,i=n.length,o=String(e).replace(formatRegExp,function(e){if("%%"===e)return"%";if(t>=i)return e;switch(e){case"%s":return String(n[t++]);case"%d":return Number(n[t++]);case"%j":try{return JSON.stringify(n[t++])}catch(e){return"[Circular]"}default:return e}}),s=n[t];t<i;s=n[++t])o+=isNull(s)||!isObject(s)?" "+s:" "+inspect(s);return o},exports.deprecate=function(e,r){function t(){if(!n){if(process.throwDeprecation)throw new Error(r);process.traceDeprecation?console.trace(r):console.error(r),n=!0}return e.apply(this,arguments)}if(isUndefined(global.process))return function(){return exports.deprecate(e,r).apply(this,arguments)};if(process.noDeprecation===!0)return e;var n=!1;return t};var debugs={},debugEnviron;exports.debuglog=function(e){if(isUndefined(debugEnviron)&&(debugEnviron=process.env.NODE_DEBUG||""),e=e.toUpperCase(),!debugs[e])if(new RegExp("\\b"+e+"\\b","i").test(debugEnviron)){var r=process.pid;debugs[e]=function(){var t=exports.format.apply(exports,arguments);console.error("%s %d: %s",e,r,t)}}else debugs[e]=function(){};return debugs[e]},exports.inspect=inspect,inspect.colors={bold:[1,22],italic:[3,23],underline:[4,24],inverse:[7,27],white:[37,39],grey:[90,39],black:[30,39],blue:[34,39],cyan:[36,39],green:[32,39],magenta:[35,39],red:[31,39],yellow:[33,39]},inspect.styles={special:"cyan",number:"yellow",boolean:"yellow",undefined:"grey",null:"bold",string:"green",date:"magenta",regexp:"red"},exports.isArray=isArray,exports.isBoolean=isBoolean,exports.isNull=isNull,exports.isNullOrUndefined=isNullOrUndefined,exports.isNumber=isNumber,exports.isString=isString,exports.isSymbol=isSymbol,exports.isUndefined=isUndefined,exports.isRegExp=isRegExp,exports.isObject=isObject,exports.isDate=isDate,exports.isError=isError,exports.isFunction=isFunction,exports.isPrimitive=isPrimitive,exports.isBuffer=require("./support/isBuffer");var months=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];exports.log=function(){console.log("%s - %s",timestamp(),exports.format.apply(exports,arguments))},exports.inherits=require("inherits"),exports._extend=function(e,r){if(!r||!isObject(r))return e;for(var t=Object.keys(r),n=t.length;n--;)e[t[n]]=r[t[n]];return e};

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./support/isBuffer":100,"_process":69,"inherits":99}],102:[function(require,module,exports){
(function (Buffer){
"use strict";function checkUInt53(e){if(e<0||e>MAX_SAFE_INTEGER||e%1!=0)throw new RangeError("value out of range")}function encode(e,n,t){if(checkUInt53(e),n||(n=new Buffer(encodingLength(e))),!Buffer.isBuffer(n))throw new TypeError("buffer must be a Buffer instance");return t||(t=0),e<253?(n.writeUInt8(e,t),encode.bytes=1):e<=65535?(n.writeUInt8(253,t),n.writeUInt16LE(e,t+1),encode.bytes=3):e<=4294967295?(n.writeUInt8(254,t),n.writeUInt32LE(e,t+1),encode.bytes=5):(n.writeUInt8(255,t),n.writeUInt32LE(e>>>0,t+1),n.writeUInt32LE(e/4294967296|0,t+5),encode.bytes=9),n}function decode(e,n){if(!Buffer.isBuffer(e))throw new TypeError("buffer must be a Buffer instance");n||(n=0);var t=e.readUInt8(n);if(t<253)return decode.bytes=1,t;if(253===t)return decode.bytes=3,e.readUInt16LE(n+1);if(254===t)return decode.bytes=5,e.readUInt32LE(n+1);decode.bytes=9;var r=e.readUInt32LE(n+1),c=e.readUInt32LE(n+5),o=4294967296*c+r;return checkUInt53(o),o}function encodingLength(e){return checkUInt53(e),e<253?1:e<=65535?3:e<=4294967295?5:9}var MAX_SAFE_INTEGER=9007199254740991;module.exports={encode:encode,decode:decode,encodingLength:encodingLength};

}).call(this,require("buffer").Buffer)

},{"buffer":51}],103:[function(require,module,exports){
(function (Buffer){
function decodeRaw(e,o){if(void 0!==o&&e[0]!==o)throw new Error("Invalid network version");if(33===e.length)return{version:e[0],privateKey:e.slice(1,33),compressed:!1};if(34!==e.length)throw new Error("Invalid WIF length");if(1!==e[33])throw new Error("Invalid compression flag");return{version:e[0],privateKey:e.slice(1,33),compressed:!0}}function encodeRaw(e,o,r){var n=new Buffer(r?34:33);return n.writeUInt8(e,0),o.copy(n,1),r&&(n[33]=1),n}function decode(e,o){return decodeRaw(bs58check.decode(e),o)}function encode(e,o,r){return"number"==typeof e?bs58check.encode(encodeRaw(e,o,r)):bs58check.encode(encodeRaw(e.version,e.privateKey,e.compressed))}var bs58check=require("bs58check");module.exports={decode:decode,decodeRaw:decodeRaw,encode:encode,encodeRaw:encodeRaw};

}).call(this,require("buffer").Buffer)

},{"bs58check":106,"buffer":51}],104:[function(require,module,exports){
module.exports=function(r){function e(e){if(0===e.length)return"";for(var n=[0],t=0;t<e.length;++t){for(var o=0,h=e[t];o<n.length;++o)h+=n[o]<<8,n[o]=h%f,h=h/f|0;for(;h>0;)n.push(h%f),h=h/f|0}for(var a="",u=0;0===e[u]&&u<e.length-1;++u)a+=r[0];for(var l=n.length-1;l>=0;--l)a+=r[n[l]];return a}function n(r){if(0===r.length)return[];for(var e=[0],n=0;n<r.length;n++){var t=o[r[n]];if(void 0===t)return;for(var a=0,u=t;a<e.length;++a)u+=e[a]*f,e[a]=255&u,u>>=8;for(;u>0;)e.push(255&u),u>>=8}for(var l=0;r[l]===h&&l<r.length-1;++l)e.push(0);return e.reverse()}function t(r){var e=n(r);if(e)return e;throw new Error("Non-base"+f+" character")}for(var o={},f=r.length,h=r.charAt(0),a=0;a<r.length;a++)o[r.charAt(a)]=a;return{encode:e,decodeUnsafe:n,decode:t}};

},{}],105:[function(require,module,exports){
var basex=require("base-x");module.exports=basex("123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz");

},{"base-x":104}],106:[function(require,module,exports){
(function (Buffer){
"use strict";function sha256x2(e){var a=createHash("sha256").update(e).digest();return createHash("sha256").update(a).digest()}function encode(e){var a=sha256x2(e);return base58.encode(Buffer.concat([e,a],e.length+4))}function decodeRaw(e){var a=e.slice(0,-4),d=e.slice(-4),c=sha256x2(a);if(!(d[0]^c[0]|d[1]^c[1]|d[2]^c[2]|d[3]^c[3]))return a}function decodeUnsafe(e){var a=base58.decodeUnsafe(e);if(a){return decodeRaw(new Buffer(a))}}function decode(e){var a=base58.decode(e),d=new Buffer(a),c=decodeRaw(d);if(!c)throw new Error("Invalid checksum");return c}var base58=require("bs58"),createHash=require("create-hash");module.exports={encode:encode,decode:decode,decodeUnsafe:decodeUnsafe,decodeRaw:decodeUnsafe};

}).call(this,require("buffer").Buffer)

},{"bs58":105,"buffer":51,"create-hash":54}],107:[function(require,module,exports){
"use strict";function loadBlockRange(r){var t=r.lastBlock;return getBlock(0).then(function(r){return getCurrentBlock().then(function(n){var e=0!==t.height?getBlock(t.height).then(function(n){return n.hash===t.hash?n:(console.warn("Blockhash mismatch",t,n),r)}):Promise.resolve(r);return Promise.all([e,n]).then(function(t){var n=_slicedToArray(t,2);return{first:n[0],last:n[1],nullBlock:r}})})})}function getBlock(r){return(0,_channel.lookupBlockHash)(r).then(function(t){return{hash:t,height:r}})}function getCurrentBlock(){return(0,_channel.lookupSyncStatus)().then(function(r){return getBlock(r)})}Object.defineProperty(exports,"__esModule",{value:!0});var _slicedToArray=function(){function r(r,t){var n=[],e=!0,o=!1,l=void 0;try{for(var a,c=r[Symbol.iterator]();!(e=(a=c.next()).done)&&(n.push(a.value),!t||n.length!==t);e=!0);}catch(r){o=!0,l=r}finally{try{!e&&c.return&&c.return()}finally{if(o)throw l}}return n}return function(t,n){if(Array.isArray(t))return t;if(Symbol.iterator in Object(t))return r(t,n);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}();exports.loadBlockRange=loadBlockRange;var _channel=require("./channel");

},{"./channel":108}],108:[function(require,module,exports){
"use strict";function askPromise(e){var t=lastId+1;lastId++,doPostMessage({type:"promiseRequest",request:e,id:t});var s=(0,_deferred.deferred)();return messageEmitter.attach(function(r,o){"promiseResponseSuccess"===r.type&&r.response.type===e.type&&r.id===t&&(o(),s.resolve(r.response.response)),"promiseResponseFailure"===r.type&&r.id===t&&(o(),s.reject(new Error(r.failure)))}),s.promise}function askStream(e){var t=lastId+1;return lastId++,doPostMessage({type:"streamRequest",request:e,id:t}),new _stream.Stream(function(s,r){var o=function(){};return messageEmitter.attach(function(n,i){o=i,"streamResponseUpdate"===n.type&&n.update.type===e.type&&n.id===t&&s(n.update.response),"streamResponseFinish"===n.type&&n.id===t&&(i(),r())}),function(){o()}})}function lookupSyncStatus(){return askPromise({type:"lookupSyncStatus"})}function lookupBlockHash(e){return askPromise({type:"lookupBlockHash",height:e})}function doesTransactionExist(e){return askPromise({type:"doesTransactionExist",txid:e})}function chunkTransactions(e,t,s,r,o,n,i){return askStream({type:"chunkTransactions",chainId:e,firstIndex:t,lastIndex:s,startBlock:r,endBlock:o,pseudoCount:n,addresses:i}).map(function(e){return"string"==typeof e?new Error(e):e})}function returnSuccess(e){doPostMessage({type:"result",result:e})}function returnError(e){doPostMessage({type:"error",error:e instanceof Error?e.message:e.toString()})}function doPostMessage(e){self.postMessage(e)}Object.defineProperty(exports,"__esModule",{value:!0}),exports.startDiscoveryPromise=exports.initPromise=void 0,exports.lookupSyncStatus=lookupSyncStatus,exports.lookupBlockHash=lookupBlockHash,exports.doesTransactionExist=doesTransactionExist,exports.chunkTransactions=chunkTransactions,exports.returnSuccess=returnSuccess,exports.returnError=returnError;var _deferred=require("../../../utils/deferred"),_stream=require("../../../utils/stream"),lastId=0,messageEmitter=new _stream.Emitter;self.onmessage=function(e){var t=e.data;messageEmitter.emit(t)};var initDfd=(0,_deferred.deferred)(),initPromise=exports.initPromise=initDfd.promise;messageEmitter.attach(function(e,t){"init"===e.type&&(t(),initDfd.resolve({accountInfo:e.state,network:e.network,xpub:e.xpub,segwit:e.segwit,webassembly:e.webassembly}))});var startDiscoveryDfd=(0,_deferred.deferred)(),startDiscoveryPromise=exports.startDiscoveryPromise=startDiscoveryDfd.promise;messageEmitter.attach(function(e,t){"startDiscovery"===e.type&&(t(),startDiscoveryDfd.resolve())});

},{"../../../utils/deferred":116,"../../../utils/stream":117}],109:[function(require,module,exports){
"use strict";function deriveDateFormats(t){if(null==t)return{dateInfo:null,dateInfoDayFormat:null,dateInfoTimeFormat:null};var e=t,o=new Date(1e3*e);return{dateInfo:o.toString(),dateInfoDayFormat:dateToDayFormat(o),dateInfoTimeFormat:dateToTimeFormat(o)}}function dateToTimeFormat(t){return addZero(t.getHours().toString())+":"+addZero(t.getMinutes().toString())+":"+addZero(t.getSeconds().toString())}function dateToDayFormat(t){return t.getFullYear().toString()+"-"+addZero((t.getMonth()+1).toString())+"-"+addZero(t.getDate().toString())}function addZero(t){return 1===t.length?"0"+t:t}Object.defineProperty(exports,"__esModule",{value:!0}),exports.deriveDateFormats=deriveDateFormats;

},{}],110:[function(require,module,exports){
"use strict";function deriveAnalysis(e,n,t){return deriveFullInfo(deriveBalancelessAnalysisMap(e,n,deriveOutputsForAnalysisMap(e,n),t))}function deriveOutputsForAnalysisMap(e,n){function t(e){var n=[];return Object.keys(e.myOutputs).forEach(function(t){n[parseInt(t)]=e.myOutputs[parseInt(t)]}),{txid:e.hash,outputs:n}}function r(e){for(var n=[],t=0;t<e.tx.outs.length;t++){var r=e.tx.outs[t],s=e.outputAddresses[t];n.push({address:s,value:r.value})}return{txid:e.hash,outputs:n}}var s={},u=(0,_utils.objectValues)(e).map(function(e){return r(e)});return n.map(function(e){return t(e)}).concat(u).forEach(function(e){var n=e.txid,t=e.outputs;s[n]=t}),s}function deriveBalancelessAnalysisMap(e,n,t,r){var s={};return n.forEach(function(e){s[e.hash]=e}),Object.keys(e).forEach(function(n){s[n]=analyzeTransaction(e[n],t,r)}),s}function analyzeTransaction(e,n,t){var r=e.tx.ins.map(function(e){return{id:(0,_utils.getInputId)(e),index:e.index}}),s=null==e.tx.joinsplits||e.tx.joinsplits.length>0,u=e.tx.ins.some(function(e){return _bitcoinjsLibZcash.Transaction.isCoinbaseHash(e.hash)}),a=e.hash,i=getTargetsFromTransaction(r,n,t,a,s);return _extends({isCoinbase:u},(0,_dates.deriveDateFormats)(e.timestamp),{height:e.height,hash:a},i,{inputs:r,tsize:e.tx.byteLength(),vsize:e.vsize,fee:e.fee})}function getTargetsFromTransaction(e,n,t,r,s){function u(e){return null!=e&&null!=t[e]&&0===t[e][0]}function a(e){return null!=e&&null!=t[e]&&1===t[e][0]}function i(e){return null!=e&&null!=t[e]}function l(e){return!i(e)}function o(e){var n=[];return c.forEach(function(t,r){if(null!=t){var s=t.address,u=t.value;e(s)&&n.push({address:s,value:u,i:r})}}),n}var c=n[r],f=0,d=0,v=0;e.forEach(function(e){var t=e.id,r=e.index,s=n[t];if(s){var u=s[r];u&&i(u.address)&&(v-=u.value,d++)}});var h={};c.forEach(function(e,n){null!=e&&i(e.address)&&(v+=e.value,f++,h[n]={address:e.address,value:e.value,i:n})});var p=[],y=void 0,g=e.length,x=c.length;return d!==g||s||f!==x?v>0?(y="recv",p=o(function(e){return u(e)}),0===p.length&&(p=o(function(e){return a(e)}))):(y="sent",p=o(function(e){return l(e)}),0===p.length&&(y="self",p=[])):(y="self",p=[]),{targets:p,type:y,value:v,myOutputs:h}}function deriveFullInfo(e){var n=(0,_utils.objectValues)(e).sort(compareByOldestAndType),t=null;return n.map(function(e){return t=_extends({},e,{balance:null!=t?t.balance+e.value:e.value})}).reverse()}function compareByOldestAndType(e,n){return(null!=e.height?e.height:1/0)-(null!=n.height?n.height:1/0)||0||IMPACT_ORDERING.indexOf(e.type)-IMPACT_ORDERING.indexOf(n.type)}Object.defineProperty(exports,"__esModule",{value:!0});var _extends=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e};exports.deriveAnalysis=deriveAnalysis;var _utils=require("../utils"),_dates=require("./dates"),_bitcoinjsLibZcash=require("bitcoinjs-lib-zcash"),IMPACT_ORDERING=["recv","self","sent"];

},{"../utils":115,"./dates":109,"bitcoinjs-lib-zcash":19}],111:[function(require,module,exports){
"use strict";function deriveUtxos(n,t,e,i){var a=deriveAllTransactionHashes(n.main.newTransactions,n.change.newTransactions,t.transactions),s=deriveSpentOutputs(a,n.main.newTransactions,n.change.newTransactions,t.transactions);return _deriveUtxos(t.utxos,i,e,s)}function deriveAllTransactionHashes(n,t,e){var i=new Set;return Object.keys(n).forEach(function(n){i.add(n)}),Object.keys(t).forEach(function(n){i.add(n)}),e.forEach(function(n){i.add(n.hash)}),i}function deriveSpentOutputs(n,t,e,i){function a(t){return n.has(t)}function s(n){(0,_utils.objectValues)(n).forEach(function(n){n.tx.ins.forEach(function(n){var t=n.index,e=(0,_utils.getInputId)(n);a(e)&&r.add(e+":"+t)})})}var r=new Set;return i.forEach(function(n){n.inputs.forEach(function(n){var t=n.id,e=n.index;a(t)&&r.add(t+":"+e)})}),s(t),s(e),r}function _deriveUtxos(n,t,e,i){var a={},s=function(n){return n&&null!=e[n]},r=function(n){return n.ins.some(function(n){return _bitcoinjsLibZcash.Transaction.isCoinbaseHash(n.hash)})};return n.filter(function(n){var t=n.transactionHash+":"+n.index;return!i.has(t)}).forEach(function(n){a[n.transactionHash+":"+n.index]=n}),(0,_utils.objectValues)(t).forEach(function(n){var t=n.hash,o=n.tx,c=n.height,u=n.outputAddresses,h=n.vsize,f=n.fee,d=r(o);o.outs.forEach(function(n,r){var v=t+":"+r,l=u[r];if(!i.has(v)&&s(l)){var b=e[l],x={index:r,value:n.value,transactionHash:t,height:c,coinbase:d,addressPath:b,vsize:h,tsize:o.byteLength(),fee:f};a[v]=x}})}),(0,_utils.objectValues)(a)}Object.defineProperty(exports,"__esModule",{value:!0}),exports.deriveUtxos=deriveUtxos;var _utils=require("../utils"),_bitcoinjsLibZcash=require("bitcoinjs-lib-zcash");

},{"../utils":115,"bitcoinjs-lib-zcash":19}],112:[function(require,module,exports){
(function (Buffer){
"use strict";function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function findDeleted(e,t){var s=[];return _stream.Stream.fromArray(e).mapPromiseError(function(e){return t(e).then(function(t){t||s.push(e)})}).awaitFinish().then(function(){return s})}function deriveTxidSet(e){var t=new Set;return e.forEach(function(e){t.add(e.hash)}),t}Object.defineProperty(exports,"__esModule",{value:!0}),exports.GetChainTransactions=void 0;var _extends=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var s=arguments[t];for(var i in s)Object.prototype.hasOwnProperty.call(s,i)&&(e[i]=s[i])}return e},_createClass=function(){function e(e,t){for(var s=0;s<t.length;s++){var i=t[s];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,s,i){return s&&e(t.prototype,s),i&&e(t,i),t}}();exports.findDeleted=findDeleted;var _deferred=require("../../../utils/deferred"),_stream=require("../../../utils/stream"),_bitcoinjsLibZcash=require("bitcoinjs-lib-zcash"),GAP_SIZE=20,GetChainTransactions=exports.GetChainTransactions=function(){function e(t,s,i,a,r,n,h,c,o,d){_classCallCheck(this,e),this.allCheckedAddresses=[],this.backSearch={},this.newTransactions={},this.lastSearched=-1,this.dfd=(0,_deferred.deferred)(),this.originalLastConfirmed=i,this.lastConfirmed=i,this.chainId=t,this.range=s,this.getStream=a,this.txids=deriveTxidSet(r),this.allAddresses=n,this.network=h,this.xpub=c,this.segwit=o,this.webassembly=d}return _createClass(e,[{key:"originalLastSearched",value:function(){return this.originalLastConfirmed+GAP_SIZE}},{key:"nullRange",value:function(){var e=this.range;return _extends({},e,{since:e.nullBlock})}}]),_createClass(e,[{key:"discover",value:function(){var e=GAP_SIZE-1;return this.iterate(0,e,this.range),this.dfd.promise}},{key:"iterate",value:function(e,t,s){var i=this,a=null;if(this.allAddresses.length-1>=t)a=this.allAddresses.slice(e,t+1);else if(!this.webassembly){a=[];for(var r=_bitcoinjsLibZcash.HDNode.fromBase58(this.xpub,this.network).derive(this.chainId),n=e;n<=t;n++){var h=r.derive(n),c="";if(this.segwit){var o=h.getIdentifier(),d=new Buffer(o.length+2);d[0]=0,d[1]=20,o.copy(d,2);var l=_bitcoinjsLibZcash.crypto.hash160(d);c=_bitcoinjsLibZcash.address.toBase58Check(l,this.network.scriptHash)}else c=h.getAddress();a[n-e]=c}}var f=this.getStream(this.chainId,e,t,s.first.height,s.last.height,this.txids.size,a);f.values.attach(function(t){if(t instanceof Error)return i.dfd.reject(t),void f.dispose();var s=t;i.handleTransactions(s,e)}),f.finish.attach(function(){i.handleFinish(t)})}},{key:"handleTransactions",value:function(e,t){var s=this;e.addresses.forEach(function(e,i){s.allAddresses[i+t]=e,s.allCheckedAddresses[i+t]=e,s.backSearch[e]=i+t}),e.transactions.forEach(function(e){var t=_bitcoinjsLibZcash.Transaction.fromHex(e.hex,e.zcash),i=[];t.outs.forEach(function(t){var a=void 0;try{if(a=_bitcoinjsLibZcash.address.fromOutputScript(t.script,s.network),null!=s.backSearch[a]&&null!=e.height){var r=s.backSearch[a];r>s.lastConfirmed&&(s.lastConfirmed=r)}}catch(e){a="UNKNOWN"}i.push(a)});var a={tx:t,outputAddresses:i,height:e.height,timestamp:e.timestamp,hash:e.hash,fee:e.fee,vsize:e.vsize};s.newTransactions[a.hash]=a,s.txids.add(a.hash)})}},{key:"handleFinish",value:function(e){this.lastSearched=e;var t=this.lastConfirmed+GAP_SIZE,s=this.lastSearched+GAP_SIZE,i=t<s?t:s,a=this.lastSearched+1;i>=a?i>this.originalLastSearched()?a>=this.originalLastSearched()+1?this.iterate(a,i,this.nullRange()):this.iterate(a,this.originalLastSearched(),this.range):this.iterate(a,i,this.range):this.dfd.resolve({newTransactions:this.newTransactions,allAddresses:this.allAddresses})}}]),e}();

}).call(this,require("buffer").Buffer)

},{"../../../utils/deferred":116,"../../../utils/stream":117,"bitcoinjs-lib-zcash":19,"buffer":51}],113:[function(require,module,exports){
"use strict";function _interopRequireWildcard(e){if(e&&e.__esModule)return e;var n={};if(null!=e)for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n.default=e,n}function discoverAccount(e,n,r,t,a){return Promise.all([new _getChainTransactions.GetChainTransactions(0,e,n[0],channel.chunkTransactions,r,t,recvNetwork,recvXpub,recvSegwit,recvWebAssembly).discover(),new _getChainTransactions.GetChainTransactions(1,e,n[1],channel.chunkTransactions,[],a,recvNetwork,recvXpub,recvSegwit,recvWebAssembly).discover()]).then(function(e){var n=_slicedToArray(e,2);return{main:n[0],change:n[1]}})}var _slicedToArray=function(){function e(e,n){var r=[],t=!0,a=!1,s=void 0;try{for(var i,c=e[Symbol.iterator]();!(t=(i=c.next()).done)&&(r.push(i.value),!n||r.length!==n);t=!0);}catch(e){a=!0,s=e}finally{try{!t&&c.return&&c.return()}finally{if(a)throw s}}return r}return function(n,r){if(Array.isArray(n))return n;if(Symbol.iterator in Object(n))return e(n,r);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),_channel=require("./channel"),channel=_interopRequireWildcard(_channel),_blocks=require("./blocks"),_getChainTransactions=require("./get-chain-transactions"),_integrateNewTxs=require("./integrate-new-txs"),defaultInfo={utxos:[],transactions:[],usedAddresses:[],unusedAddresses:[],changeIndex:0,balance:0,sentAddresses:{},lastBlock:{height:0,hash:"abcd"},transactionHashes:{},changeAddresses:[],allowChange:!1,lastConfirmedChange:-1,lastConfirmedMain:-1,version:1},recvInfo=void 0,recvNetwork=void 0,recvXpub=void 0,recvSegwit=void 0,recvWebAssembly=void 0;channel.initPromise.then(function(e){var n=e.accountInfo,r=e.network,t=e.xpub,a=e.segwit,s=e.webassembly;recvInfo=n,recvNetwork=r,recvSegwit=a,recvXpub=t,recvWebAssembly=s}),channel.startDiscoveryPromise.then(function(){var e=null==recvInfo?defaultInfo:recvInfo;null==e.version&&(e=defaultInfo),(0,_blocks.loadBlockRange)(e).then(function(n){var r=0===n.first.height?defaultInfo:e,t=r.usedAddresses.length-1,a=r.changeIndex-1,s=null==r.lastConfirmedMain?t:r.lastConfirmedMain,i=null==r.lastConfirmedChange?a:r.lastConfirmedChange,c=r.transactions.filter(function(e){return null==e.height}).map(function(e){return e.hash}),o=r.usedAddresses.map(function(e){return e.address}).concat(r.unusedAddresses),u=r.changeAddresses;return discoverAccount(n,[s,i],r.transactions,o,u).then(function(e){return(0,_getChainTransactions.findDeleted)(c,channel.doesTransactionExist).then(function(t){return(0,_integrateNewTxs.integrateNewTxs)(e,r,n.last,t)})})}).then(function(e){return channel.returnSuccess(e)},function(e){return channel.returnError(e)})});

},{"./blocks":107,"./channel":108,"./get-chain-transactions":112,"./integrate-new-txs":114}],114:[function(require,module,exports){
"use strict";function deleteTxs(e,s){var r=new Set(s);return _extends({},e,{utxos:e.utxos.filter(function(e){return!r.has(e.transactionHash)}),transactions:e.transactions.filter(function(e){return!r.has(e.hash)})})}function integrateNewTxs(e,s,r,n){var t=0!==n.length?deleteTxs(s,n):s,a=deriveAddressToPath(e.main.allAddresses,e.change.allAddresses),d=deriveJoined(e.main.newTransactions,e.change.newTransactions),i=(0,_deriveUtxos.deriveUtxos)(e,t,a,d),o=(0,_deriveAnalysis.deriveAnalysis)(d,t.transactions,a),u=deriveUsedAddresses(o,a,e.main.allAddresses,0),c=u.usedAddresses,l=u.unusedAddresses,f=u.lastConfirmed,v=deriveUsedAddresses(o,a,e.change.allAddresses,1),h=o.length>0?o[0].balance:0;if(h!==i.reduce(function(e,s){return s.value+e},0))throw new Error("Inconsistent info.");var A=deriveSentAddresses(o),g=e.change.allAddresses,x=v.usedAddresses.length,_=v.unusedAddresses.length>0;return{utxos:i,transactions:o,usedAddresses:c,unusedAddresses:l,lastConfirmedMain:f,lastConfirmedChange:v.lastConfirmed,changeIndex:x,balance:h,lastBlock:r,sentAddresses:A,changeAddresses:g,allowChange:_,version:1}}function deriveAddressToPath(e,s){var r={};return e.forEach(function(e,s){r[e]=[0,s]}),s.forEach(function(e,s){r[e]=[1,s]}),r}function deriveJoined(e,s){var r={};return Object.keys(e).forEach(function(s){r[s]=e[s]}),Object.keys(s).forEach(function(e){r[e]=s[e]}),r}function deriveSentAddresses(e){var s={};return e.forEach(function(e){"sent"===e.type&&e.targets.forEach(function(r){var n=r.address,t=r.i;s[e.hash+":"+t]=n})}),s}function deriveUsedAddresses(e,s,r,n){var t=[],a=-1,d=-1;e.forEach(function(e){(0,_utils.objectValues)(e.myOutputs).forEach(function(r){var i=r.address,o=r.value,u=s[i];if(u[0]===n){var c=u[1];null==t[c]?t[c]=o:t[c]+=o,a<c&&(a=c),e.height&&d<c&&(d=c)}})});for(var i=[],o=0;o<=a;o++){var u=r[o],c=null==t[o]?0:t[o];i.push({address:u,received:c})}for(var l=[],f=a+1;f<=d+GAP_SIZE;f++)l.push(r[f]);return{usedAddresses:i,unusedAddresses:l,lastConfirmed:d}}Object.defineProperty(exports,"__esModule",{value:!0});var _extends=Object.assign||function(e){for(var s=1;s<arguments.length;s++){var r=arguments[s];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e};exports.integrateNewTxs=integrateNewTxs;var _deriveUtxos=require("./derive-utxos"),_deriveAnalysis=require("./derive-analysis"),_utils=require("../utils"),GAP_SIZE=20;

},{"../utils":115,"./derive-analysis":110,"./derive-utxos":111}],115:[function(require,module,exports){
"use strict";function getInputId(e){var t=e.hash;Array.prototype.reverse.call(t);var r=t.toString("hex");return Array.prototype.reverse.call(t),r}function objectValues(e){return Object.keys(e).map(function(t){return e[t]})}Object.defineProperty(exports,"__esModule",{value:!0}),exports.getInputId=getInputId,exports.objectValues=objectValues;

},{}],116:[function(require,module,exports){
"use strict";function deferred(){var e=function(e){},r=function(e){};return{promise:new Promise(function(t,n){e=t,r=n}),resolve:e,reject:r}}Object.defineProperty(exports,"__esModule",{value:!0}),exports.deferred=deferred;

},{}],117:[function(require,module,exports){
"use strict";function _classCallCheck(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(exports,"__esModule",{value:!0}),exports.StreamWithEnding=exports.Stream=exports.Queue=exports.Emitter=void 0;var _createClass=function(){function t(t,n){for(var e=0;e<n.length;e++){var i=n[e];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(n,e,i){return e&&t(n.prototype,e),i&&t(n,i),n}}(),_deferred=require("./deferred"),Emitter=exports.Emitter=function(){function t(){_classCallCheck(this,t),this.listeners=[]}return _createClass(t,[{key:"destroy",value:function(){var t=this;this.listeners.forEach(function(n){return t.detach(n.handler)}),this.listeners=[]}},{key:"attach",value:function(t){this.listeners=this.listeners.concat([{handler:t,detached:!1}])}},{key:"detach",value:function(t){this.listeners=this.listeners.filter(function(n){return n.handler!==t||(n.detached=!0,!1)})}},{key:"emit",value:function(t){var n=this;this.listeners.forEach(function(e){e.detached||e.handler(t,function(){n.detach(e.handler)})})}}]),t}(),Queue=exports.Queue=function(){function t(){_classCallCheck(this,t),this.buffer=[],this.takers=[]}return _createClass(t,[{key:"put",value:function(t){this.buffer.push(t),this.shift()}},{key:"take",value:function(t){this.takers.push(t),this.shift()}},{key:"shift",value:function(){if(this.buffer.length>0&&this.takers.length>0){var t=this.buffer.shift();this.takers.shift()(t)}}}]),t}(),Stream=function(){function t(n){var e=this;_classCallCheck(this,t),this.values=new Emitter,this.finish=new Emitter,this.dispose=n(function(t){e.values.emit(t)},function(){e.finish.emit()})}return _createClass(t,null,[{key:"fromEmitter",value:function(n,e){return new t(function(t,i){var r=!1,u=function(n){r||t(n)};return n.attach(u),function(){r=!0,n.detach(u),e()}})}},{key:"fromEmitterFinish",value:function(n,e,i){return new t(function(t,r){var u=!1,a=function(n){u||t(n)};return n.attach(a),e.attach(function(t,e){r(),e(),n.detach(a)}),function(){u=!0,n.detach(a),i()}})}},{key:"fromArray",value:function(n){return new t(function(t,e){var i=!1;return setTimeout(function(){i||(n.forEach(function(n){t(n)}),e())},0),function(){i=!0}})}},{key:"fromPromise",value:function(n){return new t(function(t,e){var i=void 0,r=!1;return n.then(function(n){r||(n.values.attach(function(n){return t(n)}),n.finish.attach(function(){return e()}),i=n)},function(){setTimeout(function(){return e()},1)}),function(){r=!0,null!=i&&i.dispose()}})}},{key:"generate",value:function(n,e,i){return new t(function(t,r){var u=!1;return function n(a){e(a).then(function(e){u||(t(e),i(e)?n(e):r())})}(n),function(){u=!0}})}},{key:"setLater",value:function(){var n=(0,_deferred.deferred)(),e=!1,i=function(t){if(e)throw new Error("Setting stream twice.");e=!0,n.resolve(t)};return{stream:new t(function(t,e){var i=null;return n.promise.then(function(n){i=n,n.values.attach(function(n){t(n)}),n.finish.attach(function(){e()})}),function(){null!=i&&i.dispose()}}),setter:i}}},{key:"simple",value:function(n){return new t(function(t,e){var i=!1;return setTimeout(function(){i||(t(n),setTimeout(function(){i||e()},1))},1),function(){i=!0}})}},{key:"combine",value:function(n){return new t(function(t,e){var i=new Array(n.length),r=new Set,u=new Set;return n.forEach(function(a,c){a.values.attach(function(e){i[c]=e,r.add(c),r.size>=n.length&&t(i)}),a.finish.attach(function(){u.add(c),u.size>=n.length&&e()})}),function(){n.forEach(function(t){return t.dispose()})}})}},{key:"combineFlat",value:function(n){return new t(function(t,e){var i=new Set;return n.forEach(function(r,u){r.values.attach(function(n){t(n)}),r.finish.attach(function(){i.add(u),i.size>=n.length&&e()})}),function(){n.forEach(function(t){return t.dispose()})}})}},{key:"filterNull",value:function(n){return new t(function(t,e){return n.values.attach(function(n){null!=n&&t(n)}),n.finish.attach(e),n.dispose})}}]),_createClass(t,[{key:"awaitFirst",value:function(){var t=this;return new Promise(function(n,e){var i=function(){},r=function e(r){t.values.detach(e),t.finish.detach(i),n(r)};i=function(){t.values.detach(r),t.finish.detach(i),e(new Error("No first value."))},t.values.attach(r),t.finish.attach(i)})}},{key:"awaitFinish",value:function(){var t=this;return new Promise(function(n){var e=function e(i){t.finish.detach(e),n()};t.finish.attach(e)})}},{key:"awaitLast",value:function(){var t=this;return new Promise(function(n,e){var i=void 0,r=function(t){i=t},u=function u(a){t.values.detach(r),t.finish.detach(u),null==i?e(new Error("No last value.")):n(i)};t.values.attach(r),t.finish.attach(u)})}},{key:"map",value:function(n){var e=this;return new t(function(t,i){return e.values.attach(function(e){t(n(e))}),e.finish.attach(i),e.dispose})}},{key:"mapPromise",value:function(n){var e=this;return new t(function(t,i){var r=Promise.resolve(),u=!1;return e.values.attach(function(e){var i=r;r=n(e).then(function(n){i.then(function(){u||t(n)})})}),e.finish.attach(function(){r.then(function(){return i()})}),function(){u=!0,e.dispose()}})}},{key:"mapPromiseError",value:function(n){var e=this;return new t(function(t,i){var r=Promise.resolve(),u=!1;return e.values.attach(function(e){var i=r;r=n(e).then(function(n){i.then(function(){u||t(n)})},function(n){i.then(function(){u||t(n)})})}),e.finish.attach(function(){r.then(function(){return i()})}),function(){u=!0,e.dispose()}})}},{key:"filter",value:function(n){var e=this;return new t(function(t,i){return e.values.attach(function(e){n(e)&&t(e)}),e.finish.attach(i),e.dispose})}},{key:"reduce",value:function(t,n){var e=this;return new Promise(function(i,r){var u=n;e.values.attach(function(n){u=t(u,n)}),e.finish.attach(function(){i(u)})})}},{key:"concat",value:function(n){var e=this;return new t(function(t,i){var r=0;e.values.attach(function(n){t(n)}),n.values.attach(function(n){t(n)});var u=function(){2===++r&&i()};return e.finish.attach(u),n.finish.attach(u),function(){e.dispose(),n.dispose()}})}}]),t}();exports.Stream=Stream;var StreamWithEnding=exports.StreamWithEnding=function(){function t(){_classCallCheck(this,t)}return _createClass(t,null,[{key:"fromStreamAndPromise",value:function(n,e){var i=new t;i.stream=n;var r=(0,_deferred.deferred)();return i.dispose=function(t){r.reject(t),n.dispose()},n.awaitFinish().then(function(){r.resolve()}),i.ending=r.promise.then(function(){return e}),i}}]),t}();

},{"./deferred":116}]},{},[113])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
